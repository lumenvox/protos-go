// Reporting API Protocol Buffer File
// This is the gRPC definition for the LumenVox Reporting API

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/reporting.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum with interaction analysis statuses
type InteractionAnalysisStatus int32

const (
	// No transcription
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_NO_TRANSCRIPT InteractionAnalysisStatus = 0
	// Correct
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_CORRECT InteractionAnalysisStatus = 1
	// Incorect
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_INCORRECT InteractionAnalysisStatus = 2
	// Out of Grammar
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_OOG InteractionAnalysisStatus = 3
	// Out of Coverage
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_OOC InteractionAnalysisStatus = 4
	// SI Match
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_SI_MATCH InteractionAnalysisStatus = 5
	// Failure for load
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_LOAD_FAILURE InteractionAnalysisStatus = 6
	// Failure for decode
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_DECODE_FAILURE InteractionAnalysisStatus = 7
	// No input
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_NO_INPUT InteractionAnalysisStatus = 8
	// No input - correct
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_CORRECT_NO_INPUT InteractionAnalysisStatus = 9
	// No input - incorrect
	InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_INCORRECT_NO_INPUT InteractionAnalysisStatus = 10
)

// Enum value maps for InteractionAnalysisStatus.
var (
	InteractionAnalysisStatus_name = map[int32]string{
		0:  "INTERACTION_ANALYSIS_STATUS_NO_TRANSCRIPT",
		1:  "INTERACTION_ANALYSIS_STATUS_CORRECT",
		2:  "INTERACTION_ANALYSIS_STATUS_INCORRECT",
		3:  "INTERACTION_ANALYSIS_STATUS_OOG",
		4:  "INTERACTION_ANALYSIS_STATUS_OOC",
		5:  "INTERACTION_ANALYSIS_STATUS_SI_MATCH",
		6:  "INTERACTION_ANALYSIS_STATUS_LOAD_FAILURE",
		7:  "INTERACTION_ANALYSIS_STATUS_DECODE_FAILURE",
		8:  "INTERACTION_ANALYSIS_STATUS_NO_INPUT",
		9:  "INTERACTION_ANALYSIS_STATUS_CORRECT_NO_INPUT",
		10: "INTERACTION_ANALYSIS_STATUS_INCORRECT_NO_INPUT",
	}
	InteractionAnalysisStatus_value = map[string]int32{
		"INTERACTION_ANALYSIS_STATUS_NO_TRANSCRIPT":      0,
		"INTERACTION_ANALYSIS_STATUS_CORRECT":            1,
		"INTERACTION_ANALYSIS_STATUS_INCORRECT":          2,
		"INTERACTION_ANALYSIS_STATUS_OOG":                3,
		"INTERACTION_ANALYSIS_STATUS_OOC":                4,
		"INTERACTION_ANALYSIS_STATUS_SI_MATCH":           5,
		"INTERACTION_ANALYSIS_STATUS_LOAD_FAILURE":       6,
		"INTERACTION_ANALYSIS_STATUS_DECODE_FAILURE":     7,
		"INTERACTION_ANALYSIS_STATUS_NO_INPUT":           8,
		"INTERACTION_ANALYSIS_STATUS_CORRECT_NO_INPUT":   9,
		"INTERACTION_ANALYSIS_STATUS_INCORRECT_NO_INPUT": 10,
	}
)

func (x InteractionAnalysisStatus) Enum() *InteractionAnalysisStatus {
	p := new(InteractionAnalysisStatus)
	*p = x
	return p
}

func (x InteractionAnalysisStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionAnalysisStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[0].Descriptor()
}

func (InteractionAnalysisStatus) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[0]
}

func (x InteractionAnalysisStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionAnalysisStatus.Descriptor instead.
func (InteractionAnalysisStatus) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{0}
}

// Data types for binary storage
type DataType int32

const (
	// Undefined
	DataType_DATA_TYPE_UNDEFINED DataType = 0
	// Audio
	DataType_DATA_TYPE_AUDIO DataType = 1
	// Voice print
	DataType_DATA_TYPE_MODEL DataType = 2
	// Voice print feature
	DataType_DATA_TYPE_FEATURE DataType = 3
	// Audio hash
	DataType_DATA_TYPE_HASH DataType = 4
	// Ssml
	DataType_DATA_TYPE_SSML DataType = 5
	// Grammar
	DataType_DATA_TYPE_GRAMMAR DataType = 6
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_UNDEFINED",
		1: "DATA_TYPE_AUDIO",
		2: "DATA_TYPE_MODEL",
		3: "DATA_TYPE_FEATURE",
		4: "DATA_TYPE_HASH",
		5: "DATA_TYPE_SSML",
		6: "DATA_TYPE_GRAMMAR",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNDEFINED": 0,
		"DATA_TYPE_AUDIO":     1,
		"DATA_TYPE_MODEL":     2,
		"DATA_TYPE_FEATURE":   3,
		"DATA_TYPE_HASH":      4,
		"DATA_TYPE_SSML":      5,
		"DATA_TYPE_GRAMMAR":   6,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{1}
}

// Define various diagnostics types
type DiagnosticsType int32

const (
	// No diagnostic type specified (do not use)
	DiagnosticsType_Undefined DiagnosticsType = 0
	// Postgres diagnostic test specified
	DiagnosticsType_Postgres DiagnosticsType = 1
	// MongoDB diagnostic test specified
	DiagnosticsType_MongoDb DiagnosticsType = 3
	// Redis diagnostic test specified
	DiagnosticsType_Redis DiagnosticsType = 4
	// RabbitMQ diagnostic test specified
	DiagnosticsType_RabbitMq DiagnosticsType = 5
)

// Enum value maps for DiagnosticsType.
var (
	DiagnosticsType_name = map[int32]string{
		0: "Undefined",
		1: "Postgres",
		3: "MongoDb",
		4: "Redis",
		5: "RabbitMq",
	}
	DiagnosticsType_value = map[string]int32{
		"Undefined": 0,
		"Postgres":  1,
		"MongoDb":   3,
		"Redis":     4,
		"RabbitMq":  5,
	}
)

func (x DiagnosticsType) Enum() *DiagnosticsType {
	p := new(DiagnosticsType)
	*p = x
	return p
}

func (x DiagnosticsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticsType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[2].Descriptor()
}

func (DiagnosticsType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[2]
}

func (x DiagnosticsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticsType.Descriptor instead.
func (DiagnosticsType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{2}
}

// Enum with available sorting fields
type AnalysisSetListRequest_AnalysisSetListOrder int32

const (
	// Order by creation date ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_CREATED_DATE AnalysisSetListRequest_AnalysisSetListOrder = 0
	// Order by creation date descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_CREATED_DATE_DESC AnalysisSetListRequest_AnalysisSetListOrder = 1
	// Order by the number of sessions ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS AnalysisSetListRequest_AnalysisSetListOrder = 2
	// Order by the number of sessions descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS_DESC AnalysisSetListRequest_AnalysisSetListOrder = 3
	// Order by the number of interactions ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS AnalysisSetListRequest_AnalysisSetListOrder = 4
	// Order by the number of interactions descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS_DESC AnalysisSetListRequest_AnalysisSetListOrder = 5
	// Order by interaction status ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_STATUS AnalysisSetListRequest_AnalysisSetListOrder = 6
	// Order by interaction status descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_STATUS_DESC AnalysisSetListRequest_AnalysisSetListOrder = 7
	// Order by interaction name ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NAME AnalysisSetListRequest_AnalysisSetListOrder = 8
	// Order by interaction name descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_NAME_DESC AnalysisSetListRequest_AnalysisSetListOrder = 9
	// Order by interaction type ascending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_TYPE AnalysisSetListRequest_AnalysisSetListOrder = 10
	// Order by interaction type descending
	AnalysisSetListRequest_ANALYSIS_SET_LIST_ORDER_TYPE_DESC AnalysisSetListRequest_AnalysisSetListOrder = 11
)

// Enum value maps for AnalysisSetListRequest_AnalysisSetListOrder.
var (
	AnalysisSetListRequest_AnalysisSetListOrder_name = map[int32]string{
		0:  "ANALYSIS_SET_LIST_ORDER_CREATED_DATE",
		1:  "ANALYSIS_SET_LIST_ORDER_CREATED_DATE_DESC",
		2:  "ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS",
		3:  "ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS_DESC",
		4:  "ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS",
		5:  "ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS_DESC",
		6:  "ANALYSIS_SET_LIST_ORDER_STATUS",
		7:  "ANALYSIS_SET_LIST_ORDER_STATUS_DESC",
		8:  "ANALYSIS_SET_LIST_ORDER_NAME",
		9:  "ANALYSIS_SET_LIST_ORDER_NAME_DESC",
		10: "ANALYSIS_SET_LIST_ORDER_TYPE",
		11: "ANALYSIS_SET_LIST_ORDER_TYPE_DESC",
	}
	AnalysisSetListRequest_AnalysisSetListOrder_value = map[string]int32{
		"ANALYSIS_SET_LIST_ORDER_CREATED_DATE":          0,
		"ANALYSIS_SET_LIST_ORDER_CREATED_DATE_DESC":     1,
		"ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS":          2,
		"ANALYSIS_SET_LIST_ORDER_NUM_SESSIONS_DESC":     3,
		"ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS":      4,
		"ANALYSIS_SET_LIST_ORDER_NUM_INTERACTIONS_DESC": 5,
		"ANALYSIS_SET_LIST_ORDER_STATUS":                6,
		"ANALYSIS_SET_LIST_ORDER_STATUS_DESC":           7,
		"ANALYSIS_SET_LIST_ORDER_NAME":                  8,
		"ANALYSIS_SET_LIST_ORDER_NAME_DESC":             9,
		"ANALYSIS_SET_LIST_ORDER_TYPE":                  10,
		"ANALYSIS_SET_LIST_ORDER_TYPE_DESC":             11,
	}
)

func (x AnalysisSetListRequest_AnalysisSetListOrder) Enum() *AnalysisSetListRequest_AnalysisSetListOrder {
	p := new(AnalysisSetListRequest_AnalysisSetListOrder)
	*p = x
	return p
}

func (x AnalysisSetListRequest_AnalysisSetListOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisSetListRequest_AnalysisSetListOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[3].Descriptor()
}

func (AnalysisSetListRequest_AnalysisSetListOrder) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[3]
}

func (x AnalysisSetListRequest_AnalysisSetListOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisSetListRequest_AnalysisSetListOrder.Descriptor instead.
func (AnalysisSetListRequest_AnalysisSetListOrder) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{0, 0}
}

// Enum with the sorting fields
type InteractionAnalysisListRequest_InteractionAnalysisListOrder int32

const (
	// Order by interaction start date ascending
	InteractionAnalysisListRequest_INTERACTION_ANALYSIS_LIST_ORDER_START_TIME InteractionAnalysisListRequest_InteractionAnalysisListOrder = 0
	// Order by interaction start date descending
	InteractionAnalysisListRequest_INTERACTION_ANALYSIS_LIST_ORDER_START_TIME_DESC InteractionAnalysisListRequest_InteractionAnalysisListOrder = 1
	// Order by interaction end date ascending
	InteractionAnalysisListRequest_INTERACTION_ANALYSIS_LIST_ORDER_END_TIME InteractionAnalysisListRequest_InteractionAnalysisListOrder = 2
	// Order by interaction end date descending
	InteractionAnalysisListRequest_INTERACTION_ANALYSIS_LIST_ORDER_END_TIME_DESC InteractionAnalysisListRequest_InteractionAnalysisListOrder = 3 // Can be extended depending on requirements
)

// Enum value maps for InteractionAnalysisListRequest_InteractionAnalysisListOrder.
var (
	InteractionAnalysisListRequest_InteractionAnalysisListOrder_name = map[int32]string{
		0: "INTERACTION_ANALYSIS_LIST_ORDER_START_TIME",
		1: "INTERACTION_ANALYSIS_LIST_ORDER_START_TIME_DESC",
		2: "INTERACTION_ANALYSIS_LIST_ORDER_END_TIME",
		3: "INTERACTION_ANALYSIS_LIST_ORDER_END_TIME_DESC",
	}
	InteractionAnalysisListRequest_InteractionAnalysisListOrder_value = map[string]int32{
		"INTERACTION_ANALYSIS_LIST_ORDER_START_TIME":      0,
		"INTERACTION_ANALYSIS_LIST_ORDER_START_TIME_DESC": 1,
		"INTERACTION_ANALYSIS_LIST_ORDER_END_TIME":        2,
		"INTERACTION_ANALYSIS_LIST_ORDER_END_TIME_DESC":   3,
	}
)

func (x InteractionAnalysisListRequest_InteractionAnalysisListOrder) Enum() *InteractionAnalysisListRequest_InteractionAnalysisListOrder {
	p := new(InteractionAnalysisListRequest_InteractionAnalysisListOrder)
	*p = x
	return p
}

func (x InteractionAnalysisListRequest_InteractionAnalysisListOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionAnalysisListRequest_InteractionAnalysisListOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[4].Descriptor()
}

func (InteractionAnalysisListRequest_InteractionAnalysisListOrder) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[4]
}

func (x InteractionAnalysisListRequest_InteractionAnalysisListOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionAnalysisListRequest_InteractionAnalysisListOrder.Descriptor instead.
func (InteractionAnalysisListRequest_InteractionAnalysisListOrder) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{11, 0}
}

// Describes the possible statuses for an analysis set
type AnalysisSet_AnalysisSetStatus int32

const (
	// Not yet initialized
	AnalysisSet_ANALYSIS_SET_STATUS_UNINITIALIZED AnalysisSet_AnalysisSetStatus = 0
	// Create operation is in progress
	AnalysisSet_ANALYSIS_SET_STATUS_CREATING AnalysisSet_AnalysisSetStatus = 1
	// Created successfully
	AnalysisSet_ANALYSIS_SET_STATUS_READY AnalysisSet_AnalysisSetStatus = 2
	// Tuning in progress
	AnalysisSet_ANALYSIS_SET_STATUS_WORKING AnalysisSet_AnalysisSetStatus = 3
	// Deleted
	AnalysisSet_ANALYSIS_SET_STATUS_DELETED AnalysisSet_AnalysisSetStatus = 4
	// Deletion in progress
	AnalysisSet_ANALYSIS_SET_STATUS_ERASING AnalysisSet_AnalysisSetStatus = 5
	// Exporting of the analysis set in progress (busy)
	AnalysisSet_ANALYSIS_SET_STATUS_EXPORTING AnalysisSet_AnalysisSetStatus = 6
	// Importing of the analysis set in progress (busy)
	AnalysisSet_ANALYSIS_SET_STATUS_IMPORTING AnalysisSet_AnalysisSetStatus = 7
)

// Enum value maps for AnalysisSet_AnalysisSetStatus.
var (
	AnalysisSet_AnalysisSetStatus_name = map[int32]string{
		0: "ANALYSIS_SET_STATUS_UNINITIALIZED",
		1: "ANALYSIS_SET_STATUS_CREATING",
		2: "ANALYSIS_SET_STATUS_READY",
		3: "ANALYSIS_SET_STATUS_WORKING",
		4: "ANALYSIS_SET_STATUS_DELETED",
		5: "ANALYSIS_SET_STATUS_ERASING",
		6: "ANALYSIS_SET_STATUS_EXPORTING",
		7: "ANALYSIS_SET_STATUS_IMPORTING",
	}
	AnalysisSet_AnalysisSetStatus_value = map[string]int32{
		"ANALYSIS_SET_STATUS_UNINITIALIZED": 0,
		"ANALYSIS_SET_STATUS_CREATING":      1,
		"ANALYSIS_SET_STATUS_READY":         2,
		"ANALYSIS_SET_STATUS_WORKING":       3,
		"ANALYSIS_SET_STATUS_DELETED":       4,
		"ANALYSIS_SET_STATUS_ERASING":       5,
		"ANALYSIS_SET_STATUS_EXPORTING":     6,
		"ANALYSIS_SET_STATUS_IMPORTING":     7,
	}
)

func (x AnalysisSet_AnalysisSetStatus) Enum() *AnalysisSet_AnalysisSetStatus {
	p := new(AnalysisSet_AnalysisSetStatus)
	*p = x
	return p
}

func (x AnalysisSet_AnalysisSetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisSet_AnalysisSetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_reporting_proto_enumTypes[5].Descriptor()
}

func (AnalysisSet_AnalysisSetStatus) Type() protoreflect.EnumType {
	return &file_lumenvox_api_reporting_proto_enumTypes[5]
}

func (x AnalysisSet_AnalysisSetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisSet_AnalysisSetStatus.Descriptor instead.
func (AnalysisSet_AnalysisSetStatus) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{21, 0}
}

// Creates a request / filter for analysis set retrieval
type AnalysisSetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of records per page (optional).
	// Accepted values 1-100, default 10
	PageSize uint32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Records offset for applied filter (optional), default 0
	StartingAt uint32 `protobuf:"varint,2,opt,name=starting_at,json=startingAt,proto3" json:"starting_at,omitempty"`
	// Analysis set list order (optional), default created_date
	ListOrder []AnalysisSetListRequest_AnalysisSetListOrder `protobuf:"varint,3,rep,packed,name=list_order,json=listOrder,proto3,enum=lumenvox.api.AnalysisSetListRequest_AnalysisSetListOrder" json:"list_order,omitempty"`
	// Additional filtering options (optional, e.g. by type or language...)
	Filter *AnalysisSetListFilterOptions `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *AnalysisSetListRequest) Reset() {
	*x = AnalysisSetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetListRequest) ProtoMessage() {}

func (x *AnalysisSetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetListRequest.ProtoReflect.Descriptor instead.
func (*AnalysisSetListRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{0}
}

func (x *AnalysisSetListRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AnalysisSetListRequest) GetStartingAt() uint32 {
	if x != nil {
		return x.StartingAt
	}
	return 0
}

func (x *AnalysisSetListRequest) GetListOrder() []AnalysisSetListRequest_AnalysisSetListOrder {
	if x != nil {
		return x.ListOrder
	}
	return nil
}

func (x *AnalysisSetListRequest) GetFilter() *AnalysisSetListFilterOptions {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Defines a filter for analysis set list
type AnalysisSetListFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start timestamp for the interval
	CreatedDateFrom *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_date_from,json=createdDateFrom,proto3" json:"created_date_from,omitempty"`
	// End timestamp for the interval
	CreatedDateTo *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_date_to,json=createdDateTo,proto3" json:"created_date_to,omitempty"`
	// Interaction type filter
	Type InteractionType `protobuf:"varint,3,opt,name=type,proto3,enum=lumenvox.api.InteractionType" json:"type,omitempty"`
	// Description (name) filter
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AnalysisSetListFilterOptions) Reset() {
	*x = AnalysisSetListFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetListFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetListFilterOptions) ProtoMessage() {}

func (x *AnalysisSetListFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetListFilterOptions.ProtoReflect.Descriptor instead.
func (*AnalysisSetListFilterOptions) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{1}
}

func (x *AnalysisSetListFilterOptions) GetCreatedDateFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDateFrom
	}
	return nil
}

func (x *AnalysisSetListFilterOptions) GetCreatedDateTo() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDateTo
	}
	return nil
}

func (x *AnalysisSetListFilterOptions) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_INTERACTION_TYPE_UNSPECIFIED
}

func (x *AnalysisSetListFilterOptions) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Returns a list of analysis sets
type AnalysisSetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of requested analysis sets
	AnalysisSetList []*AnalysisSet `protobuf:"bytes,1,rep,name=analysis_set_list,json=analysisSetList,proto3" json:"analysis_set_list,omitempty"`
	// The number of analysis sets in the response
	TotalNumberOfMatched uint32 `protobuf:"varint,2,opt,name=total_number_of_matched,json=totalNumberOfMatched,proto3" json:"total_number_of_matched,omitempty"`
}

func (x *AnalysisSetListResponse) Reset() {
	*x = AnalysisSetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetListResponse) ProtoMessage() {}

func (x *AnalysisSetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetListResponse.ProtoReflect.Descriptor instead.
func (*AnalysisSetListResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{2}
}

func (x *AnalysisSetListResponse) GetAnalysisSetList() []*AnalysisSet {
	if x != nil {
		return x.AnalysisSetList
	}
	return nil
}

func (x *AnalysisSetListResponse) GetTotalNumberOfMatched() uint32 {
	if x != nil {
		return x.TotalNumberOfMatched
	}
	return 0
}

// Requests the number of interactions and sessions generated by an
// AnalysisSetCreate filter
type AnalysisSetPreCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analysis set filter
	FilterOptions *AnalysisSetFilterOptions `protobuf:"bytes,1,opt,name=filter_options,json=filterOptions,proto3" json:"filter_options,omitempty"`
}

func (x *AnalysisSetPreCreateRequest) Reset() {
	*x = AnalysisSetPreCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetPreCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetPreCreateRequest) ProtoMessage() {}

func (x *AnalysisSetPreCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetPreCreateRequest.ProtoReflect.Descriptor instead.
func (*AnalysisSetPreCreateRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{3}
}

func (x *AnalysisSetPreCreateRequest) GetFilterOptions() *AnalysisSetFilterOptions {
	if x != nil {
		return x.FilterOptions
	}
	return nil
}

// Returns the number of sessions and interactions generated by an
// AnalysisSetCreate filter
type AnalysisSetPreCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of sessions
	SessionsExtractNeeded uint32 `protobuf:"varint,1,opt,name=sessions_extract_needed,json=sessionsExtractNeeded,proto3" json:"sessions_extract_needed,omitempty"`
	// Number of interactions
	InteractionsExtractNeeded uint32 `protobuf:"varint,2,opt,name=interactions_extract_needed,json=interactionsExtractNeeded,proto3" json:"interactions_extract_needed,omitempty"`
}

func (x *AnalysisSetPreCreateResponse) Reset() {
	*x = AnalysisSetPreCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetPreCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetPreCreateResponse) ProtoMessage() {}

func (x *AnalysisSetPreCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetPreCreateResponse.ProtoReflect.Descriptor instead.
func (*AnalysisSetPreCreateResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{4}
}

func (x *AnalysisSetPreCreateResponse) GetSessionsExtractNeeded() uint32 {
	if x != nil {
		return x.SessionsExtractNeeded
	}
	return 0
}

func (x *AnalysisSetPreCreateResponse) GetInteractionsExtractNeeded() uint32 {
	if x != nil {
		return x.InteractionsExtractNeeded
	}
	return 0
}

// Creates an analysis set based on the requested filter
type AnalysisSetCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Creation filter
	FilterOptions *AnalysisSetFilterOptions `protobuf:"bytes,1,opt,name=filter_options,json=filterOptions,proto3" json:"filter_options,omitempty"`
	// The name (description) of the new analysis set created
	AnalysisSetName string `protobuf:"bytes,2,opt,name=analysis_set_name,json=analysisSetName,proto3" json:"analysis_set_name,omitempty"`
}

func (x *AnalysisSetCreateRequest) Reset() {
	*x = AnalysisSetCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetCreateRequest) ProtoMessage() {}

func (x *AnalysisSetCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetCreateRequest.ProtoReflect.Descriptor instead.
func (*AnalysisSetCreateRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{5}
}

func (x *AnalysisSetCreateRequest) GetFilterOptions() *AnalysisSetFilterOptions {
	if x != nil {
		return x.FilterOptions
	}
	return nil
}

func (x *AnalysisSetCreateRequest) GetAnalysisSetName() string {
	if x != nil {
		return x.AnalysisSetName
	}
	return ""
}

// Returns the new created analysis set identifier
type AnalysisSetCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the new analysis set created
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *AnalysisSetCreateResponse) Reset() {
	*x = AnalysisSetCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetCreateResponse) ProtoMessage() {}

func (x *AnalysisSetCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetCreateResponse.ProtoReflect.Descriptor instead.
func (*AnalysisSetCreateResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{6}
}

func (x *AnalysisSetCreateResponse) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Deletes an existing analysis set
type AnalysisSetDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the target analysis set
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *AnalysisSetDeleteRequest) Reset() {
	*x = AnalysisSetDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetDeleteRequest) ProtoMessage() {}

func (x *AnalysisSetDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetDeleteRequest.ProtoReflect.Descriptor instead.
func (*AnalysisSetDeleteRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{7}
}

func (x *AnalysisSetDeleteRequest) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Empty response for deletion operation
type AnalysisSetDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalysisSetDeleteResponse) Reset() {
	*x = AnalysisSetDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetDeleteResponse) ProtoMessage() {}

func (x *AnalysisSetDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetDeleteResponse.ProtoReflect.Descriptor instead.
func (*AnalysisSetDeleteResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{8}
}

// Request for analysisSet retrieval
type AnalysisSetGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the target analysis set
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *AnalysisSetGetRequest) Reset() {
	*x = AnalysisSetGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetGetRequest) ProtoMessage() {}

func (x *AnalysisSetGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetGetRequest.ProtoReflect.Descriptor instead.
func (*AnalysisSetGetRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{9}
}

func (x *AnalysisSetGetRequest) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Returns the requested analysis set
type AnalysisSetGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Requested analysis set
	AnalysisSet *AnalysisSet `protobuf:"bytes,2,opt,name=analysis_set,json=analysisSet,proto3" json:"analysis_set,omitempty"`
}

func (x *AnalysisSetGetResponse) Reset() {
	*x = AnalysisSetGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetGetResponse) ProtoMessage() {}

func (x *AnalysisSetGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetGetResponse.ProtoReflect.Descriptor instead.
func (*AnalysisSetGetResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{10}
}

func (x *AnalysisSetGetResponse) GetAnalysisSet() *AnalysisSet {
	if x != nil {
		return x.AnalysisSet
	}
	return nil
}

// Creates a request for analysis set retrieval based on predefined filters
type InteractionAnalysisListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of analysis set (required)
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
	// Page size, accepted values 1-100, default 10 (optional)
	PageSize uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Records offset for applied filter, default 0 (optional)
	StartingAt uint32 `protobuf:"varint,3,opt,name=starting_at,json=startingAt,proto3" json:"starting_at,omitempty"`
	// Set analysis set order, default created_date (optional)
	ListOrder []InteractionAnalysisListRequest_InteractionAnalysisListOrder `protobuf:"varint,4,rep,packed,name=list_order,json=listOrder,proto3,enum=lumenvox.api.InteractionAnalysisListRequest_InteractionAnalysisListOrder" json:"list_order,omitempty"`
	// Additional filtering options (e.g. by type or language...) (optional)
	Filter *InteractionAnalysisFilterOptions `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *InteractionAnalysisListRequest) Reset() {
	*x = InteractionAnalysisListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisListRequest) ProtoMessage() {}

func (x *InteractionAnalysisListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisListRequest.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisListRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{11}
}

func (x *InteractionAnalysisListRequest) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

func (x *InteractionAnalysisListRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *InteractionAnalysisListRequest) GetStartingAt() uint32 {
	if x != nil {
		return x.StartingAt
	}
	return 0
}

func (x *InteractionAnalysisListRequest) GetListOrder() []InteractionAnalysisListRequest_InteractionAnalysisListOrder {
	if x != nil {
		return x.ListOrder
	}
	return nil
}

func (x *InteractionAnalysisListRequest) GetFilter() *InteractionAnalysisFilterOptions {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Defines the Interaction filter within an analysis set
type InteractionAnalysisFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lumenvox session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Start date time
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// End date time
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Include selected grammars
	GrammarHash string `protobuf:"bytes,4,opt,name=grammar_hash,json=grammarHash,proto3" json:"grammar_hash,omitempty"`
	// Include selected ssml
	SsmlHash string `protobuf:"bytes,5,opt,name=ssml_hash,json=ssmlHash,proto3" json:"ssml_hash,omitempty"`
	// Search text
	SearchText string `protobuf:"bytes,6,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
}

func (x *InteractionAnalysisFilterOptions) Reset() {
	*x = InteractionAnalysisFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisFilterOptions) ProtoMessage() {}

func (x *InteractionAnalysisFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisFilterOptions.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisFilterOptions) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{12}
}

func (x *InteractionAnalysisFilterOptions) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *InteractionAnalysisFilterOptions) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *InteractionAnalysisFilterOptions) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *InteractionAnalysisFilterOptions) GetGrammarHash() string {
	if x != nil {
		return x.GrammarHash
	}
	return ""
}

func (x *InteractionAnalysisFilterOptions) GetSsmlHash() string {
	if x != nil {
		return x.SsmlHash
	}
	return ""
}

func (x *InteractionAnalysisFilterOptions) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

// Returns a filtered list of interactions within selected analysis set
type InteractionAnalysisListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Interactions
	InteractionList []*InteractionDetails `protobuf:"bytes,1,rep,name=interaction_list,json=interactionList,proto3" json:"interaction_list,omitempty"`
	// Total number of entries in the list
	TotalNumberOfMatched uint32 `protobuf:"varint,2,opt,name=total_number_of_matched,json=totalNumberOfMatched,proto3" json:"total_number_of_matched,omitempty"`
	// Total number of transcribed entries in the list
	TotalNumberOfTranscribed uint32 `protobuf:"varint,3,opt,name=total_number_of_transcribed,json=totalNumberOfTranscribed,proto3" json:"total_number_of_transcribed,omitempty"`
}

func (x *InteractionAnalysisListResponse) Reset() {
	*x = InteractionAnalysisListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisListResponse) ProtoMessage() {}

func (x *InteractionAnalysisListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisListResponse.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisListResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{13}
}

func (x *InteractionAnalysisListResponse) GetInteractionList() []*InteractionDetails {
	if x != nil {
		return x.InteractionList
	}
	return nil
}

func (x *InteractionAnalysisListResponse) GetTotalNumberOfMatched() uint32 {
	if x != nil {
		return x.TotalNumberOfMatched
	}
	return 0
}

func (x *InteractionAnalysisListResponse) GetTotalNumberOfTranscribed() uint32 {
	if x != nil {
		return x.TotalNumberOfTranscribed
	}
	return 0
}

// Creates a request for interaction details retrieval
type InteractionAnalysisGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the interaction
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// UUID for the analysis set
	AnalysisSetId string `protobuf:"bytes,2,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *InteractionAnalysisGetRequest) Reset() {
	*x = InteractionAnalysisGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisGetRequest) ProtoMessage() {}

func (x *InteractionAnalysisGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisGetRequest.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisGetRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{14}
}

func (x *InteractionAnalysisGetRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionAnalysisGetRequest) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Returns the InteractionDetails for requested interaction / analysis set
type InteractionAnalysisGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction details message
	Interaction *InteractionDetails `protobuf:"bytes,1,opt,name=interaction,proto3" json:"interaction,omitempty"`
}

func (x *InteractionAnalysisGetResponse) Reset() {
	*x = InteractionAnalysisGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisGetResponse) ProtoMessage() {}

func (x *InteractionAnalysisGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisGetResponse.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisGetResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{15}
}

func (x *InteractionAnalysisGetResponse) GetInteraction() *InteractionDetails {
	if x != nil {
		return x.Interaction
	}
	return nil
}

// Updates the transcription for an asr interaction
type InteractionAnalysisUpdateTranscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Update transcription message
	InteractionAnalysis *InteractionAnalysisUpdateTranscription `protobuf:"bytes,1,opt,name=interactionAnalysis,proto3" json:"interactionAnalysis,omitempty"`
}

func (x *InteractionAnalysisUpdateTranscriptionRequest) Reset() {
	*x = InteractionAnalysisUpdateTranscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisUpdateTranscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisUpdateTranscriptionRequest) ProtoMessage() {}

func (x *InteractionAnalysisUpdateTranscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisUpdateTranscriptionRequest.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisUpdateTranscriptionRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{16}
}

func (x *InteractionAnalysisUpdateTranscriptionRequest) GetInteractionAnalysis() *InteractionAnalysisUpdateTranscription {
	if x != nil {
		return x.InteractionAnalysis
	}
	return nil
}

// Updates asr transcription response
type InteractionAnalysisUpdateTranscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation status
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Product interaction within a session
	Interaction *InteractionDetails `protobuf:"bytes,2,opt,name=interaction,proto3" json:"interaction,omitempty"`
}

func (x *InteractionAnalysisUpdateTranscriptionResponse) Reset() {
	*x = InteractionAnalysisUpdateTranscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisUpdateTranscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisUpdateTranscriptionResponse) ProtoMessage() {}

func (x *InteractionAnalysisUpdateTranscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisUpdateTranscriptionResponse.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisUpdateTranscriptionResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{17}
}

func (x *InteractionAnalysisUpdateTranscriptionResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *InteractionAnalysisUpdateTranscriptionResponse) GetInteraction() *InteractionDetails {
	if x != nil {
		return x.Interaction
	}
	return nil
}

// Describes one interaction
type InteractionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New interaction UUID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Analysis set uuid
	AnalysisSetId string `protobuf:"bytes,2,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
	// Original session identifier
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Original interaction identifier
	InteractionId string `protobuf:"bytes,4,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Base or Original Interaction type: ASR, TTS
	MainType InteractionType `protobuf:"varint,5,opt,name=main_type,json=mainType,proto3,enum=lumenvox.api.InteractionType" json:"main_type,omitempty"`
	// Analysis status
	Status InteractionAnalysisStatus `protobuf:"varint,6,opt,name=status,proto3,enum=lumenvox.api.InteractionAnalysisStatus" json:"status,omitempty"`
	// Audio channel identifier
	ChannelId uint32 `protobuf:"varint,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Audio format
	AudioFormat *AudioFormat `protobuf:"bytes,8,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Error
	Error string `protobuf:"bytes,9,opt,name=error,proto3" json:"error,omitempty"`
	// Processing start timestamp
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Processing end timestamp
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Transcribed text
	TranscriptText string `protobuf:"bytes,12,opt,name=transcript_text,json=transcriptText,proto3" json:"transcript_text,omitempty"`
	// Transcribed semantic
	TranscriptSemantic string `protobuf:"bytes,13,opt,name=transcript_semantic,json=transcriptSemantic,proto3" json:"transcript_semantic,omitempty"`
	// Original interaction result
	OriginalResult *InteractionResultSet `protobuf:"bytes,14,opt,name=original_result,json=originalResult,proto3" json:"original_result,omitempty"`
	// Tuned interaction result
	TunedResult *InteractionResultSet `protobuf:"bytes,15,opt,name=tuned_result,json=tunedResult,proto3" json:"tuned_result,omitempty"`
	// Analysis status text
	StatusText string `protobuf:"bytes,16,opt,name=status_text,json=statusText,proto3" json:"status_text,omitempty"`
	// Error text in html format
	HtmlError string `protobuf:"bytes,17,opt,name=html_error,json=htmlError,proto3" json:"html_error,omitempty"`
	// Converted Interaction type: CPA, TTS
	Type InteractionType `protobuf:"varint,20,opt,name=type,proto3,enum=lumenvox.api.InteractionType" json:"type,omitempty"`
	// Interaction SubType
	SubType InteractionSubType `protobuf:"varint,21,opt,name=sub_type,json=subType,proto3,enum=lumenvox.api.InteractionSubType" json:"sub_type,omitempty"`
	// Notes
	Notes string `protobuf:"bytes,22,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *InteractionDetails) Reset() {
	*x = InteractionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionDetails) ProtoMessage() {}

func (x *InteractionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionDetails.ProtoReflect.Descriptor instead.
func (*InteractionDetails) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{18}
}

func (x *InteractionDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InteractionDetails) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

func (x *InteractionDetails) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *InteractionDetails) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionDetails) GetMainType() InteractionType {
	if x != nil {
		return x.MainType
	}
	return InteractionType_INTERACTION_TYPE_UNSPECIFIED
}

func (x *InteractionDetails) GetStatus() InteractionAnalysisStatus {
	if x != nil {
		return x.Status
	}
	return InteractionAnalysisStatus_INTERACTION_ANALYSIS_STATUS_NO_TRANSCRIPT
}

func (x *InteractionDetails) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *InteractionDetails) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *InteractionDetails) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *InteractionDetails) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *InteractionDetails) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *InteractionDetails) GetTranscriptText() string {
	if x != nil {
		return x.TranscriptText
	}
	return ""
}

func (x *InteractionDetails) GetTranscriptSemantic() string {
	if x != nil {
		return x.TranscriptSemantic
	}
	return ""
}

func (x *InteractionDetails) GetOriginalResult() *InteractionResultSet {
	if x != nil {
		return x.OriginalResult
	}
	return nil
}

func (x *InteractionDetails) GetTunedResult() *InteractionResultSet {
	if x != nil {
		return x.TunedResult
	}
	return nil
}

func (x *InteractionDetails) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *InteractionDetails) GetHtmlError() string {
	if x != nil {
		return x.HtmlError
	}
	return ""
}

func (x *InteractionDetails) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_INTERACTION_TYPE_UNSPECIFIED
}

func (x *InteractionDetails) GetSubType() InteractionSubType {
	if x != nil {
		return x.SubType
	}
	return InteractionSubType_INTERACTION_SUB_TYPE_UNSPECIFIED
}

func (x *InteractionDetails) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Describes an interaction result with current settings and grammars
type InteractionResultSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction settings
	Settings *InteractionSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	// Returned text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Returned semantic
	Semantic string `protobuf:"bytes,3,opt,name=semantic,proto3" json:"semantic,omitempty"`
	// Confidence
	Score uint32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	// Grammars used
	GrammarHash []string `protobuf:"bytes,5,rep,name=grammar_hash,json=grammarHash,proto3" json:"grammar_hash,omitempty"`
	// Ssmls used
	SsmlHash []string `protobuf:"bytes,6,rep,name=ssml_hash,json=ssmlHash,proto3" json:"ssml_hash,omitempty"`
	// Interaction result
	InteractionResult *Result `protobuf:"bytes,7,opt,name=interaction_result,json=interactionResult,proto3" json:"interaction_result,omitempty"`
	// Decode time
	DecodeTime uint32 `protobuf:"varint,8,opt,name=decode_time,json=decodeTime,proto3" json:"decode_time,omitempty"`
	// Confidence Threshold
	ConfidenceThreshold float32 `protobuf:"fixed32,9,opt,name=confidence_threshold,json=confidenceThreshold,proto3" json:"confidence_threshold,omitempty"`
	// Interaction Request
	InteractionRequest string `protobuf:"bytes,10,opt,name=interaction_request,json=interactionRequest,proto3" json:"interaction_request,omitempty"`
	// Final status of the interaction
	FinalResultStatus FinalResultStatus `protobuf:"varint,11,opt,name=final_result_status,json=finalResultStatus,proto3,enum=lumenvox.api.FinalResultStatus" json:"final_result_status,omitempty"`
	// Interaction Events
	LogEvents []*LogEvent `protobuf:"bytes,12,rep,name=log_events,json=logEvents,proto3" json:"log_events,omitempty"`
	// Optional phrase lists for transcription interaction
	Phrases []*TranscriptionPhraseList `protobuf:"bytes,13,rep,name=phrases,proto3" json:"phrases,omitempty"`
	// Final result status text
	FinalResultStatusText string `protobuf:"bytes,14,opt,name=final_result_status_text,json=finalResultStatusText,proto3" json:"final_result_status_text,omitempty"`
	// Session settings
	SessionSettings *SessionSettings `protobuf:"bytes,15,opt,name=session_settings,json=sessionSettings,proto3" json:"session_settings,omitempty"`
	// Phrases used
	PhrasesHash []string `protobuf:"bytes,16,rep,name=phrases_hash,json=phrasesHash,proto3" json:"phrases_hash,omitempty"`
	// Archive metadata
	ArchiveMetadata []byte `protobuf:"bytes,17,opt,name=archive_metadata,json=archiveMetadata,proto3" json:"archive_metadata,omitempty"`
}

func (x *InteractionResultSet) Reset() {
	*x = InteractionResultSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResultSet) ProtoMessage() {}

func (x *InteractionResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResultSet.ProtoReflect.Descriptor instead.
func (*InteractionResultSet) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{19}
}

func (x *InteractionResultSet) GetSettings() *InteractionSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *InteractionResultSet) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InteractionResultSet) GetSemantic() string {
	if x != nil {
		return x.Semantic
	}
	return ""
}

func (x *InteractionResultSet) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *InteractionResultSet) GetGrammarHash() []string {
	if x != nil {
		return x.GrammarHash
	}
	return nil
}

func (x *InteractionResultSet) GetSsmlHash() []string {
	if x != nil {
		return x.SsmlHash
	}
	return nil
}

func (x *InteractionResultSet) GetInteractionResult() *Result {
	if x != nil {
		return x.InteractionResult
	}
	return nil
}

func (x *InteractionResultSet) GetDecodeTime() uint32 {
	if x != nil {
		return x.DecodeTime
	}
	return 0
}

func (x *InteractionResultSet) GetConfidenceThreshold() float32 {
	if x != nil {
		return x.ConfidenceThreshold
	}
	return 0
}

func (x *InteractionResultSet) GetInteractionRequest() string {
	if x != nil {
		return x.InteractionRequest
	}
	return ""
}

func (x *InteractionResultSet) GetFinalResultStatus() FinalResultStatus {
	if x != nil {
		return x.FinalResultStatus
	}
	return FinalResultStatus_FINAL_RESULT_STATUS_UNSPECIFIED
}

func (x *InteractionResultSet) GetLogEvents() []*LogEvent {
	if x != nil {
		return x.LogEvents
	}
	return nil
}

func (x *InteractionResultSet) GetPhrases() []*TranscriptionPhraseList {
	if x != nil {
		return x.Phrases
	}
	return nil
}

func (x *InteractionResultSet) GetFinalResultStatusText() string {
	if x != nil {
		return x.FinalResultStatusText
	}
	return ""
}

func (x *InteractionResultSet) GetSessionSettings() *SessionSettings {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

func (x *InteractionResultSet) GetPhrasesHash() []string {
	if x != nil {
		return x.PhrasesHash
	}
	return nil
}

func (x *InteractionResultSet) GetArchiveMetadata() []byte {
	if x != nil {
		return x.ArchiveMetadata
	}
	return nil
}

// Update asr transcription message
type InteractionAnalysisUpdateTranscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for interaction
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// UUID of analysis set
	AnalysisSetId string `protobuf:"bytes,2,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
	// New transcription value
	TranscriptText string `protobuf:"bytes,3,opt,name=transcript_text,json=transcriptText,proto3" json:"transcript_text,omitempty"`
	// New transcription semantic interpretation
	TranscriptSi string `protobuf:"bytes,4,opt,name=transcript_si,json=transcriptSi,proto3" json:"transcript_si,omitempty"`
	// Notes
	Notes string `protobuf:"bytes,5,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *InteractionAnalysisUpdateTranscription) Reset() {
	*x = InteractionAnalysisUpdateTranscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionAnalysisUpdateTranscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionAnalysisUpdateTranscription) ProtoMessage() {}

func (x *InteractionAnalysisUpdateTranscription) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionAnalysisUpdateTranscription.ProtoReflect.Descriptor instead.
func (*InteractionAnalysisUpdateTranscription) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{20}
}

func (x *InteractionAnalysisUpdateTranscription) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionAnalysisUpdateTranscription) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

func (x *InteractionAnalysisUpdateTranscription) GetTranscriptText() string {
	if x != nil {
		return x.TranscriptText
	}
	return ""
}

func (x *InteractionAnalysisUpdateTranscription) GetTranscriptSi() string {
	if x != nil {
		return x.TranscriptSi
	}
	return ""
}

func (x *InteractionAnalysisUpdateTranscription) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

// Describes an analysis set
type AnalysisSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID for the current analysis set
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
	// Name or description for the analysis set
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Creation timestamp
	CreatedDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	// Interaction filter definition
	FilterJson string `protobuf:"bytes,5,opt,name=filter_json,json=filterJson,proto3" json:"filter_json,omitempty"`
	// Number of sessions included in the analysis set
	NumSessions uint32 `protobuf:"varint,6,opt,name=num_sessions,json=numSessions,proto3" json:"num_sessions,omitempty"`
	// Number of interactions included in the analysis set
	NumInteractions uint32 `protobuf:"varint,7,opt,name=num_interactions,json=numInteractions,proto3" json:"num_interactions,omitempty"`
	// Current status for the analysis set creation as json
	JobStatusJson string `protobuf:"bytes,8,opt,name=job_status_json,json=jobStatusJson,proto3" json:"job_status_json,omitempty"`
	// Short description of the filter used
	FilterSummary string `protobuf:"bytes,9,opt,name=filter_summary,json=filterSummary,proto3" json:"filter_summary,omitempty"`
	// Current status for the analysis set
	AnalysisSetStatus AnalysisSet_AnalysisSetStatus `protobuf:"varint,10,opt,name=analysis_set_status,json=analysisSetStatus,proto3,enum=lumenvox.api.AnalysisSet_AnalysisSetStatus" json:"analysis_set_status,omitempty"`
	// Current settings used
	SettingsJson string `protobuf:"bytes,11,opt,name=settings_json,json=settingsJson,proto3" json:"settings_json,omitempty"`
	// Analysis set description as a json string
	AnalysisJson string `protobuf:"bytes,12,opt,name=analysis_json,json=analysisJson,proto3" json:"analysis_json,omitempty"`
	// Analysis set properties
	Properties *AnalysisSetProperties `protobuf:"bytes,13,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (x *AnalysisSet) Reset() {
	*x = AnalysisSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSet) ProtoMessage() {}

func (x *AnalysisSet) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSet.ProtoReflect.Descriptor instead.
func (*AnalysisSet) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{21}
}

func (x *AnalysisSet) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

func (x *AnalysisSet) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnalysisSet) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *AnalysisSet) GetFilterJson() string {
	if x != nil {
		return x.FilterJson
	}
	return ""
}

func (x *AnalysisSet) GetNumSessions() uint32 {
	if x != nil {
		return x.NumSessions
	}
	return 0
}

func (x *AnalysisSet) GetNumInteractions() uint32 {
	if x != nil {
		return x.NumInteractions
	}
	return 0
}

func (x *AnalysisSet) GetJobStatusJson() string {
	if x != nil {
		return x.JobStatusJson
	}
	return ""
}

func (x *AnalysisSet) GetFilterSummary() string {
	if x != nil {
		return x.FilterSummary
	}
	return ""
}

func (x *AnalysisSet) GetAnalysisSetStatus() AnalysisSet_AnalysisSetStatus {
	if x != nil {
		return x.AnalysisSetStatus
	}
	return AnalysisSet_ANALYSIS_SET_STATUS_UNINITIALIZED
}

func (x *AnalysisSet) GetSettingsJson() string {
	if x != nil {
		return x.SettingsJson
	}
	return ""
}

func (x *AnalysisSet) GetAnalysisJson() string {
	if x != nil {
		return x.AnalysisJson
	}
	return ""
}

func (x *AnalysisSet) GetProperties() *AnalysisSetProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Stores the analysis set properties
type AnalysisSetProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag to combine Human Business and Human Residence for CPA results
	CombineBusinessAndResidence bool `protobuf:"varint,1,opt,name=combine_business_and_residence,json=combineBusinessAndResidence,proto3" json:"combine_business_and_residence,omitempty"`
}

func (x *AnalysisSetProperties) Reset() {
	*x = AnalysisSetProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetProperties) ProtoMessage() {}

func (x *AnalysisSetProperties) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetProperties.ProtoReflect.Descriptor instead.
func (*AnalysisSetProperties) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{22}
}

func (x *AnalysisSetProperties) GetCombineBusinessAndResidence() bool {
	if x != nil {
		return x.CombineBusinessAndResidence
	}
	return false
}

// Defines a filter for analysis set creation
type AnalysisSetFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start timestamp for the interval
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// End timestamp for the interval
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	// Interaction type filter
	InteractionType InteractionType `protobuf:"varint,4,opt,name=interaction_type,json=interactionType,proto3,enum=lumenvox.api.InteractionType" json:"interaction_type,omitempty"`
	// Interaction SubType
	SubType InteractionSubType `protobuf:"varint,5,opt,name=sub_type,json=subType,proto3,enum=lumenvox.api.InteractionSubType" json:"sub_type,omitempty"`
	// Interaction status filter
	FinalResultStatus FinalResultStatus `protobuf:"varint,6,opt,name=final_result_status,json=finalResultStatus,proto3,enum=lumenvox.api.FinalResultStatus" json:"final_result_status,omitempty"`
	// Interaction language filter
	LanguageString string `protobuf:"bytes,7,opt,name=language_string,json=languageString,proto3" json:"language_string,omitempty"`
	// Specific grammars filter
	GrammarHash string `protobuf:"bytes,8,opt,name=grammar_hash,json=grammarHash,proto3" json:"grammar_hash,omitempty"`
	// Analysis set properties
	Properties *AnalysisSetProperties `protobuf:"bytes,9,opt,name=properties,proto3" json:"properties,omitempty"`
	// Flag for enhanced transcriptions
	EnhancedTranscription bool `protobuf:"varint,10,opt,name=enhanced_transcription,json=enhancedTranscription,proto3" json:"enhanced_transcription,omitempty"`
}

func (x *AnalysisSetFilterOptions) Reset() {
	*x = AnalysisSetFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalysisSetFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisSetFilterOptions) ProtoMessage() {}

func (x *AnalysisSetFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisSetFilterOptions.ProtoReflect.Descriptor instead.
func (*AnalysisSetFilterOptions) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{23}
}

func (x *AnalysisSetFilterOptions) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *AnalysisSetFilterOptions) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

func (x *AnalysisSetFilterOptions) GetInteractionType() InteractionType {
	if x != nil {
		return x.InteractionType
	}
	return InteractionType_INTERACTION_TYPE_UNSPECIFIED
}

func (x *AnalysisSetFilterOptions) GetSubType() InteractionSubType {
	if x != nil {
		return x.SubType
	}
	return InteractionSubType_INTERACTION_SUB_TYPE_UNSPECIFIED
}

func (x *AnalysisSetFilterOptions) GetFinalResultStatus() FinalResultStatus {
	if x != nil {
		return x.FinalResultStatus
	}
	return FinalResultStatus_FINAL_RESULT_STATUS_UNSPECIFIED
}

func (x *AnalysisSetFilterOptions) GetLanguageString() string {
	if x != nil {
		return x.LanguageString
	}
	return ""
}

func (x *AnalysisSetFilterOptions) GetGrammarHash() string {
	if x != nil {
		return x.GrammarHash
	}
	return ""
}

func (x *AnalysisSetFilterOptions) GetProperties() *AnalysisSetProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AnalysisSetFilterOptions) GetEnhancedTranscription() bool {
	if x != nil {
		return x.EnhancedTranscription
	}
	return false
}

// Describes a request for storage identifier
type RetrieveStorageIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data type to be retrieved
	Type DataType `protobuf:"varint,1,opt,name=type,proto3,enum=lumenvox.api.DataType" json:"type,omitempty"`
	// Hash of the data
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// Session identifier
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Audio channel
	ChannelId int32 `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *RetrieveStorageIdRequest) Reset() {
	*x = RetrieveStorageIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveStorageIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveStorageIdRequest) ProtoMessage() {}

func (x *RetrieveStorageIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveStorageIdRequest.ProtoReflect.Descriptor instead.
func (*RetrieveStorageIdRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{24}
}

func (x *RetrieveStorageIdRequest) GetType() DataType {
	if x != nil {
		return x.Type
	}
	return DataType_DATA_TYPE_UNDEFINED
}

func (x *RetrieveStorageIdRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *RetrieveStorageIdRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *RetrieveStorageIdRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// Returns the binary storage UUID
type RetrieveStorageIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary storage UUID
	StorageId string `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
}

func (x *RetrieveStorageIdResponse) Reset() {
	*x = RetrieveStorageIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveStorageIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveStorageIdResponse) ProtoMessage() {}

func (x *RetrieveStorageIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveStorageIdResponse.ProtoReflect.Descriptor instead.
func (*RetrieveStorageIdResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{25}
}

func (x *RetrieveStorageIdResponse) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

// Request for binary data retrieval
type RetrieveArchiveDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage identifier for the binary data
	StorageId string `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
}

func (x *RetrieveArchiveDataRequest) Reset() {
	*x = RetrieveArchiveDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveArchiveDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveArchiveDataRequest) ProtoMessage() {}

func (x *RetrieveArchiveDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveArchiveDataRequest.ProtoReflect.Descriptor instead.
func (*RetrieveArchiveDataRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{26}
}

func (x *RetrieveArchiveDataRequest) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

// Returns the binary data
type RetrieveArchiveDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary data
	ArchiveEntry *ArchiveEntry `protobuf:"bytes,1,opt,name=archive_entry,json=archiveEntry,proto3" json:"archive_entry,omitempty"`
}

func (x *RetrieveArchiveDataResponse) Reset() {
	*x = RetrieveArchiveDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveArchiveDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveArchiveDataResponse) ProtoMessage() {}

func (x *RetrieveArchiveDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveArchiveDataResponse.ProtoReflect.Descriptor instead.
func (*RetrieveArchiveDataResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{27}
}

func (x *RetrieveArchiveDataResponse) GetArchiveEntry() *ArchiveEntry {
	if x != nil {
		return x.ArchiveEntry
	}
	return nil
}

// Describes the binary data entry structure
type ArchiveEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary storage identifier
	StorageId string `protobuf:"bytes,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	// Deployment identifier
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Associated tag for the binary data
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// Binary data
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Type of the binary data
	DataType DataType `protobuf:"varint,5,opt,name=data_type,json=dataType,proto3,enum=lumenvox.api.DataType" json:"data_type,omitempty"`
}

func (x *ArchiveEntry) Reset() {
	*x = ArchiveEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveEntry) ProtoMessage() {}

func (x *ArchiveEntry) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveEntry.ProtoReflect.Descriptor instead.
func (*ArchiveEntry) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{28}
}

func (x *ArchiveEntry) GetStorageId() string {
	if x != nil {
		return x.StorageId
	}
	return ""
}

func (x *ArchiveEntry) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ArchiveEntry) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *ArchiveEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ArchiveEntry) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNDEFINED
}

// Request for ThirdPartyLicenses
type GetThirdPartyLicenseAttributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetThirdPartyLicenseAttributionRequest) Reset() {
	*x = GetThirdPartyLicenseAttributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThirdPartyLicenseAttributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyLicenseAttributionRequest) ProtoMessage() {}

func (x *GetThirdPartyLicenseAttributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyLicenseAttributionRequest.ProtoReflect.Descriptor instead.
func (*GetThirdPartyLicenseAttributionRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{29}
}

// Response for ThirdPartyLicenses request
type GetThirdPartyLicenseAttributionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text for ThirdPartyLicense description
	ThirdPartyLicenses string `protobuf:"bytes,1,opt,name=third_party_licenses,json=thirdPartyLicenses,proto3" json:"third_party_licenses,omitempty"`
}

func (x *GetThirdPartyLicenseAttributionResponse) Reset() {
	*x = GetThirdPartyLicenseAttributionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThirdPartyLicenseAttributionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThirdPartyLicenseAttributionResponse) ProtoMessage() {}

func (x *GetThirdPartyLicenseAttributionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThirdPartyLicenseAttributionResponse.ProtoReflect.Descriptor instead.
func (*GetThirdPartyLicenseAttributionResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{30}
}

func (x *GetThirdPartyLicenseAttributionResponse) GetThirdPartyLicenses() string {
	if x != nil {
		return x.ThirdPartyLicenses
	}
	return ""
}

// Report request for current transaction usages
type UsageReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional component filter (all components returned if not specified)
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
}

func (x *UsageReportRequest) Reset() {
	*x = UsageReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReportRequest) ProtoMessage() {}

func (x *UsageReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReportRequest.ProtoReflect.Descriptor instead.
func (*UsageReportRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{31}
}

func (x *UsageReportRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

// Returns usage report
type UsageReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// milliseconds of time (duration) of session/deployment
	SessionMs uint32 `protobuf:"varint,3,opt,name=session_ms,json=sessionMs,proto3" json:"session_ms,omitempty"`
	// milliseconds of audio streamed into session/deployment.
	SessionAudioMs uint32 `protobuf:"varint,4,opt,name=session_audio_ms,json=sessionAudioMs,proto3" json:"session_audio_ms,omitempty"`
	// map of license usage metadata aggregated for single session.
	LicenseUsage map[string]*ComponentLicenseUsage `protobuf:"bytes,5,rep,name=license_usage,json=licenseUsage,proto3" json:"license_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UsageReportResponse) Reset() {
	*x = UsageReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageReportResponse) ProtoMessage() {}

func (x *UsageReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageReportResponse.ProtoReflect.Descriptor instead.
func (*UsageReportResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{32}
}

func (x *UsageReportResponse) GetSessionMs() uint32 {
	if x != nil {
		return x.SessionMs
	}
	return 0
}

func (x *UsageReportResponse) GetSessionAudioMs() uint32 {
	if x != nil {
		return x.SessionAudioMs
	}
	return 0
}

func (x *UsageReportResponse) GetLicenseUsage() map[string]*ComponentLicenseUsage {
	if x != nil {
		return x.LicenseUsage
	}
	return nil
}

// ComponentLicenseUsage
//
// Describes component for license usage
type ComponentLicenseUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of operations for this component
	UsageCount uint32 `protobuf:"varint,1,opt,name=usage_count,json=usageCount,proto3" json:"usage_count,omitempty"`
	// milliseconds used for this component
	UsageMs uint32 `protobuf:"varint,2,opt,name=usage_ms,json=usageMs,proto3" json:"usage_ms,omitempty"`
}

func (x *ComponentLicenseUsage) Reset() {
	*x = ComponentLicenseUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentLicenseUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentLicenseUsage) ProtoMessage() {}

func (x *ComponentLicenseUsage) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentLicenseUsage.ProtoReflect.Descriptor instead.
func (*ComponentLicenseUsage) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{33}
}

func (x *ComponentLicenseUsage) GetUsageCount() uint32 {
	if x != nil {
		return x.UsageCount
	}
	return 0
}

func (x *ComponentLicenseUsage) GetUsageMs() uint32 {
	if x != nil {
		return x.UsageMs
	}
	return 0
}

// UsageSnapshotRequest
//
// Report request for snapshot transaction usages
type UsageSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional component filter (all components returned if not specified)
	Component string `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Starting timestamp for filter
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Ending timestamp for filter
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *UsageSnapshotRequest) Reset() {
	*x = UsageSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageSnapshotRequest) ProtoMessage() {}

func (x *UsageSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UsageSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{34}
}

func (x *UsageSnapshotRequest) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

func (x *UsageSnapshotRequest) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *UsageSnapshotRequest) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

// Response for snapshot usage
type UsageSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of usage snapshot report information, one element per snapshot
	// Note that each snapshot may contain multiple ComponentData entries
	SnapshotData []*SnapshotData `protobuf:"bytes,1,rep,name=snapshot_data,json=snapshotData,proto3" json:"snapshot_data,omitempty"`
}

func (x *UsageSnapshotResponse) Reset() {
	*x = UsageSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageSnapshotResponse) ProtoMessage() {}

func (x *UsageSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageSnapshotResponse.ProtoReflect.Descriptor instead.
func (*UsageSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{35}
}

func (x *UsageSnapshotResponse) GetSnapshotData() []*SnapshotData {
	if x != nil {
		return x.SnapshotData
	}
	return nil
}

// Describes the snapshot data structure
type SnapshotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment ID
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Snapshot UUID (primary key for snapshot database table)
	SnapshotUuid string `protobuf:"bytes,2,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"`
	// Snapshot created (unix timestamp)
	CreatedDate int64 `protobuf:"varint,3,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`
	// Usage report snapshot generated at created_date
	// Array of usage report information, one element per component
	ComponentLicenseUsage []*ComponentLicenseUsage `protobuf:"bytes,4,rep,name=component_license_usage,json=componentLicenseUsage,proto3" json:"component_license_usage,omitempty"`
}

func (x *SnapshotData) Reset() {
	*x = SnapshotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotData) ProtoMessage() {}

func (x *SnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotData.ProtoReflect.Descriptor instead.
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{36}
}

func (x *SnapshotData) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SnapshotData) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (x *SnapshotData) GetCreatedDate() int64 {
	if x != nil {
		return x.CreatedDate
	}
	return 0
}

func (x *SnapshotData) GetComponentLicenseUsage() []*ComponentLicenseUsage {
	if x != nil {
		return x.ComponentLicenseUsage
	}
	return nil
}

// LicenseStatusReportResponsePushRequest contains information from lumenvox
// license cloud services which are then sent to license service for validation
type LicenseStatusReportResponsePushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique license status id
	LicenseStatusId string `protobuf:"bytes,1,opt,name=license_status_id,json=licenseStatusId,proto3" json:"license_status_id,omitempty"`
	// license status response retrieved from lumenvox cloud license server
	LicenseStatusReportResponseJson string `protobuf:"bytes,2,opt,name=license_status_report_response_json,json=licenseStatusReportResponseJson,proto3" json:"license_status_report_response_json,omitempty"`
}

func (x *LicenseStatusReportResponsePushRequest) Reset() {
	*x = LicenseStatusReportResponsePushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusReportResponsePushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusReportResponsePushRequest) ProtoMessage() {}

func (x *LicenseStatusReportResponsePushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusReportResponsePushRequest.ProtoReflect.Descriptor instead.
func (*LicenseStatusReportResponsePushRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{37}
}

func (x *LicenseStatusReportResponsePushRequest) GetLicenseStatusId() string {
	if x != nil {
		return x.LicenseStatusId
	}
	return ""
}

func (x *LicenseStatusReportResponsePushRequest) GetLicenseStatusReportResponseJson() string {
	if x != nil {
		return x.LicenseStatusReportResponseJson
	}
	return ""
}

// LicenseStatusReportResponsePushResponse contains status determining if
// request was successfully processed
type LicenseStatusReportResponsePushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response status
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LicenseStatusReportResponsePushResponse) Reset() {
	*x = LicenseStatusReportResponsePushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusReportResponsePushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusReportResponsePushResponse) ProtoMessage() {}

func (x *LicenseStatusReportResponsePushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusReportResponsePushResponse.ProtoReflect.Descriptor instead.
func (*LicenseStatusReportResponsePushResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{38}
}

func (x *LicenseStatusReportResponsePushResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// LicenseStatusReportPullRequest sent to request license report status info
type LicenseStatusReportPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LicenseStatusReportPullRequest) Reset() {
	*x = LicenseStatusReportPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusReportPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusReportPullRequest) ProtoMessage() {}

func (x *LicenseStatusReportPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusReportPullRequest.ProtoReflect.Descriptor instead.
func (*LicenseStatusReportPullRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{39}
}

// LicenseStatusReportPullResponse contains information provided by license
// service with corresponding id which will be matched later when receiving
// response from lumenvox cloud licensing server
type LicenseStatusReportPullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique license status id
	LicenseStatusId string `protobuf:"bytes,1,opt,name=license_status_id,json=licenseStatusId,proto3" json:"license_status_id,omitempty"`
	// license status report received from license service
	LicenseStatusReportJson string `protobuf:"bytes,2,opt,name=license_status_report_json,json=licenseStatusReportJson,proto3" json:"license_status_report_json,omitempty"`
	// response status
	Status *status.Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *LicenseStatusReportPullResponse) Reset() {
	*x = LicenseStatusReportPullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseStatusReportPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseStatusReportPullResponse) ProtoMessage() {}

func (x *LicenseStatusReportPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseStatusReportPullResponse.ProtoReflect.Descriptor instead.
func (*LicenseStatusReportPullResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{40}
}

func (x *LicenseStatusReportPullResponse) GetLicenseStatusId() string {
	if x != nil {
		return x.LicenseStatusId
	}
	return ""
}

func (x *LicenseStatusReportPullResponse) GetLicenseStatusReportJson() string {
	if x != nil {
		return x.LicenseStatusReportJson
	}
	return ""
}

func (x *LicenseStatusReportPullResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Describes an Analysis Set export request
type ExportAnalysisSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the analysis set selected for export
	AnalysisSetId string `protobuf:"bytes,1,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *ExportAnalysisSetRequest) Reset() {
	*x = ExportAnalysisSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportAnalysisSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportAnalysisSetRequest) ProtoMessage() {}

func (x *ExportAnalysisSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportAnalysisSetRequest.ProtoReflect.Descriptor instead.
func (*ExportAnalysisSetRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{41}
}

func (x *ExportAnalysisSetRequest) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Describes an Analysis Set export response
type ExportAnalysisSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The export status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// UUID of the analysis set selected for export
	AnalysisSetId string `protobuf:"bytes,2,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
	// Description of the exported analysis set
	AnalysisSetDescription string `protobuf:"bytes,3,opt,name=analysis_set_description,json=analysisSetDescription,proto3" json:"analysis_set_description,omitempty"`
	// archived analysis set data
	ArchivedData []byte `protobuf:"bytes,4,opt,name=archived_data,json=archivedData,proto3" json:"archived_data,omitempty"`
}

func (x *ExportAnalysisSetResponse) Reset() {
	*x = ExportAnalysisSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportAnalysisSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportAnalysisSetResponse) ProtoMessage() {}

func (x *ExportAnalysisSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportAnalysisSetResponse.ProtoReflect.Descriptor instead.
func (*ExportAnalysisSetResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{42}
}

func (x *ExportAnalysisSetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ExportAnalysisSetResponse) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

func (x *ExportAnalysisSetResponse) GetAnalysisSetDescription() string {
	if x != nil {
		return x.AnalysisSetDescription
	}
	return ""
}

func (x *ExportAnalysisSetResponse) GetArchivedData() []byte {
	if x != nil {
		return x.ArchivedData
	}
	return nil
}

// Describes an Analysis Set import request
type ImportAnalysisSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description for the imported analysis set
	AnalysisSetDescription string `protobuf:"bytes,1,opt,name=analysis_set_description,json=analysisSetDescription,proto3" json:"analysis_set_description,omitempty"`
	// archived analysis set data
	ArchivedData []byte `protobuf:"bytes,2,opt,name=archived_data,json=archivedData,proto3" json:"archived_data,omitempty"`
}

func (x *ImportAnalysisSetRequest) Reset() {
	*x = ImportAnalysisSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAnalysisSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAnalysisSetRequest) ProtoMessage() {}

func (x *ImportAnalysisSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAnalysisSetRequest.ProtoReflect.Descriptor instead.
func (*ImportAnalysisSetRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{43}
}

func (x *ImportAnalysisSetRequest) GetAnalysisSetDescription() string {
	if x != nil {
		return x.AnalysisSetDescription
	}
	return ""
}

func (x *ImportAnalysisSetRequest) GetArchivedData() []byte {
	if x != nil {
		return x.ArchivedData
	}
	return nil
}

// Describes an Analysis Set import response
type ImportAnalysisSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The import status.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// UUID of the imported analysis set
	AnalysisSetId string `protobuf:"bytes,2,opt,name=analysis_set_id,json=analysisSetId,proto3" json:"analysis_set_id,omitempty"`
}

func (x *ImportAnalysisSetResponse) Reset() {
	*x = ImportAnalysisSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportAnalysisSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportAnalysisSetResponse) ProtoMessage() {}

func (x *ImportAnalysisSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportAnalysisSetResponse.ProtoReflect.Descriptor instead.
func (*ImportAnalysisSetResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{44}
}

func (x *ImportAnalysisSetResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ImportAnalysisSetResponse) GetAnalysisSetId() string {
	if x != nil {
		return x.AnalysisSetId
	}
	return ""
}

// Describes the diagnostic request message
type DiagnosticsCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Diagnostic type to be executed
	Type DiagnosticsType `protobuf:"varint,1,opt,name=type,proto3,enum=lumenvox.api.DiagnosticsType" json:"type,omitempty"`
}

func (x *DiagnosticsCheckRequest) Reset() {
	*x = DiagnosticsCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticsCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsCheckRequest) ProtoMessage() {}

func (x *DiagnosticsCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsCheckRequest.ProtoReflect.Descriptor instead.
func (*DiagnosticsCheckRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{45}
}

func (x *DiagnosticsCheckRequest) GetType() DiagnosticsType {
	if x != nil {
		return x.Type
	}
	return DiagnosticsType_Undefined
}

// Describes the diagnostic response message
type DiagnosticsCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error message in case of errors or empty sting if the diagnostic check was
	// successful
	ErrorMessage string `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// The version number of the resource being checked, if appropriate
	VersionString string `protobuf:"bytes,2,opt,name=versionString,proto3" json:"versionString,omitempty"`
	// Number of milliseconds needed to obtain a diagnostic response
	LatencyMs int32 `protobuf:"varint,3,opt,name=latencyMs,proto3" json:"latencyMs,omitempty"`
}

func (x *DiagnosticsCheckResponse) Reset() {
	*x = DiagnosticsCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticsCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticsCheckResponse) ProtoMessage() {}

func (x *DiagnosticsCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticsCheckResponse.ProtoReflect.Descriptor instead.
func (*DiagnosticsCheckResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{46}
}

func (x *DiagnosticsCheckResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DiagnosticsCheckResponse) GetVersionString() string {
	if x != nil {
		return x.VersionString
	}
	return ""
}

func (x *DiagnosticsCheckResponse) GetLatencyMs() int32 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

// Describes the evaluate request
type EvaluateTranscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// asr engine result
	MachineTranscribedText string `protobuf:"bytes,1,opt,name=machine_transcribed_text,json=machineTranscribedText,proto3" json:"machine_transcribed_text,omitempty"`
	// human transcription
	HumanTranscribedText string `protobuf:"bytes,2,opt,name=human_transcribed_text,json=humanTranscribedText,proto3" json:"human_transcribed_text,omitempty"`
}

func (x *EvaluateTranscriptionRequest) Reset() {
	*x = EvaluateTranscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateTranscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateTranscriptionRequest) ProtoMessage() {}

func (x *EvaluateTranscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateTranscriptionRequest.ProtoReflect.Descriptor instead.
func (*EvaluateTranscriptionRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{47}
}

func (x *EvaluateTranscriptionRequest) GetMachineTranscribedText() string {
	if x != nil {
		return x.MachineTranscribedText
	}
	return ""
}

func (x *EvaluateTranscriptionRequest) GetHumanTranscribedText() string {
	if x != nil {
		return x.HumanTranscribedText
	}
	return ""
}

// Describes the Evaluate response
type EvaluateTranscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// match score
	Match float32 `protobuf:"fixed32,1,opt,name=match,proto3" json:"match,omitempty"`
	// differences between machine and huma transcriptions
	ErrorText string `protobuf:"bytes,2,opt,name=error_text,json=errorText,proto3" json:"error_text,omitempty"`
	// transcribed text with highlighted differences using html tags
	HtmlText string `protobuf:"bytes,3,opt,name=html_text,json=htmlText,proto3" json:"html_text,omitempty"`
}

func (x *EvaluateTranscriptionResponse) Reset() {
	*x = EvaluateTranscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluateTranscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluateTranscriptionResponse) ProtoMessage() {}

func (x *EvaluateTranscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluateTranscriptionResponse.ProtoReflect.Descriptor instead.
func (*EvaluateTranscriptionResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{48}
}

func (x *EvaluateTranscriptionResponse) GetMatch() float32 {
	if x != nil {
		return x.Match
	}
	return 0
}

func (x *EvaluateTranscriptionResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *EvaluateTranscriptionResponse) GetHtmlText() string {
	if x != nil {
		return x.HtmlText
	}
	return ""
}

// Describes the Regex operation of Post-Processing profile
type RegexOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique index for ordering
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// Regex pattern
	Pattern string `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Replacement string
	Replacement string `protobuf:"bytes,3,opt,name=replacement,proto3" json:"replacement,omitempty"`
	// Optional regex flags
	Flags string `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	// Optional human-readable description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RegexOperation) Reset() {
	*x = RegexOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexOperation) ProtoMessage() {}

func (x *RegexOperation) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexOperation.ProtoReflect.Descriptor instead.
func (*RegexOperation) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{49}
}

func (x *RegexOperation) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RegexOperation) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RegexOperation) GetReplacement() string {
	if x != nil {
		return x.Replacement
	}
	return ""
}

func (x *RegexOperation) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

func (x *RegexOperation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the Post-Processing profile message
type PostProcessingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile (immutable)
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// DeploymentId for which this profile belongs
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Version number of this profile (1 = first)
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Name of this profile
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Array of regex operations
	Operations []*RegexOperation `protobuf:"bytes,5,rep,name=operations,proto3" json:"operations,omitempty"`
	// When this profile was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// When this profile was updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PostProcessingProfile) Reset() {
	*x = PostProcessingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProcessingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProcessingProfile) ProtoMessage() {}

func (x *PostProcessingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProcessingProfile.ProtoReflect.Descriptor instead.
func (*PostProcessingProfile) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{50}
}

func (x *PostProcessingProfile) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *PostProcessingProfile) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *PostProcessingProfile) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PostProcessingProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PostProcessingProfile) GetOperations() []*RegexOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *PostProcessingProfile) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PostProcessingProfile) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Describes Post-Processing profile creation request
type CreatePostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this profile
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Array of regex operations
	Operations []*RegexOperation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *CreatePostProcessingProfileRequest) Reset() {
	*x = CreatePostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostProcessingProfileRequest) ProtoMessage() {}

func (x *CreatePostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*CreatePostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{51}
}

func (x *CreatePostProcessingProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePostProcessingProfileRequest) GetOperations() []*RegexOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Describes Post-Processing profile creation response
type CreatePostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the GUID (UUID) string of the newly created profile
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *CreatePostProcessingProfileResponse) Reset() {
	*x = CreatePostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePostProcessingProfileResponse) ProtoMessage() {}

func (x *CreatePostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*CreatePostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{52}
}

func (x *CreatePostProcessingProfileResponse) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profiles Get request
type GetPostProcessingProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPostProcessingProfilesRequest) Reset() {
	*x = GetPostProcessingProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfilesRequest) ProtoMessage() {}

func (x *GetPostProcessingProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfilesRequest.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfilesRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{53}
}

// Describes Post-Processing profiles Get response
type GetPostProcessingProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*PostProcessingProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *GetPostProcessingProfilesResponse) Reset() {
	*x = GetPostProcessingProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfilesResponse) ProtoMessage() {}

func (x *GetPostProcessingProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfilesResponse.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfilesResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{54}
}

func (x *GetPostProcessingProfilesResponse) GetProfiles() []*PostProcessingProfile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// Describes Post-Processing profile Get request
type GetPostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the GUID (UUID) string of Post-Processing profile
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *GetPostProcessingProfileRequest) Reset() {
	*x = GetPostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfileRequest) ProtoMessage() {}

func (x *GetPostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{55}
}

func (x *GetPostProcessingProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile Get response
type GetPostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains requested Post-Processing profile message
	Profile *PostProcessingProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *GetPostProcessingProfileResponse) Reset() {
	*x = GetPostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfileResponse) ProtoMessage() {}

func (x *GetPostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{56}
}

func (x *GetPostProcessingProfileResponse) GetProfile() *PostProcessingProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Describes Post-Processing profile Update request
type UpdatePostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile which is being updated
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// Specify new list of regex operations
	Operations []*RegexOperation `protobuf:"bytes,2,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *UpdatePostProcessingProfileRequest) Reset() {
	*x = UpdatePostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostProcessingProfileRequest) ProtoMessage() {}

func (x *UpdatePostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdatePostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{57}
}

func (x *UpdatePostProcessingProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *UpdatePostProcessingProfileRequest) GetOperations() []*RegexOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Describes Post-Processing profile Update response
type UpdatePostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains requested Post-Processing profile message
	Profile *PostProcessingProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *UpdatePostProcessingProfileResponse) Reset() {
	*x = UpdatePostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePostProcessingProfileResponse) ProtoMessage() {}

func (x *UpdatePostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*UpdatePostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{58}
}

func (x *UpdatePostProcessingProfileResponse) GetProfile() *PostProcessingProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Describes Post-Processing profile Delete request
type DeletePostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile to delete
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *DeletePostProcessingProfileRequest) Reset() {
	*x = DeletePostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostProcessingProfileRequest) ProtoMessage() {}

func (x *DeletePostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*DeletePostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{59}
}

func (x *DeletePostProcessingProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile Delete response
type DeletePostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of deleted Post-Processing Profile
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *DeletePostProcessingProfileResponse) Reset() {
	*x = DeletePostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostProcessingProfileResponse) ProtoMessage() {}

func (x *DeletePostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*DeletePostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{60}
}

func (x *DeletePostProcessingProfileResponse) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile exporting request
type ExportPostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile to export
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *ExportPostProcessingProfileRequest) Reset() {
	*x = ExportPostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPostProcessingProfileRequest) ProtoMessage() {}

func (x *ExportPostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*ExportPostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{61}
}

func (x *ExportPostProcessingProfileRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile exporting response
type ExportPostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialized profile data
	ExportData *structpb.Struct `protobuf:"bytes,1,opt,name=export_data,json=exportData,proto3" json:"export_data,omitempty"`
}

func (x *ExportPostProcessingProfileResponse) Reset() {
	*x = ExportPostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPostProcessingProfileResponse) ProtoMessage() {}

func (x *ExportPostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*ExportPostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{62}
}

func (x *ExportPostProcessingProfileResponse) GetExportData() *structpb.Struct {
	if x != nil {
		return x.ExportData
	}
	return nil
}

// Describes Post-Processing profile importing request
type ImportPostProcessingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// serialized JSON profile data
	ImportData *structpb.Struct `protobuf:"bytes,1,opt,name=import_data,json=importData,proto3" json:"import_data,omitempty"`
}

func (x *ImportPostProcessingProfileRequest) Reset() {
	*x = ImportPostProcessingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPostProcessingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPostProcessingProfileRequest) ProtoMessage() {}

func (x *ImportPostProcessingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPostProcessingProfileRequest.ProtoReflect.Descriptor instead.
func (*ImportPostProcessingProfileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{63}
}

func (x *ImportPostProcessingProfileRequest) GetImportData() *structpb.Struct {
	if x != nil {
		return x.ImportData
	}
	return nil
}

// Describes Post-Processing profile importing response
type ImportPostProcessingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the imported Post-Processing Profile
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *ImportPostProcessingProfileResponse) Reset() {
	*x = ImportPostProcessingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportPostProcessingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportPostProcessingProfileResponse) ProtoMessage() {}

func (x *ImportPostProcessingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportPostProcessingProfileResponse.ProtoReflect.Descriptor instead.
func (*ImportPostProcessingProfileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{64}
}

func (x *ImportPostProcessingProfileResponse) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile versions history request
type GetPostProcessingProfileHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *GetPostProcessingProfileHistoryRequest) Reset() {
	*x = GetPostProcessingProfileHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfileHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfileHistoryRequest) ProtoMessage() {}

func (x *GetPostProcessingProfileHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfileHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfileHistoryRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{65}
}

func (x *GetPostProcessingProfileHistoryRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

// Describes Post-Processing profile versions history response
type GetPostProcessingProfileHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the Post-Processing Profile (immutable)
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// Array of all versions of the Post-Processing Profile
	Versions []*PostProcessingProfile `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
}

func (x *GetPostProcessingProfileHistoryResponse) Reset() {
	*x = GetPostProcessingProfileHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_reporting_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostProcessingProfileHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostProcessingProfileHistoryResponse) ProtoMessage() {}

func (x *GetPostProcessingProfileHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_reporting_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostProcessingProfileHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetPostProcessingProfileHistoryResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_reporting_proto_rawDescGZIP(), []int{66}
}

func (x *GetPostProcessingProfileHistoryResponse) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *GetPostProcessingProfileHistoryResponse) GetVersions() []*PostProcessingProfile {
	if x != nil {
		return x.Versions
	}
	return nil
}

var File_lumenvox_api_reporting_proto protoreflect.FileDescriptor

var file_lumenvox_api_reporting_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x05, 0x0a, 0x16, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x88, 0x04, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e,
	0x55, 0x4d, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x05, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x06, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x0b, 0x22, 0xff, 0x01, 0x0a,
	0x1c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97,
	0x01, 0x0a, 0x17, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74,
	0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x1b, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x1c, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22,
	0x95, 0x01, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x18,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64,
	0x22, 0x1b, 0x0a, 0x19, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a,
	0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x56,
	0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x22, 0x9f, 0x04, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12,
	0x68, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0xe4, 0x01, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x03, 0x22, 0xa8, 0x02, 0x0a, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x73, 0x6d, 0x6c, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x73, 0x6d, 0x6c, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x65, 0x78, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x1d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x97, 0x01, 0x0a, 0x2d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x66, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x07,
	0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x12, 0x4b, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x45, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x74, 0x6d, 0x6c, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x6d,
	0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xbf, 0x06, 0x0a,
	0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x73, 0x6d, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x73, 0x6d, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdb,
	0x01, 0x0a, 0x26, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x73, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xe7, 0x06, 0x0a,
	0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xa4, 0x02, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x41, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x22, 0x5c, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x48, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x16, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x3a, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x3b,
	0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1b, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x0c,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x32, 0x0a, 0x12, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x73, 0x12, 0x58, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x64, 0x0a, 0x11, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x73, 0x22, 0xba, 0x01, 0x0a,
	0x14, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x15, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x5b, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2,
	0x01, 0x0a, 0x26, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x73, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x27, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x01, 0x0a,
	0x1f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x18, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x19, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x18, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x17, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x71, 0x0a, 0x1d, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9a, 0x01,
	0x0a, 0x0e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x02, 0x0a, 0x15, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x76, 0x0a, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x44, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x22, 0x40, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x23, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x43, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x22,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x23, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x5e, 0x0a, 0x22, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x44, 0x0a, 0x23, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x80, 0x04,
	0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53,
	0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4f,
	0x47, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4f, 0x43, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x49, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06,
	0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x07,
	0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53,
	0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x09, 0x12, 0x32, 0x0a, 0x2e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x41, 0x4c,
	0x59, 0x53, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x0a,
	0x2a, 0xa3, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x4d, 0x4c, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41,
	0x4d, 0x4d, 0x41, 0x52, 0x10, 0x06, 0x2a, 0x54, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x44,
	0x62, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x4d, 0x71, 0x10, 0x05, 0x32, 0xd1, 0x19, 0x0a,
	0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x50, 0x49, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x11,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x1f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x75, 0x73, 0x68, 0x12, 0x34, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x76, 0x0a, 0x17, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x26, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x66, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x61, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x25, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x15, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x30, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x99, 0x01, 0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x42, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02, 0x16, 0x4c, 0x75, 0x6d,
	0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0xca, 0x02, 0x16, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_reporting_proto_rawDescOnce sync.Once
	file_lumenvox_api_reporting_proto_rawDescData = file_lumenvox_api_reporting_proto_rawDesc
)

func file_lumenvox_api_reporting_proto_rawDescGZIP() []byte {
	file_lumenvox_api_reporting_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_reporting_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_reporting_proto_rawDescData)
	})
	return file_lumenvox_api_reporting_proto_rawDescData
}

var file_lumenvox_api_reporting_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_lumenvox_api_reporting_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_lumenvox_api_reporting_proto_goTypes = []interface{}{
	(InteractionAnalysisStatus)(0),                   // 0: lumenvox.api.InteractionAnalysisStatus
	(DataType)(0),                                    // 1: lumenvox.api.DataType
	(DiagnosticsType)(0),                             // 2: lumenvox.api.DiagnosticsType
	(AnalysisSetListRequest_AnalysisSetListOrder)(0), // 3: lumenvox.api.AnalysisSetListRequest.AnalysisSetListOrder
	(InteractionAnalysisListRequest_InteractionAnalysisListOrder)(0), // 4: lumenvox.api.InteractionAnalysisListRequest.InteractionAnalysisListOrder
	(AnalysisSet_AnalysisSetStatus)(0),                               // 5: lumenvox.api.AnalysisSet.AnalysisSetStatus
	(*AnalysisSetListRequest)(nil),                                   // 6: lumenvox.api.AnalysisSetListRequest
	(*AnalysisSetListFilterOptions)(nil),                             // 7: lumenvox.api.AnalysisSetListFilterOptions
	(*AnalysisSetListResponse)(nil),                                  // 8: lumenvox.api.AnalysisSetListResponse
	(*AnalysisSetPreCreateRequest)(nil),                              // 9: lumenvox.api.AnalysisSetPreCreateRequest
	(*AnalysisSetPreCreateResponse)(nil),                             // 10: lumenvox.api.AnalysisSetPreCreateResponse
	(*AnalysisSetCreateRequest)(nil),                                 // 11: lumenvox.api.AnalysisSetCreateRequest
	(*AnalysisSetCreateResponse)(nil),                                // 12: lumenvox.api.AnalysisSetCreateResponse
	(*AnalysisSetDeleteRequest)(nil),                                 // 13: lumenvox.api.AnalysisSetDeleteRequest
	(*AnalysisSetDeleteResponse)(nil),                                // 14: lumenvox.api.AnalysisSetDeleteResponse
	(*AnalysisSetGetRequest)(nil),                                    // 15: lumenvox.api.AnalysisSetGetRequest
	(*AnalysisSetGetResponse)(nil),                                   // 16: lumenvox.api.AnalysisSetGetResponse
	(*InteractionAnalysisListRequest)(nil),                           // 17: lumenvox.api.InteractionAnalysisListRequest
	(*InteractionAnalysisFilterOptions)(nil),                         // 18: lumenvox.api.InteractionAnalysisFilterOptions
	(*InteractionAnalysisListResponse)(nil),                          // 19: lumenvox.api.InteractionAnalysisListResponse
	(*InteractionAnalysisGetRequest)(nil),                            // 20: lumenvox.api.InteractionAnalysisGetRequest
	(*InteractionAnalysisGetResponse)(nil),                           // 21: lumenvox.api.InteractionAnalysisGetResponse
	(*InteractionAnalysisUpdateTranscriptionRequest)(nil),            // 22: lumenvox.api.InteractionAnalysisUpdateTranscriptionRequest
	(*InteractionAnalysisUpdateTranscriptionResponse)(nil),           // 23: lumenvox.api.InteractionAnalysisUpdateTranscriptionResponse
	(*InteractionDetails)(nil),                                       // 24: lumenvox.api.InteractionDetails
	(*InteractionResultSet)(nil),                                     // 25: lumenvox.api.InteractionResultSet
	(*InteractionAnalysisUpdateTranscription)(nil),                   // 26: lumenvox.api.InteractionAnalysisUpdateTranscription
	(*AnalysisSet)(nil),                                              // 27: lumenvox.api.AnalysisSet
	(*AnalysisSetProperties)(nil),                                    // 28: lumenvox.api.AnalysisSetProperties
	(*AnalysisSetFilterOptions)(nil),                                 // 29: lumenvox.api.AnalysisSetFilterOptions
	(*RetrieveStorageIdRequest)(nil),                                 // 30: lumenvox.api.RetrieveStorageIdRequest
	(*RetrieveStorageIdResponse)(nil),                                // 31: lumenvox.api.RetrieveStorageIdResponse
	(*RetrieveArchiveDataRequest)(nil),                               // 32: lumenvox.api.RetrieveArchiveDataRequest
	(*RetrieveArchiveDataResponse)(nil),                              // 33: lumenvox.api.RetrieveArchiveDataResponse
	(*ArchiveEntry)(nil),                                             // 34: lumenvox.api.ArchiveEntry
	(*GetThirdPartyLicenseAttributionRequest)(nil),                   // 35: lumenvox.api.GetThirdPartyLicenseAttributionRequest
	(*GetThirdPartyLicenseAttributionResponse)(nil),                  // 36: lumenvox.api.GetThirdPartyLicenseAttributionResponse
	(*UsageReportRequest)(nil),                                       // 37: lumenvox.api.UsageReportRequest
	(*UsageReportResponse)(nil),                                      // 38: lumenvox.api.UsageReportResponse
	(*ComponentLicenseUsage)(nil),                                    // 39: lumenvox.api.ComponentLicenseUsage
	(*UsageSnapshotRequest)(nil),                                     // 40: lumenvox.api.UsageSnapshotRequest
	(*UsageSnapshotResponse)(nil),                                    // 41: lumenvox.api.UsageSnapshotResponse
	(*SnapshotData)(nil),                                             // 42: lumenvox.api.SnapshotData
	(*LicenseStatusReportResponsePushRequest)(nil),                   // 43: lumenvox.api.LicenseStatusReportResponsePushRequest
	(*LicenseStatusReportResponsePushResponse)(nil),                  // 44: lumenvox.api.LicenseStatusReportResponsePushResponse
	(*LicenseStatusReportPullRequest)(nil),                           // 45: lumenvox.api.LicenseStatusReportPullRequest
	(*LicenseStatusReportPullResponse)(nil),                          // 46: lumenvox.api.LicenseStatusReportPullResponse
	(*ExportAnalysisSetRequest)(nil),                                 // 47: lumenvox.api.ExportAnalysisSetRequest
	(*ExportAnalysisSetResponse)(nil),                                // 48: lumenvox.api.ExportAnalysisSetResponse
	(*ImportAnalysisSetRequest)(nil),                                 // 49: lumenvox.api.ImportAnalysisSetRequest
	(*ImportAnalysisSetResponse)(nil),                                // 50: lumenvox.api.ImportAnalysisSetResponse
	(*DiagnosticsCheckRequest)(nil),                                  // 51: lumenvox.api.DiagnosticsCheckRequest
	(*DiagnosticsCheckResponse)(nil),                                 // 52: lumenvox.api.DiagnosticsCheckResponse
	(*EvaluateTranscriptionRequest)(nil),                             // 53: lumenvox.api.EvaluateTranscriptionRequest
	(*EvaluateTranscriptionResponse)(nil),                            // 54: lumenvox.api.EvaluateTranscriptionResponse
	(*RegexOperation)(nil),                                           // 55: lumenvox.api.RegexOperation
	(*PostProcessingProfile)(nil),                                    // 56: lumenvox.api.PostProcessingProfile
	(*CreatePostProcessingProfileRequest)(nil),                       // 57: lumenvox.api.CreatePostProcessingProfileRequest
	(*CreatePostProcessingProfileResponse)(nil),                      // 58: lumenvox.api.CreatePostProcessingProfileResponse
	(*GetPostProcessingProfilesRequest)(nil),                         // 59: lumenvox.api.GetPostProcessingProfilesRequest
	(*GetPostProcessingProfilesResponse)(nil),                        // 60: lumenvox.api.GetPostProcessingProfilesResponse
	(*GetPostProcessingProfileRequest)(nil),                          // 61: lumenvox.api.GetPostProcessingProfileRequest
	(*GetPostProcessingProfileResponse)(nil),                         // 62: lumenvox.api.GetPostProcessingProfileResponse
	(*UpdatePostProcessingProfileRequest)(nil),                       // 63: lumenvox.api.UpdatePostProcessingProfileRequest
	(*UpdatePostProcessingProfileResponse)(nil),                      // 64: lumenvox.api.UpdatePostProcessingProfileResponse
	(*DeletePostProcessingProfileRequest)(nil),                       // 65: lumenvox.api.DeletePostProcessingProfileRequest
	(*DeletePostProcessingProfileResponse)(nil),                      // 66: lumenvox.api.DeletePostProcessingProfileResponse
	(*ExportPostProcessingProfileRequest)(nil),                       // 67: lumenvox.api.ExportPostProcessingProfileRequest
	(*ExportPostProcessingProfileResponse)(nil),                      // 68: lumenvox.api.ExportPostProcessingProfileResponse
	(*ImportPostProcessingProfileRequest)(nil),                       // 69: lumenvox.api.ImportPostProcessingProfileRequest
	(*ImportPostProcessingProfileResponse)(nil),                      // 70: lumenvox.api.ImportPostProcessingProfileResponse
	(*GetPostProcessingProfileHistoryRequest)(nil),                   // 71: lumenvox.api.GetPostProcessingProfileHistoryRequest
	(*GetPostProcessingProfileHistoryResponse)(nil),                  // 72: lumenvox.api.GetPostProcessingProfileHistoryResponse
	nil,                             // 73: lumenvox.api.UsageReportResponse.LicenseUsageEntry
	(*timestamppb.Timestamp)(nil),   // 74: google.protobuf.Timestamp
	(InteractionType)(0),            // 75: lumenvox.api.InteractionType
	(*status.Status)(nil),           // 76: google.rpc.Status
	(*AudioFormat)(nil),             // 77: lumenvox.api.AudioFormat
	(InteractionSubType)(0),         // 78: lumenvox.api.InteractionSubType
	(*InteractionSettings)(nil),     // 79: lumenvox.api.InteractionSettings
	(*Result)(nil),                  // 80: lumenvox.api.Result
	(FinalResultStatus)(0),          // 81: lumenvox.api.FinalResultStatus
	(*LogEvent)(nil),                // 82: lumenvox.api.LogEvent
	(*TranscriptionPhraseList)(nil), // 83: lumenvox.api.TranscriptionPhraseList
	(*SessionSettings)(nil),         // 84: lumenvox.api.SessionSettings
	(*structpb.Struct)(nil),         // 85: google.protobuf.Struct
}
var file_lumenvox_api_reporting_proto_depIdxs = []int32{
	3,  // 0: lumenvox.api.AnalysisSetListRequest.list_order:type_name -> lumenvox.api.AnalysisSetListRequest.AnalysisSetListOrder
	7,  // 1: lumenvox.api.AnalysisSetListRequest.filter:type_name -> lumenvox.api.AnalysisSetListFilterOptions
	74, // 2: lumenvox.api.AnalysisSetListFilterOptions.created_date_from:type_name -> google.protobuf.Timestamp
	74, // 3: lumenvox.api.AnalysisSetListFilterOptions.created_date_to:type_name -> google.protobuf.Timestamp
	75, // 4: lumenvox.api.AnalysisSetListFilterOptions.type:type_name -> lumenvox.api.InteractionType
	27, // 5: lumenvox.api.AnalysisSetListResponse.analysis_set_list:type_name -> lumenvox.api.AnalysisSet
	29, // 6: lumenvox.api.AnalysisSetPreCreateRequest.filter_options:type_name -> lumenvox.api.AnalysisSetFilterOptions
	29, // 7: lumenvox.api.AnalysisSetCreateRequest.filter_options:type_name -> lumenvox.api.AnalysisSetFilterOptions
	27, // 8: lumenvox.api.AnalysisSetGetResponse.analysis_set:type_name -> lumenvox.api.AnalysisSet
	4,  // 9: lumenvox.api.InteractionAnalysisListRequest.list_order:type_name -> lumenvox.api.InteractionAnalysisListRequest.InteractionAnalysisListOrder
	18, // 10: lumenvox.api.InteractionAnalysisListRequest.filter:type_name -> lumenvox.api.InteractionAnalysisFilterOptions
	74, // 11: lumenvox.api.InteractionAnalysisFilterOptions.start_timestamp:type_name -> google.protobuf.Timestamp
	74, // 12: lumenvox.api.InteractionAnalysisFilterOptions.end_timestamp:type_name -> google.protobuf.Timestamp
	24, // 13: lumenvox.api.InteractionAnalysisListResponse.interaction_list:type_name -> lumenvox.api.InteractionDetails
	24, // 14: lumenvox.api.InteractionAnalysisGetResponse.interaction:type_name -> lumenvox.api.InteractionDetails
	26, // 15: lumenvox.api.InteractionAnalysisUpdateTranscriptionRequest.interactionAnalysis:type_name -> lumenvox.api.InteractionAnalysisUpdateTranscription
	76, // 16: lumenvox.api.InteractionAnalysisUpdateTranscriptionResponse.status:type_name -> google.rpc.Status
	24, // 17: lumenvox.api.InteractionAnalysisUpdateTranscriptionResponse.interaction:type_name -> lumenvox.api.InteractionDetails
	75, // 18: lumenvox.api.InteractionDetails.main_type:type_name -> lumenvox.api.InteractionType
	0,  // 19: lumenvox.api.InteractionDetails.status:type_name -> lumenvox.api.InteractionAnalysisStatus
	77, // 20: lumenvox.api.InteractionDetails.audio_format:type_name -> lumenvox.api.AudioFormat
	74, // 21: lumenvox.api.InteractionDetails.start_timestamp:type_name -> google.protobuf.Timestamp
	74, // 22: lumenvox.api.InteractionDetails.end_timestamp:type_name -> google.protobuf.Timestamp
	25, // 23: lumenvox.api.InteractionDetails.original_result:type_name -> lumenvox.api.InteractionResultSet
	25, // 24: lumenvox.api.InteractionDetails.tuned_result:type_name -> lumenvox.api.InteractionResultSet
	75, // 25: lumenvox.api.InteractionDetails.type:type_name -> lumenvox.api.InteractionType
	78, // 26: lumenvox.api.InteractionDetails.sub_type:type_name -> lumenvox.api.InteractionSubType
	79, // 27: lumenvox.api.InteractionResultSet.settings:type_name -> lumenvox.api.InteractionSettings
	80, // 28: lumenvox.api.InteractionResultSet.interaction_result:type_name -> lumenvox.api.Result
	81, // 29: lumenvox.api.InteractionResultSet.final_result_status:type_name -> lumenvox.api.FinalResultStatus
	82, // 30: lumenvox.api.InteractionResultSet.log_events:type_name -> lumenvox.api.LogEvent
	83, // 31: lumenvox.api.InteractionResultSet.phrases:type_name -> lumenvox.api.TranscriptionPhraseList
	84, // 32: lumenvox.api.InteractionResultSet.session_settings:type_name -> lumenvox.api.SessionSettings
	74, // 33: lumenvox.api.AnalysisSet.created_date:type_name -> google.protobuf.Timestamp
	5,  // 34: lumenvox.api.AnalysisSet.analysis_set_status:type_name -> lumenvox.api.AnalysisSet.AnalysisSetStatus
	28, // 35: lumenvox.api.AnalysisSet.properties:type_name -> lumenvox.api.AnalysisSetProperties
	74, // 36: lumenvox.api.AnalysisSetFilterOptions.start_timestamp:type_name -> google.protobuf.Timestamp
	74, // 37: lumenvox.api.AnalysisSetFilterOptions.end_timestamp:type_name -> google.protobuf.Timestamp
	75, // 38: lumenvox.api.AnalysisSetFilterOptions.interaction_type:type_name -> lumenvox.api.InteractionType
	78, // 39: lumenvox.api.AnalysisSetFilterOptions.sub_type:type_name -> lumenvox.api.InteractionSubType
	81, // 40: lumenvox.api.AnalysisSetFilterOptions.final_result_status:type_name -> lumenvox.api.FinalResultStatus
	28, // 41: lumenvox.api.AnalysisSetFilterOptions.properties:type_name -> lumenvox.api.AnalysisSetProperties
	1,  // 42: lumenvox.api.RetrieveStorageIdRequest.type:type_name -> lumenvox.api.DataType
	34, // 43: lumenvox.api.RetrieveArchiveDataResponse.archive_entry:type_name -> lumenvox.api.ArchiveEntry
	1,  // 44: lumenvox.api.ArchiveEntry.data_type:type_name -> lumenvox.api.DataType
	73, // 45: lumenvox.api.UsageReportResponse.license_usage:type_name -> lumenvox.api.UsageReportResponse.LicenseUsageEntry
	74, // 46: lumenvox.api.UsageSnapshotRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	74, // 47: lumenvox.api.UsageSnapshotRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	42, // 48: lumenvox.api.UsageSnapshotResponse.snapshot_data:type_name -> lumenvox.api.SnapshotData
	39, // 49: lumenvox.api.SnapshotData.component_license_usage:type_name -> lumenvox.api.ComponentLicenseUsage
	76, // 50: lumenvox.api.LicenseStatusReportResponsePushResponse.status:type_name -> google.rpc.Status
	76, // 51: lumenvox.api.LicenseStatusReportPullResponse.status:type_name -> google.rpc.Status
	76, // 52: lumenvox.api.ExportAnalysisSetResponse.status:type_name -> google.rpc.Status
	76, // 53: lumenvox.api.ImportAnalysisSetResponse.status:type_name -> google.rpc.Status
	2,  // 54: lumenvox.api.DiagnosticsCheckRequest.type:type_name -> lumenvox.api.DiagnosticsType
	55, // 55: lumenvox.api.PostProcessingProfile.operations:type_name -> lumenvox.api.RegexOperation
	74, // 56: lumenvox.api.PostProcessingProfile.created_at:type_name -> google.protobuf.Timestamp
	74, // 57: lumenvox.api.PostProcessingProfile.updated_at:type_name -> google.protobuf.Timestamp
	55, // 58: lumenvox.api.CreatePostProcessingProfileRequest.operations:type_name -> lumenvox.api.RegexOperation
	56, // 59: lumenvox.api.GetPostProcessingProfilesResponse.profiles:type_name -> lumenvox.api.PostProcessingProfile
	56, // 60: lumenvox.api.GetPostProcessingProfileResponse.profile:type_name -> lumenvox.api.PostProcessingProfile
	55, // 61: lumenvox.api.UpdatePostProcessingProfileRequest.operations:type_name -> lumenvox.api.RegexOperation
	56, // 62: lumenvox.api.UpdatePostProcessingProfileResponse.profile:type_name -> lumenvox.api.PostProcessingProfile
	85, // 63: lumenvox.api.ExportPostProcessingProfileResponse.export_data:type_name -> google.protobuf.Struct
	85, // 64: lumenvox.api.ImportPostProcessingProfileRequest.import_data:type_name -> google.protobuf.Struct
	56, // 65: lumenvox.api.GetPostProcessingProfileHistoryResponse.versions:type_name -> lumenvox.api.PostProcessingProfile
	39, // 66: lumenvox.api.UsageReportResponse.LicenseUsageEntry.value:type_name -> lumenvox.api.ComponentLicenseUsage
	9,  // 67: lumenvox.api.ReportingAPIService.AnalysisSetPreCreate:input_type -> lumenvox.api.AnalysisSetPreCreateRequest
	11, // 68: lumenvox.api.ReportingAPIService.AnalysisSetCreate:input_type -> lumenvox.api.AnalysisSetCreateRequest
	15, // 69: lumenvox.api.ReportingAPIService.AnalysisSetGet:input_type -> lumenvox.api.AnalysisSetGetRequest
	13, // 70: lumenvox.api.ReportingAPIService.AnalysisSetDelete:input_type -> lumenvox.api.AnalysisSetDeleteRequest
	6,  // 71: lumenvox.api.ReportingAPIService.AnalysisSetList:input_type -> lumenvox.api.AnalysisSetListRequest
	32, // 72: lumenvox.api.ReportingAPIService.RetrieveArchiveData:input_type -> lumenvox.api.RetrieveArchiveDataRequest
	32, // 73: lumenvox.api.ReportingAPIService.RetrieveArchiveDataStream:input_type -> lumenvox.api.RetrieveArchiveDataRequest
	30, // 74: lumenvox.api.ReportingAPIService.RetrieveStorageId:input_type -> lumenvox.api.RetrieveStorageIdRequest
	17, // 75: lumenvox.api.ReportingAPIService.InteractionList:input_type -> lumenvox.api.InteractionAnalysisListRequest
	20, // 76: lumenvox.api.ReportingAPIService.InteractionGet:input_type -> lumenvox.api.InteractionAnalysisGetRequest
	22, // 77: lumenvox.api.ReportingAPIService.InteractionUpdate:input_type -> lumenvox.api.InteractionAnalysisUpdateTranscriptionRequest
	35, // 78: lumenvox.api.ReportingAPIService.GetThirdPartyLicenseAttribution:input_type -> lumenvox.api.GetThirdPartyLicenseAttributionRequest
	37, // 79: lumenvox.api.ReportingAPIService.UsageReport:input_type -> lumenvox.api.UsageReportRequest
	40, // 80: lumenvox.api.ReportingAPIService.UsageSnapshot:input_type -> lumenvox.api.UsageSnapshotRequest
	43, // 81: lumenvox.api.ReportingAPIService.LicenseStatusReportResponsePush:input_type -> lumenvox.api.LicenseStatusReportResponsePushRequest
	45, // 82: lumenvox.api.ReportingAPIService.LicenseStatusReportPull:input_type -> lumenvox.api.LicenseStatusReportPullRequest
	47, // 83: lumenvox.api.ReportingAPIService.ExportAnalysisSet:input_type -> lumenvox.api.ExportAnalysisSetRequest
	49, // 84: lumenvox.api.ReportingAPIService.ImportAnalysisSet:input_type -> lumenvox.api.ImportAnalysisSetRequest
	51, // 85: lumenvox.api.ReportingAPIService.DiagnosticsCheck:input_type -> lumenvox.api.DiagnosticsCheckRequest
	53, // 86: lumenvox.api.ReportingAPIService.EvaluateTranscription:input_type -> lumenvox.api.EvaluateTranscriptionRequest
	57, // 87: lumenvox.api.ReportingAPIService.CreatePostProcessingProfile:input_type -> lumenvox.api.CreatePostProcessingProfileRequest
	61, // 88: lumenvox.api.ReportingAPIService.GetPostProcessingProfile:input_type -> lumenvox.api.GetPostProcessingProfileRequest
	59, // 89: lumenvox.api.ReportingAPIService.GetPostProcessingProfiles:input_type -> lumenvox.api.GetPostProcessingProfilesRequest
	63, // 90: lumenvox.api.ReportingAPIService.UpdatePostProcessingProfile:input_type -> lumenvox.api.UpdatePostProcessingProfileRequest
	65, // 91: lumenvox.api.ReportingAPIService.DeletePostProcessingProfile:input_type -> lumenvox.api.DeletePostProcessingProfileRequest
	67, // 92: lumenvox.api.ReportingAPIService.ExportPostProcessingProfile:input_type -> lumenvox.api.ExportPostProcessingProfileRequest
	69, // 93: lumenvox.api.ReportingAPIService.ImportPostProcessingProfile:input_type -> lumenvox.api.ImportPostProcessingProfileRequest
	71, // 94: lumenvox.api.ReportingAPIService.GetPostProcessingProfileHistory:input_type -> lumenvox.api.GetPostProcessingProfileHistoryRequest
	10, // 95: lumenvox.api.ReportingAPIService.AnalysisSetPreCreate:output_type -> lumenvox.api.AnalysisSetPreCreateResponse
	12, // 96: lumenvox.api.ReportingAPIService.AnalysisSetCreate:output_type -> lumenvox.api.AnalysisSetCreateResponse
	16, // 97: lumenvox.api.ReportingAPIService.AnalysisSetGet:output_type -> lumenvox.api.AnalysisSetGetResponse
	14, // 98: lumenvox.api.ReportingAPIService.AnalysisSetDelete:output_type -> lumenvox.api.AnalysisSetDeleteResponse
	8,  // 99: lumenvox.api.ReportingAPIService.AnalysisSetList:output_type -> lumenvox.api.AnalysisSetListResponse
	33, // 100: lumenvox.api.ReportingAPIService.RetrieveArchiveData:output_type -> lumenvox.api.RetrieveArchiveDataResponse
	33, // 101: lumenvox.api.ReportingAPIService.RetrieveArchiveDataStream:output_type -> lumenvox.api.RetrieveArchiveDataResponse
	31, // 102: lumenvox.api.ReportingAPIService.RetrieveStorageId:output_type -> lumenvox.api.RetrieveStorageIdResponse
	19, // 103: lumenvox.api.ReportingAPIService.InteractionList:output_type -> lumenvox.api.InteractionAnalysisListResponse
	21, // 104: lumenvox.api.ReportingAPIService.InteractionGet:output_type -> lumenvox.api.InteractionAnalysisGetResponse
	23, // 105: lumenvox.api.ReportingAPIService.InteractionUpdate:output_type -> lumenvox.api.InteractionAnalysisUpdateTranscriptionResponse
	36, // 106: lumenvox.api.ReportingAPIService.GetThirdPartyLicenseAttribution:output_type -> lumenvox.api.GetThirdPartyLicenseAttributionResponse
	38, // 107: lumenvox.api.ReportingAPIService.UsageReport:output_type -> lumenvox.api.UsageReportResponse
	41, // 108: lumenvox.api.ReportingAPIService.UsageSnapshot:output_type -> lumenvox.api.UsageSnapshotResponse
	44, // 109: lumenvox.api.ReportingAPIService.LicenseStatusReportResponsePush:output_type -> lumenvox.api.LicenseStatusReportResponsePushResponse
	46, // 110: lumenvox.api.ReportingAPIService.LicenseStatusReportPull:output_type -> lumenvox.api.LicenseStatusReportPullResponse
	48, // 111: lumenvox.api.ReportingAPIService.ExportAnalysisSet:output_type -> lumenvox.api.ExportAnalysisSetResponse
	50, // 112: lumenvox.api.ReportingAPIService.ImportAnalysisSet:output_type -> lumenvox.api.ImportAnalysisSetResponse
	52, // 113: lumenvox.api.ReportingAPIService.DiagnosticsCheck:output_type -> lumenvox.api.DiagnosticsCheckResponse
	54, // 114: lumenvox.api.ReportingAPIService.EvaluateTranscription:output_type -> lumenvox.api.EvaluateTranscriptionResponse
	58, // 115: lumenvox.api.ReportingAPIService.CreatePostProcessingProfile:output_type -> lumenvox.api.CreatePostProcessingProfileResponse
	62, // 116: lumenvox.api.ReportingAPIService.GetPostProcessingProfile:output_type -> lumenvox.api.GetPostProcessingProfileResponse
	60, // 117: lumenvox.api.ReportingAPIService.GetPostProcessingProfiles:output_type -> lumenvox.api.GetPostProcessingProfilesResponse
	64, // 118: lumenvox.api.ReportingAPIService.UpdatePostProcessingProfile:output_type -> lumenvox.api.UpdatePostProcessingProfileResponse
	66, // 119: lumenvox.api.ReportingAPIService.DeletePostProcessingProfile:output_type -> lumenvox.api.DeletePostProcessingProfileResponse
	68, // 120: lumenvox.api.ReportingAPIService.ExportPostProcessingProfile:output_type -> lumenvox.api.ExportPostProcessingProfileResponse
	70, // 121: lumenvox.api.ReportingAPIService.ImportPostProcessingProfile:output_type -> lumenvox.api.ImportPostProcessingProfileResponse
	72, // 122: lumenvox.api.ReportingAPIService.GetPostProcessingProfileHistory:output_type -> lumenvox.api.GetPostProcessingProfileHistoryResponse
	95, // [95:123] is the sub-list for method output_type
	67, // [67:95] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_lumenvox_api_reporting_proto_init() }
func file_lumenvox_api_reporting_proto_init() {
	if File_lumenvox_api_reporting_proto != nil {
		return
	}
	file_lumenvox_api_common_proto_init()
	file_lumenvox_api_results_proto_init()
	file_lumenvox_api_settings_proto_init()
	file_lumenvox_api_audio_formats_proto_init()
	file_lumenvox_api_interaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_reporting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetListFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetPreCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetPreCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisUpdateTranscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisUpdateTranscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionResultSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionAnalysisUpdateTranscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalysisSetFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveStorageIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveStorageIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveArchiveDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveArchiveDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThirdPartyLicenseAttributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThirdPartyLicenseAttributionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentLicenseUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusReportResponsePushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusReportResponsePushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusReportPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseStatusReportPullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportAnalysisSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportAnalysisSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAnalysisSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportAnalysisSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticsCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticsCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateTranscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluateTranscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProcessingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPostProcessingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportPostProcessingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfileHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_reporting_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostProcessingProfileHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_reporting_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lumenvox_api_reporting_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_reporting_proto_depIdxs,
		EnumInfos:         file_lumenvox_api_reporting_proto_enumTypes,
		MessageInfos:      file_lumenvox_api_reporting_proto_msgTypes,
	}.Build()
	File_lumenvox_api_reporting_proto = out.File
	file_lumenvox_api_reporting_proto_rawDesc = nil
	file_lumenvox_api_reporting_proto_goTypes = nil
	file_lumenvox_api_reporting_proto_depIdxs = nil
}
