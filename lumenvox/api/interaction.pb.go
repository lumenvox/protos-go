// API Protocol Buffer File
// This is the gRPC definition for interaction messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/interaction.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InteractionRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to InteractionRequest:
	//
	//	*InteractionRequestMessage_InteractionCreateAmd
	//	*InteractionRequestMessage_InteractionCreateAsr
	//	*InteractionRequestMessage_InteractionCreateCpa
	//	*InteractionRequestMessage_InteractionCreateTranscription
	//	*InteractionRequestMessage_InteractionCreateTts
	//	*InteractionRequestMessage_InteractionCreateGrammarParse
	//	*InteractionRequestMessage_InteractionBeginProcessing
	//	*InteractionRequestMessage_InteractionFinalizeProcessing
	//	*InteractionRequestMessage_InteractionRequestResults
	//	*InteractionRequestMessage_InteractionCreateNormalizeText
	//	*InteractionRequestMessage_InteractionCreateNlu
	//	*InteractionRequestMessage_InteractionCreateDiarization
	//	*InteractionRequestMessage_InteractionCreateLanguageId
	//	*InteractionRequestMessage_InteractionCreateNeuron
	//	*InteractionRequestMessage_InteractionCancel
	//	*InteractionRequestMessage_InteractionClose
	InteractionRequest isInteractionRequestMessage_InteractionRequest `protobuf_oneof:"interaction_request"`
}

func (x *InteractionRequestMessage) Reset() {
	*x = InteractionRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionRequestMessage) ProtoMessage() {}

func (x *InteractionRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionRequestMessage.ProtoReflect.Descriptor instead.
func (*InteractionRequestMessage) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{0}
}

func (m *InteractionRequestMessage) GetInteractionRequest() isInteractionRequestMessage_InteractionRequest {
	if m != nil {
		return m.InteractionRequest
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateAmd() *InteractionCreateAmdRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateAmd); ok {
		return x.InteractionCreateAmd
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateAsr() *InteractionCreateAsrRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateAsr); ok {
		return x.InteractionCreateAsr
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateCpa() *InteractionCreateCpaRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateCpa); ok {
		return x.InteractionCreateCpa
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateTranscription() *InteractionCreateTranscriptionRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateTranscription); ok {
		return x.InteractionCreateTranscription
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateTts() *InteractionCreateTtsRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateTts); ok {
		return x.InteractionCreateTts
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateGrammarParse() *InteractionCreateGrammarParseRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateGrammarParse); ok {
		return x.InteractionCreateGrammarParse
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionBeginProcessing() *InteractionBeginProcessingRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionBeginProcessing); ok {
		return x.InteractionBeginProcessing
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionFinalizeProcessing() *InteractionFinalizeProcessingRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionFinalizeProcessing); ok {
		return x.InteractionFinalizeProcessing
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionRequestResults() *InteractionRequestResultsRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionRequestResults); ok {
		return x.InteractionRequestResults
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateNormalizeText() *InteractionCreateNormalizeTextRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateNormalizeText); ok {
		return x.InteractionCreateNormalizeText
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateNlu() *InteractionCreateNluRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateNlu); ok {
		return x.InteractionCreateNlu
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateDiarization() *InteractionCreateDiarizationRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateDiarization); ok {
		return x.InteractionCreateDiarization
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateLanguageId() *InteractionCreateLanguageIdRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateLanguageId); ok {
		return x.InteractionCreateLanguageId
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCreateNeuron() *InteractionCreateNeuronRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCreateNeuron); ok {
		return x.InteractionCreateNeuron
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionCancel() *InteractionCancelRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionCancel); ok {
		return x.InteractionCancel
	}
	return nil
}

func (x *InteractionRequestMessage) GetInteractionClose() *InteractionCloseRequest {
	if x, ok := x.GetInteractionRequest().(*InteractionRequestMessage_InteractionClose); ok {
		return x.InteractionClose
	}
	return nil
}

type isInteractionRequestMessage_InteractionRequest interface {
	isInteractionRequestMessage_InteractionRequest()
}

type InteractionRequestMessage_InteractionCreateAmd struct {
	// Create AMD interaction request
	InteractionCreateAmd *InteractionCreateAmdRequest `protobuf:"bytes,1,opt,name=interaction_create_amd,json=interactionCreateAmd,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateAsr struct {
	// Create ASR interaction request
	InteractionCreateAsr *InteractionCreateAsrRequest `protobuf:"bytes,2,opt,name=interaction_create_asr,json=interactionCreateAsr,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateCpa struct {
	// Create CPA interaction request
	InteractionCreateCpa *InteractionCreateCpaRequest `protobuf:"bytes,3,opt,name=interaction_create_cpa,json=interactionCreateCpa,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateTranscription struct {
	// Create transcription interaction request
	InteractionCreateTranscription *InteractionCreateTranscriptionRequest `protobuf:"bytes,4,opt,name=interaction_create_transcription,json=interactionCreateTranscription,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateTts struct {
	// Create TTS interaction request
	InteractionCreateTts *InteractionCreateTtsRequest `protobuf:"bytes,5,opt,name=interaction_create_tts,json=interactionCreateTts,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateGrammarParse struct {
	// Create a grammar parse request
	InteractionCreateGrammarParse *InteractionCreateGrammarParseRequest `protobuf:"bytes,6,opt,name=interaction_create_grammar_parse,json=interactionCreateGrammarParse,proto3,oneof"`
}

type InteractionRequestMessage_InteractionBeginProcessing struct {
	// Interaction begin processing
	InteractionBeginProcessing *InteractionBeginProcessingRequest `protobuf:"bytes,9,opt,name=interaction_begin_processing,json=interactionBeginProcessing,proto3,oneof"`
}

type InteractionRequestMessage_InteractionFinalizeProcessing struct {
	// Interaction finalize processing
	InteractionFinalizeProcessing *InteractionFinalizeProcessingRequest `protobuf:"bytes,10,opt,name=interaction_finalize_processing,json=interactionFinalizeProcessing,proto3,oneof"`
}

type InteractionRequestMessage_InteractionRequestResults struct {
	// Interaction request results
	InteractionRequestResults *InteractionRequestResultsRequest `protobuf:"bytes,11,opt,name=interaction_request_results,json=interactionRequestResults,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateNormalizeText struct {
	// Create a normalize text request
	InteractionCreateNormalizeText *InteractionCreateNormalizeTextRequest `protobuf:"bytes,12,opt,name=interaction_create_normalize_text,json=interactionCreateNormalizeText,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateNlu struct {
	// Create a NLU request
	InteractionCreateNlu *InteractionCreateNluRequest `protobuf:"bytes,13,opt,name=interaction_create_nlu,json=interactionCreateNlu,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateDiarization struct {
	// Create a diarization request
	InteractionCreateDiarization *InteractionCreateDiarizationRequest `protobuf:"bytes,14,opt,name=interaction_create_diarization,json=interactionCreateDiarization,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateLanguageId struct {
	// Create a language-id request
	InteractionCreateLanguageId *InteractionCreateLanguageIdRequest `protobuf:"bytes,15,opt,name=interaction_create_language_id,json=interactionCreateLanguageId,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCreateNeuron struct {
	// Create a neuron request
	InteractionCreateNeuron *InteractionCreateNeuronRequest `protobuf:"bytes,16,opt,name=interaction_create_neuron,json=interactionCreateNeuron,proto3,oneof"`
}

type InteractionRequestMessage_InteractionCancel struct {
	// Interaction cancel
	InteractionCancel *InteractionCancelRequest `protobuf:"bytes,100,opt,name=interaction_cancel,json=interactionCancel,proto3,oneof"`
}

type InteractionRequestMessage_InteractionClose struct {
	// Explicit request to close interaction
	InteractionClose *InteractionCloseRequest `protobuf:"bytes,101,opt,name=interaction_close,json=interactionClose,proto3,oneof"`
}

func (*InteractionRequestMessage_InteractionCreateAmd) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateAsr) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateCpa) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateTranscription) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateTts) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateGrammarParse) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionBeginProcessing) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionFinalizeProcessing) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionRequestResults) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateNormalizeText) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateNlu) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateDiarization) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateLanguageId) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCreateNeuron) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionCancel) isInteractionRequestMessage_InteractionRequest() {
}

func (*InteractionRequestMessage_InteractionClose) isInteractionRequestMessage_InteractionRequest() {}

type InteractionCreateAmdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters for this interaction
	AmdSettings *AmdSettings `protobuf:"bytes,1,opt,name=amd_settings,json=amdSettings,proto3" json:"amd_settings,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,2,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Optional settings related to voice activity detection
	VadSettings *VadSettings `protobuf:"bytes,3,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateAmdRequest) Reset() {
	*x = InteractionCreateAmdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateAmdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateAmdRequest) ProtoMessage() {}

func (x *InteractionCreateAmdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateAmdRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateAmdRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{1}
}

func (x *InteractionCreateAmdRequest) GetAmdSettings() *AmdSettings {
	if x != nil {
		return x.AmdSettings
	}
	return nil
}

func (x *InteractionCreateAmdRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *InteractionCreateAmdRequest) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

func (x *InteractionCreateAmdRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateAmdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (uuid) that can be used during subsequent AMD processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateAmdResponse) Reset() {
	*x = InteractionCreateAmdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateAmdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateAmdResponse) ProtoMessage() {}

func (x *InteractionCreateAmdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateAmdResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateAmdResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{2}
}

func (x *InteractionCreateAmdResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateAsrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The language selector the specified grammars
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// List of grammars to use, one for each root grammar to activate
	Grammars []*Grammar `protobuf:"bytes,2,rep,name=grammars,proto3" json:"grammars,omitempty"`
	// Optional grammar settings to apply to this interaction
	GrammarSettings *GrammarSettings `protobuf:"bytes,3,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
	// Optional recognition settings for this interaction
	RecognitionSettings *RecognitionSettings `protobuf:"bytes,4,opt,name=recognition_settings,json=recognitionSettings,proto3" json:"recognition_settings,omitempty"`
	// Optional settings related to voice activity detection
	VadSettings *VadSettings `protobuf:"bytes,5,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,6,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,7,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateAsrRequest) Reset() {
	*x = InteractionCreateAsrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateAsrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateAsrRequest) ProtoMessage() {}

func (x *InteractionCreateAsrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateAsrRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateAsrRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{3}
}

func (x *InteractionCreateAsrRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateAsrRequest) GetGrammars() []*Grammar {
	if x != nil {
		return x.Grammars
	}
	return nil
}

func (x *InteractionCreateAsrRequest) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

func (x *InteractionCreateAsrRequest) GetRecognitionSettings() *RecognitionSettings {
	if x != nil {
		return x.RecognitionSettings
	}
	return nil
}

func (x *InteractionCreateAsrRequest) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

func (x *InteractionCreateAsrRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *InteractionCreateAsrRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateAsrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (uuid) that can be used during subsequent ASR processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateAsrResponse) Reset() {
	*x = InteractionCreateAsrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateAsrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateAsrResponse) ProtoMessage() {}

func (x *InteractionCreateAsrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateAsrResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateAsrResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{4}
}

func (x *InteractionCreateAsrResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateCpaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters for this interaction
	CpaSettings *CpaSettings `protobuf:"bytes,1,opt,name=cpa_settings,json=cpaSettings,proto3" json:"cpa_settings,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,2,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Optional settings related to voice activity detection
	VadSettings *VadSettings `protobuf:"bytes,3,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateCpaRequest) Reset() {
	*x = InteractionCreateCpaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateCpaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateCpaRequest) ProtoMessage() {}

func (x *InteractionCreateCpaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateCpaRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateCpaRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{5}
}

func (x *InteractionCreateCpaRequest) GetCpaSettings() *CpaSettings {
	if x != nil {
		return x.CpaSettings
	}
	return nil
}

func (x *InteractionCreateCpaRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *InteractionCreateCpaRequest) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

func (x *InteractionCreateCpaRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateCpaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (uuid) that can be used during subsequent CPA processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateCpaResponse) Reset() {
	*x = InteractionCreateCpaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateCpaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateCpaResponse) ProtoMessage() {}

func (x *InteractionCreateCpaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateCpaResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateCpaResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{6}
}

func (x *InteractionCreateCpaResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type TranscriptionPhraseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional list of strings containing words and phrases "hints" so that
	// the transcriber recognition is more likely to recognize them. This can be
	// used to improve the accuracy for specific words and phrases, for example,
	// if specific commands are typically spoken by the user. This can also be
	// used to add additional words or phrases to the transcriber's vocabulary.
	Phrases []string `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	// Optional reference to previously defined global phrase list(s)
	GlobalPhraseList *PhraseList `protobuf:"bytes,2,opt,name=global_phrase_list,json=globalPhraseList,proto3" json:"global_phrase_list,omitempty"`
	// Optional reference to previously defined session phrase list(s)
	SessionPhraseList *PhraseList `protobuf:"bytes,3,opt,name=session_phrase_list,json=sessionPhraseList,proto3" json:"session_phrase_list,omitempty"`
}

func (x *TranscriptionPhraseList) Reset() {
	*x = TranscriptionPhraseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionPhraseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionPhraseList) ProtoMessage() {}

func (x *TranscriptionPhraseList) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionPhraseList.ProtoReflect.Descriptor instead.
func (*TranscriptionPhraseList) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptionPhraseList) GetPhrases() []string {
	if x != nil {
		return x.Phrases
	}
	return nil
}

func (x *TranscriptionPhraseList) GetGlobalPhraseList() *PhraseList {
	if x != nil {
		return x.GlobalPhraseList
	}
	return nil
}

func (x *TranscriptionPhraseList) GetSessionPhraseList() *PhraseList {
	if x != nil {
		return x.SessionPhraseList
	}
	return nil
}

type InteractionCreateTranscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transcription language selector this request.
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Optional phrase lists for interaction
	Phrases []*TranscriptionPhraseList `protobuf:"bytes,2,rep,name=phrases,proto3" json:"phrases,omitempty"`
	// If `true`, transcription will perform continuous
	// recognition (continuing to wait for and process audio even if the user
	// pauses speaking) until the client closes the input stream (gRPC API).
	// This may return multiple FinalResult callback messages.
	//
	// If `false`, the recognizer will detect a single spoken utterance. When it
	// detects that the user has paused or stopped speaking, it will return an
	// FinalResult callback and cease recognition. It will return no
	// more than one FinalResult.
	//
	// Default: false
	ContinuousUtteranceTranscription *OptionalBool `protobuf:"bytes,3,opt,name=continuous_utterance_transcription,json=continuousUtteranceTranscription,proto3" json:"continuous_utterance_transcription,omitempty"`
	// Optional recognition settings for this interaction
	RecognitionSettings *RecognitionSettings `protobuf:"bytes,4,opt,name=recognition_settings,json=recognitionSettings,proto3" json:"recognition_settings,omitempty"`
	// Optional settings related to voice activity detection
	VadSettings *VadSettings `protobuf:"bytes,5,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,6,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Optional settings specifying whether text normalization step should be
	// performed on output of this interaction.
	NormalizationSettings *NormalizationSettings `protobuf:"bytes,7,opt,name=normalization_settings,json=normalizationSettings,proto3" json:"normalization_settings,omitempty"`
	// Optional settings specifying boost options for phrases
	PhraseListSettings *PhraseListSettings `protobuf:"bytes,8,opt,name=phrase_list_settings,json=phraseListSettings,proto3" json:"phrase_list_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,9,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
	// Optional list of grammars to use during transcription
	// when a grammar matches during transcription, the semantic results of the
	// grammar will also be returned
	EmbeddedGrammars []*Grammar `protobuf:"bytes,10,rep,name=embedded_grammars,json=embeddedGrammars,proto3" json:"embedded_grammars,omitempty"`
	// Optional grammar settings for embedded grammars
	EmbeddedGrammarSettings *GrammarSettings `protobuf:"bytes,11,opt,name=embedded_grammar_settings,json=embeddedGrammarSettings,proto3" json:"embedded_grammar_settings,omitempty"`
	// Optional name of a language model (decoder) to use when processing
	// transcription.
	// Default is to not specify this, allowing engine to use default language
	// decoder
	LanguageModelName *OptionalString `protobuf:"bytes,12,opt,name=language_model_name,json=languageModelName,proto3" json:"language_model_name,omitempty"`
	// Optional name of a acoustic model (encoder) to use when processing
	// transcription.
	// Default is to not specify this, allowing engine to use default language
	// encoder
	AcousticModelName *OptionalString `protobuf:"bytes,13,opt,name=acoustic_model_name,json=acousticModelName,proto3" json:"acoustic_model_name,omitempty"`
	// Optional custom postprocessing to enhance decoder functionality.
	// Default is to not specify this, allowing engine to use default
	// postprocessing
	EnablePostprocessing *OptionalString `protobuf:"bytes,14,opt,name=enable_postprocessing,json=enablePostprocessing,proto3" json:"enable_postprocessing,omitempty"`
}

func (x *InteractionCreateTranscriptionRequest) Reset() {
	*x = InteractionCreateTranscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTranscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTranscriptionRequest) ProtoMessage() {}

func (x *InteractionCreateTranscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTranscriptionRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateTranscriptionRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{8}
}

func (x *InteractionCreateTranscriptionRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateTranscriptionRequest) GetPhrases() []*TranscriptionPhraseList {
	if x != nil {
		return x.Phrases
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetContinuousUtteranceTranscription() *OptionalBool {
	if x != nil {
		return x.ContinuousUtteranceTranscription
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetRecognitionSettings() *RecognitionSettings {
	if x != nil {
		return x.RecognitionSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetNormalizationSettings() *NormalizationSettings {
	if x != nil {
		return x.NormalizationSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetPhraseListSettings() *PhraseListSettings {
	if x != nil {
		return x.PhraseListSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetEmbeddedGrammars() []*Grammar {
	if x != nil {
		return x.EmbeddedGrammars
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetEmbeddedGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.EmbeddedGrammarSettings
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetLanguageModelName() *OptionalString {
	if x != nil {
		return x.LanguageModelName
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetAcousticModelName() *OptionalString {
	if x != nil {
		return x.AcousticModelName
	}
	return nil
}

func (x *InteractionCreateTranscriptionRequest) GetEnablePostprocessing() *OptionalString {
	if x != nil {
		return x.EnablePostprocessing
	}
	return nil
}

type InteractionCreateTranscriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (uuid) that can be used during subsequent ASR processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateTranscriptionResponse) Reset() {
	*x = InteractionCreateTranscriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTranscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTranscriptionResponse) ProtoMessage() {}

func (x *InteractionCreateTranscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTranscriptionResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateTranscriptionResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{9}
}

func (x *InteractionCreateTranscriptionResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateTtsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Synthesis language for this request (e.g.: "en-US", "de-DE", etc.)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Types that are assignable to TtsRequest:
	//
	//	*InteractionCreateTtsRequest_SsmlRequest
	//	*InteractionCreateTtsRequest_InlineRequest
	TtsRequest isInteractionCreateTtsRequest_TtsRequest `protobuf_oneof:"tts_request"`
	// Audio format to be generated by TTS Synthesis
	// Note: this is not configurable at Session or Global level, since it is
	//
	//	explicitly required for each interaction request.
	AudioFormat *AudioFormat `protobuf:"bytes,4,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Optional timeout to limit the maximum time allowed for a synthesis
	// Default: 5000 milliseconds
	SynthesisTimeoutMs *OptionalInt32 `protobuf:"bytes,6,opt,name=synthesis_timeout_ms,json=synthesisTimeoutMs,proto3" json:"synthesis_timeout_ms,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,7,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
	// When true, partial results callbacks will be enabled for the interaction
	// Default: false
	EnablePartialResults *OptionalBool `protobuf:"bytes,8,opt,name=enable_partial_results,json=enablePartialResults,proto3" json:"enable_partial_results,omitempty"`
}

func (x *InteractionCreateTtsRequest) Reset() {
	*x = InteractionCreateTtsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTtsRequest) ProtoMessage() {}

func (x *InteractionCreateTtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTtsRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateTtsRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{10}
}

func (x *InteractionCreateTtsRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (m *InteractionCreateTtsRequest) GetTtsRequest() isInteractionCreateTtsRequest_TtsRequest {
	if m != nil {
		return m.TtsRequest
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetSsmlRequest() *InteractionCreateTtsRequest_SsmlUrlRequest {
	if x, ok := x.GetTtsRequest().(*InteractionCreateTtsRequest_SsmlRequest); ok {
		return x.SsmlRequest
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetInlineRequest() *InteractionCreateTtsRequest_InlineTtsRequest {
	if x, ok := x.GetTtsRequest().(*InteractionCreateTtsRequest_InlineRequest); ok {
		return x.InlineRequest
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetSynthesisTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.SynthesisTimeoutMs
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

func (x *InteractionCreateTtsRequest) GetEnablePartialResults() *OptionalBool {
	if x != nil {
		return x.EnablePartialResults
	}
	return nil
}

type isInteractionCreateTtsRequest_TtsRequest interface {
	isInteractionCreateTtsRequest_TtsRequest()
}

type InteractionCreateTtsRequest_SsmlRequest struct {
	// SSML type request and parameters
	SsmlRequest *InteractionCreateTtsRequest_SsmlUrlRequest `protobuf:"bytes,2,opt,name=ssml_request,json=ssmlRequest,proto3,oneof"`
}

type InteractionCreateTtsRequest_InlineRequest struct {
	// Inline TTS definition (text and optional parameters)
	InlineRequest *InteractionCreateTtsRequest_InlineTtsRequest `protobuf:"bytes,3,opt,name=inline_request,json=inlineRequest,proto3,oneof"`
}

func (*InteractionCreateTtsRequest_SsmlRequest) isInteractionCreateTtsRequest_TtsRequest() {}

func (*InteractionCreateTtsRequest_InlineRequest) isInteractionCreateTtsRequest_TtsRequest() {}

type InteractionCreateTtsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (uuid) that can be used during subsequent TTS processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateTtsResponse) Reset() {
	*x = InteractionCreateTtsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTtsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTtsResponse) ProtoMessage() {}

func (x *InteractionCreateTtsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTtsResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateTtsResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{11}
}

func (x *InteractionCreateTtsResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateNormalizeTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Language to use for normalization (e.g. en-us)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// All words in single string.
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Optional settings specifying whether text normalization step should be
	// performed on output of this interaction.
	NormalizationSettings *NormalizationSettings `protobuf:"bytes,3,opt,name=normalization_settings,json=normalizationSettings,proto3" json:"normalization_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateNormalizeTextRequest) Reset() {
	*x = InteractionCreateNormalizeTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNormalizeTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNormalizeTextRequest) ProtoMessage() {}

func (x *InteractionCreateNormalizeTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNormalizeTextRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateNormalizeTextRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{12}
}

func (x *InteractionCreateNormalizeTextRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateNormalizeTextRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *InteractionCreateNormalizeTextRequest) GetNormalizationSettings() *NormalizationSettings {
	if x != nil {
		return x.NormalizationSettings
	}
	return nil
}

func (x *InteractionCreateNormalizeTextRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateNormalizeTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (UUID) that can be used during subsequent Normalize Text
	// processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateNormalizeTextResponse) Reset() {
	*x = InteractionCreateNormalizeTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNormalizeTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNormalizeTextResponse) ProtoMessage() {}

func (x *InteractionCreateNormalizeTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNormalizeTextResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateNormalizeTextResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{13}
}

func (x *InteractionCreateNormalizeTextResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateNluRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Language to use for NLU processing (e.g. en-US)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Text string to be processed.
	InputText string `protobuf:"bytes,2,opt,name=input_text,json=inputText,proto3" json:"input_text,omitempty"`
	// Optional settings specifying which NLU steps should be performed to
	// generate output for this interaction.
	NluSettings *NluSettings `protobuf:"bytes,3,opt,name=nlu_settings,json=nluSettings,proto3" json:"nlu_settings,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateNluRequest) Reset() {
	*x = InteractionCreateNluRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNluRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNluRequest) ProtoMessage() {}

func (x *InteractionCreateNluRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNluRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateNluRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{14}
}

func (x *InteractionCreateNluRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateNluRequest) GetInputText() string {
	if x != nil {
		return x.InputText
	}
	return ""
}

func (x *InteractionCreateNluRequest) GetNluSettings() *NluSettings {
	if x != nil {
		return x.NluSettings
	}
	return nil
}

func (x *InteractionCreateNluRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateNluResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (UUID) that can be used during subsequent NLU processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateNluResponse) Reset() {
	*x = InteractionCreateNluResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNluResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNluResponse) ProtoMessage() {}

func (x *InteractionCreateNluResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNluResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateNluResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{15}
}

func (x *InteractionCreateNluResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateDiarizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Language to use for Diarization processing (e.g. en-US)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Maximum number of speakers to be identified.
	// Possible values: 1 - 100
	MaxNumSpeakers int32 `protobuf:"varint,2,opt,name=max_num_speakers,json=maxNumSpeakers,proto3" json:"max_num_speakers,omitempty"`
	// Number of milliseconds Diarization processing should await results before
	// timing out.
	// Possible values: 0 - 100,000,000
	// Default: 10,000,000 (~2.7 hours)
	RequestTimeoutMs *OptionalInt32 `protobuf:"bytes,3,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3" json:"request_timeout_ms,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,5,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
}

func (x *InteractionCreateDiarizationRequest) Reset() {
	*x = InteractionCreateDiarizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateDiarizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateDiarizationRequest) ProtoMessage() {}

func (x *InteractionCreateDiarizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateDiarizationRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateDiarizationRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{16}
}

func (x *InteractionCreateDiarizationRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateDiarizationRequest) GetMaxNumSpeakers() int32 {
	if x != nil {
		return x.MaxNumSpeakers
	}
	return 0
}

func (x *InteractionCreateDiarizationRequest) GetRequestTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.RequestTimeoutMs
	}
	return nil
}

func (x *InteractionCreateDiarizationRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

func (x *InteractionCreateDiarizationRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

type InteractionCreateDiarizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (UUID) that can be used during subsequent Diarization
	// processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateDiarizationResponse) Reset() {
	*x = InteractionCreateDiarizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateDiarizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateDiarizationResponse) ProtoMessage() {}

func (x *InteractionCreateDiarizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateDiarizationResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateDiarizationResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{17}
}

func (x *InteractionCreateDiarizationResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateLanguageIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,1,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
	// Number of milliseconds languageId processing should await results before
	// timing out.
	// Possible values: 0 - 100,000,000
	// Default: 10,000,000 (~2.7 hours)
	RequestTimeoutMs *OptionalInt32 `protobuf:"bytes,2,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3" json:"request_timeout_ms,omitempty"`
	// Optional settings specifying audio to process for interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,3,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
}

func (x *InteractionCreateLanguageIdRequest) Reset() {
	*x = InteractionCreateLanguageIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateLanguageIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateLanguageIdRequest) ProtoMessage() {}

func (x *InteractionCreateLanguageIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateLanguageIdRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateLanguageIdRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{18}
}

func (x *InteractionCreateLanguageIdRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

func (x *InteractionCreateLanguageIdRequest) GetRequestTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.RequestTimeoutMs
	}
	return nil
}

func (x *InteractionCreateLanguageIdRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

type InteractionCreateLanguageIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (UUID)
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateLanguageIdResponse) Reset() {
	*x = InteractionCreateLanguageIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateLanguageIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateLanguageIdResponse) ProtoMessage() {}

func (x *InteractionCreateLanguageIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateLanguageIdResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateLanguageIdResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{19}
}

func (x *InteractionCreateLanguageIdResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateGrammarParseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The language selector the specified grammars
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// List of grammars to use, one for each root grammar to activate
	Grammars []*Grammar `protobuf:"bytes,2,rep,name=grammars,proto3" json:"grammars,omitempty"`
	// Optional grammar settings to apply to this interaction
	GrammarSettings *GrammarSettings `protobuf:"bytes,3,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
	// Input text to be parsed against specified grammar[s]
	InputText string `protobuf:"bytes,4,opt,name=input_text,json=inputText,proto3" json:"input_text,omitempty"`
	// Maximum milliseconds to allow for a grammar parse. If this is exceeded,
	// a timeout error will be raised. Range 0-10000000 (~166 minutes)
	// Default: 10000 (10 seconds)
	ParseTimeoutMs *OptionalInt32 `protobuf:"bytes,5,opt,name=parse_timeout_ms,json=parseTimeoutMs,proto3" json:"parse_timeout_ms,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,6,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateGrammarParseRequest) Reset() {
	*x = InteractionCreateGrammarParseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateGrammarParseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateGrammarParseRequest) ProtoMessage() {}

func (x *InteractionCreateGrammarParseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateGrammarParseRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateGrammarParseRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{20}
}

func (x *InteractionCreateGrammarParseRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateGrammarParseRequest) GetGrammars() []*Grammar {
	if x != nil {
		return x.Grammars
	}
	return nil
}

func (x *InteractionCreateGrammarParseRequest) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

func (x *InteractionCreateGrammarParseRequest) GetInputText() string {
	if x != nil {
		return x.InputText
	}
	return ""
}

func (x *InteractionCreateGrammarParseRequest) GetParseTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.ParseTimeoutMs
	}
	return nil
}

func (x *InteractionCreateGrammarParseRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateGrammarParseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced by the request
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateGrammarParseResponse) Reset() {
	*x = InteractionCreateGrammarParseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateGrammarParseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateGrammarParseResponse) ProtoMessage() {}

func (x *InteractionCreateGrammarParseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateGrammarParseResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateGrammarParseResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{21}
}

func (x *InteractionCreateGrammarParseResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCreateNeuronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Language to use for neuron processing (e.g. en-us)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Input string to process.
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,4,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
}

func (x *InteractionCreateNeuronRequest) Reset() {
	*x = InteractionCreateNeuronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNeuronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNeuronRequest) ProtoMessage() {}

func (x *InteractionCreateNeuronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNeuronRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateNeuronRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{22}
}

func (x *InteractionCreateNeuronRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *InteractionCreateNeuronRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *InteractionCreateNeuronRequest) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

type InteractionCreateNeuronResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interaction ID (UUID) that can be used during subsequent Neuron
	// processing
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCreateNeuronResponse) Reset() {
	*x = InteractionCreateNeuronResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateNeuronResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateNeuronResponse) ProtoMessage() {}

func (x *InteractionCreateNeuronResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateNeuronResponse.ProtoReflect.Descriptor instead.
func (*InteractionCreateNeuronResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{23}
}

func (x *InteractionCreateNeuronResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionBeginProcessingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionBeginProcessingRequest) Reset() {
	*x = InteractionBeginProcessingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionBeginProcessingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionBeginProcessingRequest) ProtoMessage() {}

func (x *InteractionBeginProcessingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionBeginProcessingRequest.ProtoReflect.Descriptor instead.
func (*InteractionBeginProcessingRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{24}
}

func (x *InteractionBeginProcessingRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionFinalizeProcessingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionFinalizeProcessingRequest) Reset() {
	*x = InteractionFinalizeProcessingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionFinalizeProcessingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionFinalizeProcessingRequest) ProtoMessage() {}

func (x *InteractionFinalizeProcessingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionFinalizeProcessingRequest.ProtoReflect.Descriptor instead.
func (*InteractionFinalizeProcessingRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{25}
}

func (x *InteractionFinalizeProcessingRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionRequestResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionRequestResultsRequest) Reset() {
	*x = InteractionRequestResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionRequestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionRequestResultsRequest) ProtoMessage() {}

func (x *InteractionRequestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionRequestResultsRequest.ProtoReflect.Descriptor instead.
func (*InteractionRequestResultsRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{26}
}

func (x *InteractionRequestResultsRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionRequestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Requested results
	InteractionResults *Result `protobuf:"bytes,2,opt,name=interaction_results,json=interactionResults,proto3" json:"interaction_results,omitempty"`
}

func (x *InteractionRequestResultsResponse) Reset() {
	*x = InteractionRequestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionRequestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionRequestResultsResponse) ProtoMessage() {}

func (x *InteractionRequestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionRequestResultsResponse.ProtoReflect.Descriptor instead.
func (*InteractionRequestResultsResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{27}
}

func (x *InteractionRequestResultsResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionRequestResultsResponse) GetInteractionResults() *Result {
	if x != nil {
		return x.InteractionResults
	}
	return nil
}

type InteractionCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCancelRequest) Reset() {
	*x = InteractionCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCancelRequest) ProtoMessage() {}

func (x *InteractionCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCancelRequest.ProtoReflect.Descriptor instead.
func (*InteractionCancelRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{28}
}

func (x *InteractionCancelRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Status of request
	CloseStatus *status.Status `protobuf:"bytes,2,opt,name=close_status,json=closeStatus,proto3" json:"close_status,omitempty"`
}

func (x *InteractionCancelResponse) Reset() {
	*x = InteractionCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCancelResponse) ProtoMessage() {}

func (x *InteractionCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCancelResponse.ProtoReflect.Descriptor instead.
func (*InteractionCancelResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{29}
}

func (x *InteractionCancelResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionCancelResponse) GetCloseStatus() *status.Status {
	if x != nil {
		return x.CloseStatus
	}
	return nil
}

type InteractionCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
}

func (x *InteractionCloseRequest) Reset() {
	*x = InteractionCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCloseRequest) ProtoMessage() {}

func (x *InteractionCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCloseRequest.ProtoReflect.Descriptor instead.
func (*InteractionCloseRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{30}
}

func (x *InteractionCloseRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

type InteractionCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Status of request
	CloseStatus *status.Status `protobuf:"bytes,2,opt,name=close_status,json=closeStatus,proto3" json:"close_status,omitempty"`
}

func (x *InteractionCloseResponse) Reset() {
	*x = InteractionCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCloseResponse) ProtoMessage() {}

func (x *InteractionCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCloseResponse.ProtoReflect.Descriptor instead.
func (*InteractionCloseResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{31}
}

func (x *InteractionCloseResponse) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *InteractionCloseResponse) GetCloseStatus() *status.Status {
	if x != nil {
		return x.CloseStatus
	}
	return nil
}

// Inline TTS definition (text and optional parameters)
type InteractionCreateTtsRequest_InlineTtsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text to synthesize, can simple text, or SSML
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Optional settings for voice synthesis.
	TtsInlineSynthesisSettings *TtsInlineSynthesisSettings `protobuf:"bytes,2,opt,name=tts_inline_synthesis_settings,json=ttsInlineSynthesisSettings,proto3" json:"tts_inline_synthesis_settings,omitempty"`
	// Enables or disables the verification of a peer's certificate using a
	// local certificate authority file upon HTTPS requests. Set to
	// false (disabled) to skip verification for trusted sites.
	// Default: true
	SslVerifyPeer *OptionalBool `protobuf:"bytes,3,opt,name=ssl_verify_peer,json=sslVerifyPeer,proto3" json:"ssl_verify_peer,omitempty"`
}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) Reset() {
	*x = InteractionCreateTtsRequest_InlineTtsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTtsRequest_InlineTtsRequest) ProtoMessage() {}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTtsRequest_InlineTtsRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateTtsRequest_InlineTtsRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{10, 0}
}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) GetTtsInlineSynthesisSettings() *TtsInlineSynthesisSettings {
	if x != nil {
		return x.TtsInlineSynthesisSettings
	}
	return nil
}

func (x *InteractionCreateTtsRequest_InlineTtsRequest) GetSslVerifyPeer() *OptionalBool {
	if x != nil {
		return x.SslVerifyPeer
	}
	return nil
}

type InteractionCreateTtsRequest_SsmlUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL from which to fetch synthesis request SSML
	SsmlUrl string `protobuf:"bytes,1,opt,name=ssml_url,json=ssmlUrl,proto3" json:"ssml_url,omitempty"`
	// Enables or disables the verification of a peer's certificate using a
	// local certificate authority file upon HTTPS requests. Set to
	// false (disabled) to skip verification for trusted sites.
	// Default: true
	SslVerifyPeer *OptionalBool `protobuf:"bytes,2,opt,name=ssl_verify_peer,json=sslVerifyPeer,proto3" json:"ssl_verify_peer,omitempty"`
}

func (x *InteractionCreateTtsRequest_SsmlUrlRequest) Reset() {
	*x = InteractionCreateTtsRequest_SsmlUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_interaction_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionCreateTtsRequest_SsmlUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionCreateTtsRequest_SsmlUrlRequest) ProtoMessage() {}

func (x *InteractionCreateTtsRequest_SsmlUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_interaction_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionCreateTtsRequest_SsmlUrlRequest.ProtoReflect.Descriptor instead.
func (*InteractionCreateTtsRequest_SsmlUrlRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_interaction_proto_rawDescGZIP(), []int{10, 1}
}

func (x *InteractionCreateTtsRequest_SsmlUrlRequest) GetSsmlUrl() string {
	if x != nil {
		return x.SsmlUrl
	}
	return ""
}

func (x *InteractionCreateTtsRequest_SsmlUrlRequest) GetSslVerifyPeer() *OptionalBool {
	if x != nil {
		return x.SslVerifyPeer
	}
	return nil
}

var File_lumenvox_api_interaction_proto protoreflect.FileDescriptor

var file_lumenvox_api_interaction_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x0e, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x61, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6d, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x72, 0x12, 0x61, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x70, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x70, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x70, 0x61, 0x12, 0x7f, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x12, 0x7d, 0x0a, 0x20,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x1c, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x12, 0x7c, 0x0a, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x70,
	0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6c, 0x75, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x6c, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x6c, 0x75, 0x12, 0x79, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x77, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x75, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x54, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdf, 0x02, 0x0a,
	0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c,
	0x61, 0x6d, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6d, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61,
	0x6d, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x45,
	0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x90, 0x04, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54,
	0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1c,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xdf, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x70, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x0c, 0x63, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x70, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0b, 0x63, 0x70, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a,
	0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x45, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x70, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x86, 0x09, 0x0a, 0x25, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x22, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x75, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x55, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x5a, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x10, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73, 0x12,
	0x59, 0x0a, 0x19, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x17, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x63, 0x6f, 0x75,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x61, 0x63, 0x6f, 0x75, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x4f, 0x0a, 0x26, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa2, 0x07, 0x0a, 0x1b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x73, 0x73, 0x6d, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x73, 0x6d, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xd7, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6b,
	0x0a, 0x1d, 0x74, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x1a, 0x74, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x73,
	0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x0d, 0x73, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x1a,
	0x6f, 0x0a, 0x0e, 0x53, 0x73, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x73, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x73, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x42, 0x0a, 0x0f,
	0x73, 0x73, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x0d, 0x73, 0x73, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x45, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x25, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x5a, 0x0a, 0x16,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x26, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6c, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x6e, 0x6c, 0x75, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6c, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0b, 0x6e, 0x6c, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a,
	0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x45, 0x0a, 0x1c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6c, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xfc, 0x02, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x4d, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xb5, 0x02, 0x0a, 0x22, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x58, 0x0a,
	0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4c, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x91, 0x03, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x73, 0x12, 0x48, 0x0a,
	0x10, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x6a, 0x0a,
	0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4e, 0x0a, 0x25, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x1e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x75, 0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x1f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4a,
	0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x24, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x20, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x45, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x19, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x9f, 0x01, 0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x42, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02,
	0x18, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x18, 0x4c, 0x75, 0x6d, 0x65,
	0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_interaction_proto_rawDescOnce sync.Once
	file_lumenvox_api_interaction_proto_rawDescData = file_lumenvox_api_interaction_proto_rawDesc
)

func file_lumenvox_api_interaction_proto_rawDescGZIP() []byte {
	file_lumenvox_api_interaction_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_interaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_interaction_proto_rawDescData)
	})
	return file_lumenvox_api_interaction_proto_rawDescData
}

var file_lumenvox_api_interaction_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_lumenvox_api_interaction_proto_goTypes = []interface{}{
	(*InteractionRequestMessage)(nil),                    // 0: lumenvox.api.InteractionRequestMessage
	(*InteractionCreateAmdRequest)(nil),                  // 1: lumenvox.api.InteractionCreateAmdRequest
	(*InteractionCreateAmdResponse)(nil),                 // 2: lumenvox.api.InteractionCreateAmdResponse
	(*InteractionCreateAsrRequest)(nil),                  // 3: lumenvox.api.InteractionCreateAsrRequest
	(*InteractionCreateAsrResponse)(nil),                 // 4: lumenvox.api.InteractionCreateAsrResponse
	(*InteractionCreateCpaRequest)(nil),                  // 5: lumenvox.api.InteractionCreateCpaRequest
	(*InteractionCreateCpaResponse)(nil),                 // 6: lumenvox.api.InteractionCreateCpaResponse
	(*TranscriptionPhraseList)(nil),                      // 7: lumenvox.api.TranscriptionPhraseList
	(*InteractionCreateTranscriptionRequest)(nil),        // 8: lumenvox.api.InteractionCreateTranscriptionRequest
	(*InteractionCreateTranscriptionResponse)(nil),       // 9: lumenvox.api.InteractionCreateTranscriptionResponse
	(*InteractionCreateTtsRequest)(nil),                  // 10: lumenvox.api.InteractionCreateTtsRequest
	(*InteractionCreateTtsResponse)(nil),                 // 11: lumenvox.api.InteractionCreateTtsResponse
	(*InteractionCreateNormalizeTextRequest)(nil),        // 12: lumenvox.api.InteractionCreateNormalizeTextRequest
	(*InteractionCreateNormalizeTextResponse)(nil),       // 13: lumenvox.api.InteractionCreateNormalizeTextResponse
	(*InteractionCreateNluRequest)(nil),                  // 14: lumenvox.api.InteractionCreateNluRequest
	(*InteractionCreateNluResponse)(nil),                 // 15: lumenvox.api.InteractionCreateNluResponse
	(*InteractionCreateDiarizationRequest)(nil),          // 16: lumenvox.api.InteractionCreateDiarizationRequest
	(*InteractionCreateDiarizationResponse)(nil),         // 17: lumenvox.api.InteractionCreateDiarizationResponse
	(*InteractionCreateLanguageIdRequest)(nil),           // 18: lumenvox.api.InteractionCreateLanguageIdRequest
	(*InteractionCreateLanguageIdResponse)(nil),          // 19: lumenvox.api.InteractionCreateLanguageIdResponse
	(*InteractionCreateGrammarParseRequest)(nil),         // 20: lumenvox.api.InteractionCreateGrammarParseRequest
	(*InteractionCreateGrammarParseResponse)(nil),        // 21: lumenvox.api.InteractionCreateGrammarParseResponse
	(*InteractionCreateNeuronRequest)(nil),               // 22: lumenvox.api.InteractionCreateNeuronRequest
	(*InteractionCreateNeuronResponse)(nil),              // 23: lumenvox.api.InteractionCreateNeuronResponse
	(*InteractionBeginProcessingRequest)(nil),            // 24: lumenvox.api.InteractionBeginProcessingRequest
	(*InteractionFinalizeProcessingRequest)(nil),         // 25: lumenvox.api.InteractionFinalizeProcessingRequest
	(*InteractionRequestResultsRequest)(nil),             // 26: lumenvox.api.InteractionRequestResultsRequest
	(*InteractionRequestResultsResponse)(nil),            // 27: lumenvox.api.InteractionRequestResultsResponse
	(*InteractionCancelRequest)(nil),                     // 28: lumenvox.api.InteractionCancelRequest
	(*InteractionCancelResponse)(nil),                    // 29: lumenvox.api.InteractionCancelResponse
	(*InteractionCloseRequest)(nil),                      // 30: lumenvox.api.InteractionCloseRequest
	(*InteractionCloseResponse)(nil),                     // 31: lumenvox.api.InteractionCloseResponse
	(*InteractionCreateTtsRequest_InlineTtsRequest)(nil), // 32: lumenvox.api.InteractionCreateTtsRequest.InlineTtsRequest
	(*InteractionCreateTtsRequest_SsmlUrlRequest)(nil),   // 33: lumenvox.api.InteractionCreateTtsRequest.SsmlUrlRequest
	(*AmdSettings)(nil),                                  // 34: lumenvox.api.AmdSettings
	(*AudioConsumeSettings)(nil),                         // 35: lumenvox.api.AudioConsumeSettings
	(*VadSettings)(nil),                                  // 36: lumenvox.api.VadSettings
	(*GeneralInteractionSettings)(nil),                   // 37: lumenvox.api.GeneralInteractionSettings
	(*Grammar)(nil),                                      // 38: lumenvox.api.Grammar
	(*GrammarSettings)(nil),                              // 39: lumenvox.api.GrammarSettings
	(*RecognitionSettings)(nil),                          // 40: lumenvox.api.RecognitionSettings
	(*CpaSettings)(nil),                                  // 41: lumenvox.api.CpaSettings
	(*PhraseList)(nil),                                   // 42: lumenvox.api.PhraseList
	(*OptionalBool)(nil),                                 // 43: lumenvox.api.OptionalBool
	(*NormalizationSettings)(nil),                        // 44: lumenvox.api.NormalizationSettings
	(*PhraseListSettings)(nil),                           // 45: lumenvox.api.PhraseListSettings
	(*OptionalString)(nil),                               // 46: lumenvox.api.OptionalString
	(*AudioFormat)(nil),                                  // 47: lumenvox.api.AudioFormat
	(*OptionalInt32)(nil),                                // 48: lumenvox.api.OptionalInt32
	(*NluSettings)(nil),                                  // 49: lumenvox.api.NluSettings
	(*Result)(nil),                                       // 50: lumenvox.api.Result
	(*status.Status)(nil),                                // 51: google.rpc.Status
	(*TtsInlineSynthesisSettings)(nil),                   // 52: lumenvox.api.TtsInlineSynthesisSettings
}
var file_lumenvox_api_interaction_proto_depIdxs = []int32{
	1,  // 0: lumenvox.api.InteractionRequestMessage.interaction_create_amd:type_name -> lumenvox.api.InteractionCreateAmdRequest
	3,  // 1: lumenvox.api.InteractionRequestMessage.interaction_create_asr:type_name -> lumenvox.api.InteractionCreateAsrRequest
	5,  // 2: lumenvox.api.InteractionRequestMessage.interaction_create_cpa:type_name -> lumenvox.api.InteractionCreateCpaRequest
	8,  // 3: lumenvox.api.InteractionRequestMessage.interaction_create_transcription:type_name -> lumenvox.api.InteractionCreateTranscriptionRequest
	10, // 4: lumenvox.api.InteractionRequestMessage.interaction_create_tts:type_name -> lumenvox.api.InteractionCreateTtsRequest
	20, // 5: lumenvox.api.InteractionRequestMessage.interaction_create_grammar_parse:type_name -> lumenvox.api.InteractionCreateGrammarParseRequest
	24, // 6: lumenvox.api.InteractionRequestMessage.interaction_begin_processing:type_name -> lumenvox.api.InteractionBeginProcessingRequest
	25, // 7: lumenvox.api.InteractionRequestMessage.interaction_finalize_processing:type_name -> lumenvox.api.InteractionFinalizeProcessingRequest
	26, // 8: lumenvox.api.InteractionRequestMessage.interaction_request_results:type_name -> lumenvox.api.InteractionRequestResultsRequest
	12, // 9: lumenvox.api.InteractionRequestMessage.interaction_create_normalize_text:type_name -> lumenvox.api.InteractionCreateNormalizeTextRequest
	14, // 10: lumenvox.api.InteractionRequestMessage.interaction_create_nlu:type_name -> lumenvox.api.InteractionCreateNluRequest
	16, // 11: lumenvox.api.InteractionRequestMessage.interaction_create_diarization:type_name -> lumenvox.api.InteractionCreateDiarizationRequest
	18, // 12: lumenvox.api.InteractionRequestMessage.interaction_create_language_id:type_name -> lumenvox.api.InteractionCreateLanguageIdRequest
	22, // 13: lumenvox.api.InteractionRequestMessage.interaction_create_neuron:type_name -> lumenvox.api.InteractionCreateNeuronRequest
	28, // 14: lumenvox.api.InteractionRequestMessage.interaction_cancel:type_name -> lumenvox.api.InteractionCancelRequest
	30, // 15: lumenvox.api.InteractionRequestMessage.interaction_close:type_name -> lumenvox.api.InteractionCloseRequest
	34, // 16: lumenvox.api.InteractionCreateAmdRequest.amd_settings:type_name -> lumenvox.api.AmdSettings
	35, // 17: lumenvox.api.InteractionCreateAmdRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	36, // 18: lumenvox.api.InteractionCreateAmdRequest.vad_settings:type_name -> lumenvox.api.VadSettings
	37, // 19: lumenvox.api.InteractionCreateAmdRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	38, // 20: lumenvox.api.InteractionCreateAsrRequest.grammars:type_name -> lumenvox.api.Grammar
	39, // 21: lumenvox.api.InteractionCreateAsrRequest.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	40, // 22: lumenvox.api.InteractionCreateAsrRequest.recognition_settings:type_name -> lumenvox.api.RecognitionSettings
	36, // 23: lumenvox.api.InteractionCreateAsrRequest.vad_settings:type_name -> lumenvox.api.VadSettings
	35, // 24: lumenvox.api.InteractionCreateAsrRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	37, // 25: lumenvox.api.InteractionCreateAsrRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	41, // 26: lumenvox.api.InteractionCreateCpaRequest.cpa_settings:type_name -> lumenvox.api.CpaSettings
	35, // 27: lumenvox.api.InteractionCreateCpaRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	36, // 28: lumenvox.api.InteractionCreateCpaRequest.vad_settings:type_name -> lumenvox.api.VadSettings
	37, // 29: lumenvox.api.InteractionCreateCpaRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	42, // 30: lumenvox.api.TranscriptionPhraseList.global_phrase_list:type_name -> lumenvox.api.PhraseList
	42, // 31: lumenvox.api.TranscriptionPhraseList.session_phrase_list:type_name -> lumenvox.api.PhraseList
	7,  // 32: lumenvox.api.InteractionCreateTranscriptionRequest.phrases:type_name -> lumenvox.api.TranscriptionPhraseList
	43, // 33: lumenvox.api.InteractionCreateTranscriptionRequest.continuous_utterance_transcription:type_name -> lumenvox.api.OptionalBool
	40, // 34: lumenvox.api.InteractionCreateTranscriptionRequest.recognition_settings:type_name -> lumenvox.api.RecognitionSettings
	36, // 35: lumenvox.api.InteractionCreateTranscriptionRequest.vad_settings:type_name -> lumenvox.api.VadSettings
	35, // 36: lumenvox.api.InteractionCreateTranscriptionRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	44, // 37: lumenvox.api.InteractionCreateTranscriptionRequest.normalization_settings:type_name -> lumenvox.api.NormalizationSettings
	45, // 38: lumenvox.api.InteractionCreateTranscriptionRequest.phrase_list_settings:type_name -> lumenvox.api.PhraseListSettings
	37, // 39: lumenvox.api.InteractionCreateTranscriptionRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	38, // 40: lumenvox.api.InteractionCreateTranscriptionRequest.embedded_grammars:type_name -> lumenvox.api.Grammar
	39, // 41: lumenvox.api.InteractionCreateTranscriptionRequest.embedded_grammar_settings:type_name -> lumenvox.api.GrammarSettings
	46, // 42: lumenvox.api.InteractionCreateTranscriptionRequest.language_model_name:type_name -> lumenvox.api.OptionalString
	46, // 43: lumenvox.api.InteractionCreateTranscriptionRequest.acoustic_model_name:type_name -> lumenvox.api.OptionalString
	46, // 44: lumenvox.api.InteractionCreateTranscriptionRequest.enable_postprocessing:type_name -> lumenvox.api.OptionalString
	33, // 45: lumenvox.api.InteractionCreateTtsRequest.ssml_request:type_name -> lumenvox.api.InteractionCreateTtsRequest.SsmlUrlRequest
	32, // 46: lumenvox.api.InteractionCreateTtsRequest.inline_request:type_name -> lumenvox.api.InteractionCreateTtsRequest.InlineTtsRequest
	47, // 47: lumenvox.api.InteractionCreateTtsRequest.audio_format:type_name -> lumenvox.api.AudioFormat
	48, // 48: lumenvox.api.InteractionCreateTtsRequest.synthesis_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	37, // 49: lumenvox.api.InteractionCreateTtsRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	43, // 50: lumenvox.api.InteractionCreateTtsRequest.enable_partial_results:type_name -> lumenvox.api.OptionalBool
	44, // 51: lumenvox.api.InteractionCreateNormalizeTextRequest.normalization_settings:type_name -> lumenvox.api.NormalizationSettings
	37, // 52: lumenvox.api.InteractionCreateNormalizeTextRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	49, // 53: lumenvox.api.InteractionCreateNluRequest.nlu_settings:type_name -> lumenvox.api.NluSettings
	37, // 54: lumenvox.api.InteractionCreateNluRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	48, // 55: lumenvox.api.InteractionCreateDiarizationRequest.request_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	37, // 56: lumenvox.api.InteractionCreateDiarizationRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	35, // 57: lumenvox.api.InteractionCreateDiarizationRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	37, // 58: lumenvox.api.InteractionCreateLanguageIdRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	48, // 59: lumenvox.api.InteractionCreateLanguageIdRequest.request_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	35, // 60: lumenvox.api.InteractionCreateLanguageIdRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	38, // 61: lumenvox.api.InteractionCreateGrammarParseRequest.grammars:type_name -> lumenvox.api.Grammar
	39, // 62: lumenvox.api.InteractionCreateGrammarParseRequest.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	48, // 63: lumenvox.api.InteractionCreateGrammarParseRequest.parse_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	37, // 64: lumenvox.api.InteractionCreateGrammarParseRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	37, // 65: lumenvox.api.InteractionCreateNeuronRequest.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	50, // 66: lumenvox.api.InteractionRequestResultsResponse.interaction_results:type_name -> lumenvox.api.Result
	51, // 67: lumenvox.api.InteractionCancelResponse.close_status:type_name -> google.rpc.Status
	51, // 68: lumenvox.api.InteractionCloseResponse.close_status:type_name -> google.rpc.Status
	52, // 69: lumenvox.api.InteractionCreateTtsRequest.InlineTtsRequest.tts_inline_synthesis_settings:type_name -> lumenvox.api.TtsInlineSynthesisSettings
	43, // 70: lumenvox.api.InteractionCreateTtsRequest.InlineTtsRequest.ssl_verify_peer:type_name -> lumenvox.api.OptionalBool
	43, // 71: lumenvox.api.InteractionCreateTtsRequest.SsmlUrlRequest.ssl_verify_peer:type_name -> lumenvox.api.OptionalBool
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_lumenvox_api_interaction_proto_init() }
func file_lumenvox_api_interaction_proto_init() {
	if File_lumenvox_api_interaction_proto != nil {
		return
	}
	file_lumenvox_api_audio_formats_proto_init()
	file_lumenvox_api_common_proto_init()
	file_lumenvox_api_optional_values_proto_init()
	file_lumenvox_api_results_proto_init()
	file_lumenvox_api_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_interaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateAmdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateAmdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateAsrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateAsrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateCpaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateCpaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionPhraseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTranscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTranscriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTtsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTtsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNormalizeTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNormalizeTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNluRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNluResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateDiarizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateDiarizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateLanguageIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateLanguageIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateGrammarParseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateGrammarParseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNeuronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateNeuronResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionBeginProcessingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionFinalizeProcessingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionRequestResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionRequestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTtsRequest_InlineTtsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_interaction_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionCreateTtsRequest_SsmlUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_interaction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InteractionRequestMessage_InteractionCreateAmd)(nil),
		(*InteractionRequestMessage_InteractionCreateAsr)(nil),
		(*InteractionRequestMessage_InteractionCreateCpa)(nil),
		(*InteractionRequestMessage_InteractionCreateTranscription)(nil),
		(*InteractionRequestMessage_InteractionCreateTts)(nil),
		(*InteractionRequestMessage_InteractionCreateGrammarParse)(nil),
		(*InteractionRequestMessage_InteractionBeginProcessing)(nil),
		(*InteractionRequestMessage_InteractionFinalizeProcessing)(nil),
		(*InteractionRequestMessage_InteractionRequestResults)(nil),
		(*InteractionRequestMessage_InteractionCreateNormalizeText)(nil),
		(*InteractionRequestMessage_InteractionCreateNlu)(nil),
		(*InteractionRequestMessage_InteractionCreateDiarization)(nil),
		(*InteractionRequestMessage_InteractionCreateLanguageId)(nil),
		(*InteractionRequestMessage_InteractionCreateNeuron)(nil),
		(*InteractionRequestMessage_InteractionCancel)(nil),
		(*InteractionRequestMessage_InteractionClose)(nil),
	}
	file_lumenvox_api_interaction_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*InteractionCreateTtsRequest_SsmlRequest)(nil),
		(*InteractionCreateTtsRequest_InlineRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_interaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_interaction_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_interaction_proto_depIdxs,
		MessageInfos:      file_lumenvox_api_interaction_proto_msgTypes,
	}.Build()
	File_lumenvox_api_interaction_proto = out.File
	file_lumenvox_api_interaction_proto_rawDesc = nil
	file_lumenvox_api_interaction_proto_goTypes = nil
	file_lumenvox_api_interaction_proto_depIdxs = nil
}
