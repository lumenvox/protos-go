// API Protocol Buffer File
// This is the gRPC definition for global messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/global.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GlobalGetSettingsRequest_GetSettingsType int32

const (
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_UNSPECIFIED GlobalGetSettingsRequest_GetSettingsType = 0
	// SessionSettings type
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_SESSION GlobalGetSettingsRequest_GetSettingsType = 1
	// InteractionSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_INTERACTION GlobalGetSettingsRequest_GetSettingsType = 2
	// GrammarSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_GRAMMAR GlobalGetSettingsRequest_GetSettingsType = 3
	// RecognitionSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_RECOGNITION GlobalGetSettingsRequest_GetSettingsType = 4
	// NormalizationSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_NORMALIZATION GlobalGetSettingsRequest_GetSettingsType = 5
	// VadSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_VAD GlobalGetSettingsRequest_GetSettingsType = 6
	// CpaSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_CPA GlobalGetSettingsRequest_GetSettingsType = 7
	// AmdSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_AMD GlobalGetSettingsRequest_GetSettingsType = 8
	// AudioConsumeSettings type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_AUDIO_CONSUME GlobalGetSettingsRequest_GetSettingsType = 9
	// LoggingSettings type
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_LOGGING_SETTINGS GlobalGetSettingsRequest_GetSettingsType = 10
	// PhraseList type
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGetSettingsRequest_GET_SETTINGS_TYPE_PHRASE_LIST GlobalGetSettingsRequest_GetSettingsType = 11
)

// Enum value maps for GlobalGetSettingsRequest_GetSettingsType.
var (
	GlobalGetSettingsRequest_GetSettingsType_name = map[int32]string{
		0:  "GET_SETTINGS_TYPE_UNSPECIFIED",
		1:  "GET_SETTINGS_TYPE_SESSION",
		2:  "GET_SETTINGS_TYPE_INTERACTION",
		3:  "GET_SETTINGS_TYPE_GRAMMAR",
		4:  "GET_SETTINGS_TYPE_RECOGNITION",
		5:  "GET_SETTINGS_TYPE_NORMALIZATION",
		6:  "GET_SETTINGS_TYPE_VAD",
		7:  "GET_SETTINGS_TYPE_CPA",
		8:  "GET_SETTINGS_TYPE_AMD",
		9:  "GET_SETTINGS_TYPE_AUDIO_CONSUME",
		10: "GET_SETTINGS_TYPE_LOGGING_SETTINGS",
		11: "GET_SETTINGS_TYPE_PHRASE_LIST",
	}
	GlobalGetSettingsRequest_GetSettingsType_value = map[string]int32{
		"GET_SETTINGS_TYPE_UNSPECIFIED":      0,
		"GET_SETTINGS_TYPE_SESSION":          1,
		"GET_SETTINGS_TYPE_INTERACTION":      2,
		"GET_SETTINGS_TYPE_GRAMMAR":          3,
		"GET_SETTINGS_TYPE_RECOGNITION":      4,
		"GET_SETTINGS_TYPE_NORMALIZATION":    5,
		"GET_SETTINGS_TYPE_VAD":              6,
		"GET_SETTINGS_TYPE_CPA":              7,
		"GET_SETTINGS_TYPE_AMD":              8,
		"GET_SETTINGS_TYPE_AUDIO_CONSUME":    9,
		"GET_SETTINGS_TYPE_LOGGING_SETTINGS": 10,
		"GET_SETTINGS_TYPE_PHRASE_LIST":      11,
	}
)

func (x GlobalGetSettingsRequest_GetSettingsType) Enum() *GlobalGetSettingsRequest_GetSettingsType {
	p := new(GlobalGetSettingsRequest_GetSettingsType)
	*p = x
	return p
}

func (x GlobalGetSettingsRequest_GetSettingsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GlobalGetSettingsRequest_GetSettingsType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_global_proto_enumTypes[0].Descriptor()
}

func (GlobalGetSettingsRequest_GetSettingsType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_global_proto_enumTypes[0]
}

func (x GlobalGetSettingsRequest_GetSettingsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GlobalGetSettingsRequest_GetSettingsType.Descriptor instead.
func (GlobalGetSettingsRequest_GetSettingsType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{7, 0}
}

type GlobalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional unique reference per request message.
	// A UUID value will be auto generated if not supplied by client
	CorrelationId *OptionalString `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Valid deployment identifier (UUID) to associate the request with
	DeploymentId string `protobuf:"bytes,2,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// UUID related to the operator (entity or person making request)
	OperatorId string `protobuf:"bytes,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Types that are assignable to Request:
	//
	//	*GlobalRequest_GlobalLoadGrammarRequest
	//	*GlobalRequest_GlobalLoadPhraseList
	//	*GlobalRequest_GlobalGetSettingsRequest
	//	*GlobalRequest_SessionSettings
	//	*GlobalRequest_InteractionSettings
	//	*GlobalRequest_GrammarSettings
	//	*GlobalRequest_RecognitionSettings
	//	*GlobalRequest_NormalizationSettings
	//	*GlobalRequest_VadSettings
	//	*GlobalRequest_CpaSettings
	//	*GlobalRequest_AmdSettings
	//	*GlobalRequest_AudioConsumeSettings
	//	*GlobalRequest_LoggingSettings
	//	*GlobalRequest_PhraseListSettings
	//	*GlobalRequest_ResetSettings
	Request isGlobalRequest_Request `protobuf_oneof:"request"`
}

func (x *GlobalRequest) Reset() {
	*x = GlobalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalRequest) ProtoMessage() {}

func (x *GlobalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalRequest.ProtoReflect.Descriptor instead.
func (*GlobalRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalRequest) GetCorrelationId() *OptionalString {
	if x != nil {
		return x.CorrelationId
	}
	return nil
}

func (x *GlobalRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *GlobalRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

func (m *GlobalRequest) GetRequest() isGlobalRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *GlobalRequest) GetGlobalLoadGrammarRequest() *GlobalLoadGrammarRequest {
	if x, ok := x.GetRequest().(*GlobalRequest_GlobalLoadGrammarRequest); ok {
		return x.GlobalLoadGrammarRequest
	}
	return nil
}

func (x *GlobalRequest) GetGlobalLoadPhraseList() *GlobalLoadPhraseList {
	if x, ok := x.GetRequest().(*GlobalRequest_GlobalLoadPhraseList); ok {
		return x.GlobalLoadPhraseList
	}
	return nil
}

func (x *GlobalRequest) GetGlobalGetSettingsRequest() *GlobalGetSettingsRequest {
	if x, ok := x.GetRequest().(*GlobalRequest_GlobalGetSettingsRequest); ok {
		return x.GlobalGetSettingsRequest
	}
	return nil
}

func (x *GlobalRequest) GetSessionSettings() *SessionSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_SessionSettings); ok {
		return x.SessionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetInteractionSettings() *InteractionSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_InteractionSettings); ok {
		return x.InteractionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetGrammarSettings() *GrammarSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_GrammarSettings); ok {
		return x.GrammarSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetRecognitionSettings() *RecognitionSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_RecognitionSettings); ok {
		return x.RecognitionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetNormalizationSettings() *NormalizationSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_NormalizationSettings); ok {
		return x.NormalizationSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetVadSettings() *VadSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_VadSettings); ok {
		return x.VadSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetCpaSettings() *CpaSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_CpaSettings); ok {
		return x.CpaSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetAmdSettings() *AmdSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_AmdSettings); ok {
		return x.AmdSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_AudioConsumeSettings); ok {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *GlobalRequest) GetLoggingSettings() *LoggingSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_LoggingSettings); ok {
		return x.LoggingSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalRequest) GetPhraseListSettings() *PhraseListSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_PhraseListSettings); ok {
		return x.PhraseListSettings
	}
	return nil
}

func (x *GlobalRequest) GetResetSettings() *ResetSettings {
	if x, ok := x.GetRequest().(*GlobalRequest_ResetSettings); ok {
		return x.ResetSettings
	}
	return nil
}

type isGlobalRequest_Request interface {
	isGlobalRequest_Request()
}

type GlobalRequest_GlobalLoadGrammarRequest struct {
	// Load a globally defined grammar. This feature is not currently available.
	GlobalLoadGrammarRequest *GlobalLoadGrammarRequest `protobuf:"bytes,4,opt,name=global_load_grammar_request,json=globalLoadGrammarRequest,proto3,oneof"`
}

type GlobalRequest_GlobalLoadPhraseList struct {
	// Load a globally defined phrase list
	GlobalLoadPhraseList *GlobalLoadPhraseList `protobuf:"bytes,5,opt,name=global_load_phrase_list,json=globalLoadPhraseList,proto3,oneof"`
}

type GlobalRequest_GlobalGetSettingsRequest struct {
	// Get specified global default settings
	GlobalGetSettingsRequest *GlobalGetSettingsRequest `protobuf:"bytes,6,opt,name=global_get_settings_request,json=globalGetSettingsRequest,proto3,oneof"`
}

type GlobalRequest_SessionSettings struct {
	// Default session settings
	SessionSettings *SessionSettings `protobuf:"bytes,7,opt,name=session_settings,json=sessionSettings,proto3,oneof"`
}

type GlobalRequest_InteractionSettings struct {
	// Default interaction settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	InteractionSettings *InteractionSettings `protobuf:"bytes,8,opt,name=interaction_settings,json=interactionSettings,proto3,oneof"`
}

type GlobalRequest_GrammarSettings struct {
	// Default grammar settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GrammarSettings *GrammarSettings `protobuf:"bytes,9,opt,name=grammar_settings,json=grammarSettings,proto3,oneof"`
}

type GlobalRequest_RecognitionSettings struct {
	// Default recognition settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	RecognitionSettings *RecognitionSettings `protobuf:"bytes,10,opt,name=recognition_settings,json=recognitionSettings,proto3,oneof"`
}

type GlobalRequest_NormalizationSettings struct {
	// Default normalization settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	NormalizationSettings *NormalizationSettings `protobuf:"bytes,11,opt,name=normalization_settings,json=normalizationSettings,proto3,oneof"`
}

type GlobalRequest_VadSettings struct {
	// Default VAD settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	VadSettings *VadSettings `protobuf:"bytes,12,opt,name=vad_settings,json=vadSettings,proto3,oneof"`
}

type GlobalRequest_CpaSettings struct {
	// Default CPA settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	CpaSettings *CpaSettings `protobuf:"bytes,13,opt,name=cpa_settings,json=cpaSettings,proto3,oneof"`
}

type GlobalRequest_AmdSettings struct {
	// Default tone detection settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	AmdSettings *AmdSettings `protobuf:"bytes,14,opt,name=amd_settings,json=amdSettings,proto3,oneof"`
}

type GlobalRequest_AudioConsumeSettings struct {
	// Default audio consume settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,15,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3,oneof"`
}

type GlobalRequest_LoggingSettings struct {
	// Default logging settings
	LoggingSettings *LoggingSettings `protobuf:"bytes,16,opt,name=logging_settings,json=loggingSettings,proto3,oneof"`
}

type GlobalRequest_PhraseListSettings struct {
	// Optional settings specifying boost options for phrases
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	PhraseListSettings *PhraseListSettings `protobuf:"bytes,17,opt,name=phrase_list_settings,json=phraseListSettings,proto3,oneof"`
}

type GlobalRequest_ResetSettings struct {
	// Will reset all of the settings to default
	ResetSettings *ResetSettings `protobuf:"bytes,18,opt,name=reset_settings,json=resetSettings,proto3,oneof"`
}

func (*GlobalRequest_GlobalLoadGrammarRequest) isGlobalRequest_Request() {}

func (*GlobalRequest_GlobalLoadPhraseList) isGlobalRequest_Request() {}

func (*GlobalRequest_GlobalGetSettingsRequest) isGlobalRequest_Request() {}

func (*GlobalRequest_SessionSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_InteractionSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_GrammarSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_RecognitionSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_NormalizationSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_VadSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_CpaSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_AmdSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_AudioConsumeSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_LoggingSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_PhraseListSettings) isGlobalRequest_Request() {}

func (*GlobalRequest_ResetSettings) isGlobalRequest_Request() {}

type GlobalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to corresponding request correlation_id
	CorrelationId *OptionalString `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Types that are assignable to Response:
	//
	//	*GlobalResponse_GlobalEvent
	//	*GlobalResponse_GlobalSettings
	//	*GlobalResponse_GlobalGrammar
	//	*GlobalResponse_GlobalPhraseList
	Response isGlobalResponse_Response `protobuf_oneof:"response"`
}

func (x *GlobalResponse) Reset() {
	*x = GlobalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalResponse) ProtoMessage() {}

func (x *GlobalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalResponse.ProtoReflect.Descriptor instead.
func (*GlobalResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{1}
}

func (x *GlobalResponse) GetCorrelationId() *OptionalString {
	if x != nil {
		return x.CorrelationId
	}
	return nil
}

func (m *GlobalResponse) GetResponse() isGlobalResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *GlobalResponse) GetGlobalEvent() *GlobalEvent {
	if x, ok := x.GetResponse().(*GlobalResponse_GlobalEvent); ok {
		return x.GlobalEvent
	}
	return nil
}

func (x *GlobalResponse) GetGlobalSettings() *GlobalSettings {
	if x, ok := x.GetResponse().(*GlobalResponse_GlobalSettings); ok {
		return x.GlobalSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalResponse) GetGlobalGrammar() *GlobalLoadGrammarResponse {
	if x, ok := x.GetResponse().(*GlobalResponse_GlobalGrammar); ok {
		return x.GlobalGrammar
	}
	return nil
}

func (x *GlobalResponse) GetGlobalPhraseList() *GlobalLoadPhraseListResponse {
	if x, ok := x.GetResponse().(*GlobalResponse_GlobalPhraseList); ok {
		return x.GlobalPhraseList
	}
	return nil
}

type isGlobalResponse_Response interface {
	isGlobalResponse_Response()
}

type GlobalResponse_GlobalEvent struct {
	// Global event notification (typically errors)
	GlobalEvent *GlobalEvent `protobuf:"bytes,2,opt,name=global_event,json=globalEvent,proto3,oneof"`
}

type GlobalResponse_GlobalSettings struct {
	// Global default settings (which were requested)
	GlobalSettings *GlobalSettings `protobuf:"bytes,3,opt,name=global_settings,json=globalSettings,proto3,oneof"`
}

type GlobalResponse_GlobalGrammar struct {
	// Response to a global load grammar request
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GlobalGrammar *GlobalLoadGrammarResponse `protobuf:"bytes,4,opt,name=global_grammar,json=globalGrammar,proto3,oneof"`
}

type GlobalResponse_GlobalPhraseList struct {
	// Response to a global load phrase list request
	GlobalPhraseList *GlobalLoadPhraseListResponse `protobuf:"bytes,5,opt,name=global_phrase_list,json=globalPhraseList,proto3,oneof"`
}

func (*GlobalResponse_GlobalEvent) isGlobalResponse_Response() {}

func (*GlobalResponse_GlobalSettings) isGlobalResponse_Response() {}

func (*GlobalResponse_GlobalGrammar) isGlobalResponse_Response() {}

func (*GlobalResponse_GlobalPhraseList) isGlobalResponse_Response() {}

// Not currently available
type GlobalLoadGrammarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The language selector the specified grammar
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.)
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Reference label for global grammar
	// Note: label must consist of letters, digits, hyphens, underscores only
	GrammarLabel string `protobuf:"bytes,2,opt,name=grammar_label,json=grammarLabel,proto3" json:"grammar_label,omitempty"`
	// Types that are assignable to GlobalGrammarReference:
	//
	//	*GlobalLoadGrammarRequest_GrammarUrl
	//	*GlobalLoadGrammarRequest_InlineGrammarText
	GlobalGrammarReference isGlobalLoadGrammarRequest_GlobalGrammarReference `protobuf_oneof:"global_grammar_reference"`
	// Optional grammar settings applied to this request
	GrammarSettings *GrammarSettings `protobuf:"bytes,5,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
}

func (x *GlobalLoadGrammarRequest) Reset() {
	*x = GlobalLoadGrammarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalLoadGrammarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalLoadGrammarRequest) ProtoMessage() {}

func (x *GlobalLoadGrammarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalLoadGrammarRequest.ProtoReflect.Descriptor instead.
func (*GlobalLoadGrammarRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{2}
}

func (x *GlobalLoadGrammarRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GlobalLoadGrammarRequest) GetGrammarLabel() string {
	if x != nil {
		return x.GrammarLabel
	}
	return ""
}

func (m *GlobalLoadGrammarRequest) GetGlobalGrammarReference() isGlobalLoadGrammarRequest_GlobalGrammarReference {
	if m != nil {
		return m.GlobalGrammarReference
	}
	return nil
}

func (x *GlobalLoadGrammarRequest) GetGrammarUrl() string {
	if x, ok := x.GetGlobalGrammarReference().(*GlobalLoadGrammarRequest_GrammarUrl); ok {
		return x.GrammarUrl
	}
	return ""
}

func (x *GlobalLoadGrammarRequest) GetInlineGrammarText() string {
	if x, ok := x.GetGlobalGrammarReference().(*GlobalLoadGrammarRequest_InlineGrammarText); ok {
		return x.InlineGrammarText
	}
	return ""
}

func (x *GlobalLoadGrammarRequest) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

type isGlobalLoadGrammarRequest_GlobalGrammarReference interface {
	isGlobalLoadGrammarRequest_GlobalGrammarReference()
}

type GlobalLoadGrammarRequest_GrammarUrl struct {
	// A grammar URL to be loaded
	GrammarUrl string `protobuf:"bytes,3,opt,name=grammar_url,json=grammarUrl,proto3,oneof"`
}

type GlobalLoadGrammarRequest_InlineGrammarText struct {
	// A string containing the raw grammar text
	InlineGrammarText string `protobuf:"bytes,4,opt,name=inline_grammar_text,json=inlineGrammarText,proto3,oneof"`
}

func (*GlobalLoadGrammarRequest_GrammarUrl) isGlobalLoadGrammarRequest_GlobalGrammarReference() {}

func (*GlobalLoadGrammarRequest_InlineGrammarText) isGlobalLoadGrammarRequest_GlobalGrammarReference() {
}

type GlobalLoadGrammarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the grammar load
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The mode of the loaded grammar
	Mode GrammarMode `protobuf:"varint,2,opt,name=mode,proto3,enum=lumenvox.api.GrammarMode" json:"mode,omitempty"`
	// The label for the loaded grammar
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *GlobalLoadGrammarResponse) Reset() {
	*x = GlobalLoadGrammarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalLoadGrammarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalLoadGrammarResponse) ProtoMessage() {}

func (x *GlobalLoadGrammarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalLoadGrammarResponse.ProtoReflect.Descriptor instead.
func (*GlobalLoadGrammarResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{3}
}

func (x *GlobalLoadGrammarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GlobalLoadGrammarResponse) GetMode() GrammarMode {
	if x != nil {
		return x.Mode
	}
	return GrammarMode_GRAMMAR_MODE_UNSPECIFIED
}

func (x *GlobalLoadGrammarResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type GlobalLoadPhraseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of strings containing word and phrase "hints" so that the
	// transcriber recognition is more likely to recognize them. This can be
	// used to improve the accuracy for specific words and phrases, for example,
	// if specific commands are typically spoken by the user. This can also be
	// used to add additional words or phrases to the transcriber's vocabulary.
	Phrases []string `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	// A label that can be used to reference this list within a transcription
	// request
	PhaseListLabel string `protobuf:"bytes,2,opt,name=phase_list_label,json=phaseListLabel,proto3" json:"phase_list_label,omitempty"`
	// The language selector describing which ASR resource will process request
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	// Note that phrase lists are inherently language-independent, so this
	// field is only used to direct which language-dependent resource will
	// process the phrase load request
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	// Optional settings specifying boost options for phrases
	PhraseListSettings *PhraseListSettings `protobuf:"bytes,4,opt,name=phrase_list_settings,json=phraseListSettings,proto3" json:"phrase_list_settings,omitempty"`
}

func (x *GlobalLoadPhraseList) Reset() {
	*x = GlobalLoadPhraseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalLoadPhraseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalLoadPhraseList) ProtoMessage() {}

func (x *GlobalLoadPhraseList) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalLoadPhraseList.ProtoReflect.Descriptor instead.
func (*GlobalLoadPhraseList) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{4}
}

func (x *GlobalLoadPhraseList) GetPhrases() []string {
	if x != nil {
		return x.Phrases
	}
	return nil
}

func (x *GlobalLoadPhraseList) GetPhaseListLabel() string {
	if x != nil {
		return x.PhaseListLabel
	}
	return ""
}

func (x *GlobalLoadPhraseList) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GlobalLoadPhraseList) GetPhraseListSettings() *PhraseListSettings {
	if x != nil {
		return x.PhraseListSettings
	}
	return nil
}

type GlobalLoadPhraseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the phrase list load.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The label for the phrase list.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *GlobalLoadPhraseListResponse) Reset() {
	*x = GlobalLoadPhraseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalLoadPhraseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalLoadPhraseListResponse) ProtoMessage() {}

func (x *GlobalLoadPhraseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalLoadPhraseListResponse.ProtoReflect.Descriptor instead.
func (*GlobalLoadPhraseListResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{5}
}

func (x *GlobalLoadPhraseListResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GlobalLoadPhraseListResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type GlobalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String containing event information
	StatusMessage *status.Status `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *GlobalEvent) Reset() {
	*x = GlobalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalEvent) ProtoMessage() {}

func (x *GlobalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalEvent.ProtoReflect.Descriptor instead.
func (*GlobalEvent) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{6}
}

func (x *GlobalEvent) GetStatusMessage() *status.Status {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

type GlobalGetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used to specify the type of settings to request
	SettingsType GlobalGetSettingsRequest_GetSettingsType `protobuf:"varint,1,opt,name=settings_type,json=settingsType,proto3,enum=lumenvox.api.GlobalGetSettingsRequest_GetSettingsType" json:"settings_type,omitempty"`
}

func (x *GlobalGetSettingsRequest) Reset() {
	*x = GlobalGetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalGetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalGetSettingsRequest) ProtoMessage() {}

func (x *GlobalGetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalGetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GlobalGetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{7}
}

func (x *GlobalGetSettingsRequest) GetSettingsType() GlobalGetSettingsRequest_GetSettingsType {
	if x != nil {
		return x.SettingsType
	}
	return GlobalGetSettingsRequest_GET_SETTINGS_TYPE_UNSPECIFIED
}

type GlobalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default session settings
	SessionSettings *SessionSettings `protobuf:"bytes,1,opt,name=session_settings,json=sessionSettings,proto3" json:"session_settings,omitempty"`
	// Default interaction settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	InteractionSettings *InteractionSettings `protobuf:"bytes,2,opt,name=interaction_settings,json=interactionSettings,proto3" json:"interaction_settings,omitempty"`
	// Default grammar settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	GrammarSettings *GrammarSettings `protobuf:"bytes,3,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
	// Default recognition settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	RecognitionSettings *RecognitionSettings `protobuf:"bytes,4,opt,name=recognition_settings,json=recognitionSettings,proto3" json:"recognition_settings,omitempty"`
	// Default normalization settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	NormalizationSettings *NormalizationSettings `protobuf:"bytes,5,opt,name=normalization_settings,json=normalizationSettings,proto3" json:"normalization_settings,omitempty"`
	// Default VAD settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	VadSettings *VadSettings `protobuf:"bytes,6,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Default CPA settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	CpaSettings *CpaSettings `protobuf:"bytes,7,opt,name=cpa_settings,json=cpaSettings,proto3" json:"cpa_settings,omitempty"`
	// Default tone detection settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	AmdSettings *AmdSettings `protobuf:"bytes,8,opt,name=amd_settings,json=amdSettings,proto3" json:"amd_settings,omitempty"`
	// Default audio consume settings
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,9,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Default logging settings
	LoggingSettings *LoggingSettings `protobuf:"bytes,10,opt,name=logging_settings,json=loggingSettings,proto3" json:"logging_settings,omitempty"`
	// Optional settings specifying boost options for phrases
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	PhraseListSettings *PhraseListSettings `protobuf:"bytes,11,opt,name=phrase_list_settings,json=phraseListSettings,proto3" json:"phrase_list_settings,omitempty"`
	// Optional settings for Text-To-Speech (TTS)
	//
	// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
	TtsSettings *TtsSettings `protobuf:"bytes,12,opt,name=tts_settings,json=ttsSettings,proto3" json:"tts_settings,omitempty"`
}

func (x *GlobalSettings) Reset() {
	*x = GlobalSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_global_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSettings) ProtoMessage() {}

func (x *GlobalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_global_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSettings.ProtoReflect.Descriptor instead.
func (*GlobalSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_global_proto_rawDescGZIP(), []int{8}
}

func (x *GlobalSettings) GetSessionSettings() *SessionSettings {
	if x != nil {
		return x.SessionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetInteractionSettings() *InteractionSettings {
	if x != nil {
		return x.InteractionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetRecognitionSettings() *RecognitionSettings {
	if x != nil {
		return x.RecognitionSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetNormalizationSettings() *NormalizationSettings {
	if x != nil {
		return x.NormalizationSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetCpaSettings() *CpaSettings {
	if x != nil {
		return x.CpaSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetAmdSettings() *AmdSettings {
	if x != nil {
		return x.AmdSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *GlobalSettings) GetLoggingSettings() *LoggingSettings {
	if x != nil {
		return x.LoggingSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetPhraseListSettings() *PhraseListSettings {
	if x != nil {
		return x.PhraseListSettings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/global.proto.
func (x *GlobalSettings) GetTtsSettings() *TtsSettings {
	if x != nil {
		return x.TtsSettings
	}
	return nil
}

var File_lumenvox_api_global_proto protoreflect.FileDescriptor

var file_lumenvox_api_global_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2,
	0x0b, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x1b, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x17, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x50,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x67, 0x0a, 0x1b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x60,
	0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x42, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x70, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x70, 0x61,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x6d, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6d,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x6d, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5e, 0x0a, 0x16,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a, 0x0a, 0x10,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x9c, 0x03, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x5a, 0x0a, 0x12, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x18, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x1a, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x19,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x12, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x48, 0x0a, 0x0b, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x18, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc2, 0x03,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x1d, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x25, 0x0a,
	0x1d, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x1f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a,
	0x15, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x41, 0x44, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x15,
	0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x50, 0x41, 0x10, 0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4d, 0x44, 0x10, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x27, 0x0a, 0x1f, 0x47, 0x45,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x09, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x1d, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x1a, 0x02,
	0x08, 0x01, 0x22, 0xc4, 0x07, 0x0a, 0x0e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x58, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x5e, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x76, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x70, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x70, 0x61, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x70, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x6d, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6d, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x61, 0x6d, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x56, 0x0a, 0x14, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x12, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x74, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x90, 0x01, 0x0a, 0x0c, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0b, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f,
	0x78, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74, 0x2f, 0x64,
	0x65, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56, 0x4f, 0x50,
	0xaa, 0x02, 0x13, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70, 0x69, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0xca, 0x02, 0x13, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f,
	0x78, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_global_proto_rawDescOnce sync.Once
	file_lumenvox_api_global_proto_rawDescData = file_lumenvox_api_global_proto_rawDesc
)

func file_lumenvox_api_global_proto_rawDescGZIP() []byte {
	file_lumenvox_api_global_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_global_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_global_proto_rawDescData)
	})
	return file_lumenvox_api_global_proto_rawDescData
}

var file_lumenvox_api_global_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lumenvox_api_global_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_lumenvox_api_global_proto_goTypes = []interface{}{
	(GlobalGetSettingsRequest_GetSettingsType)(0), // 0: lumenvox.api.GlobalGetSettingsRequest.GetSettingsType
	(*GlobalRequest)(nil),                         // 1: lumenvox.api.GlobalRequest
	(*GlobalResponse)(nil),                        // 2: lumenvox.api.GlobalResponse
	(*GlobalLoadGrammarRequest)(nil),              // 3: lumenvox.api.GlobalLoadGrammarRequest
	(*GlobalLoadGrammarResponse)(nil),             // 4: lumenvox.api.GlobalLoadGrammarResponse
	(*GlobalLoadPhraseList)(nil),                  // 5: lumenvox.api.GlobalLoadPhraseList
	(*GlobalLoadPhraseListResponse)(nil),          // 6: lumenvox.api.GlobalLoadPhraseListResponse
	(*GlobalEvent)(nil),                           // 7: lumenvox.api.GlobalEvent
	(*GlobalGetSettingsRequest)(nil),              // 8: lumenvox.api.GlobalGetSettingsRequest
	(*GlobalSettings)(nil),                        // 9: lumenvox.api.GlobalSettings
	(*OptionalString)(nil),                        // 10: lumenvox.api.OptionalString
	(*SessionSettings)(nil),                       // 11: lumenvox.api.SessionSettings
	(*InteractionSettings)(nil),                   // 12: lumenvox.api.InteractionSettings
	(*GrammarSettings)(nil),                       // 13: lumenvox.api.GrammarSettings
	(*RecognitionSettings)(nil),                   // 14: lumenvox.api.RecognitionSettings
	(*NormalizationSettings)(nil),                 // 15: lumenvox.api.NormalizationSettings
	(*VadSettings)(nil),                           // 16: lumenvox.api.VadSettings
	(*CpaSettings)(nil),                           // 17: lumenvox.api.CpaSettings
	(*AmdSettings)(nil),                           // 18: lumenvox.api.AmdSettings
	(*AudioConsumeSettings)(nil),                  // 19: lumenvox.api.AudioConsumeSettings
	(*LoggingSettings)(nil),                       // 20: lumenvox.api.LoggingSettings
	(*PhraseListSettings)(nil),                    // 21: lumenvox.api.PhraseListSettings
	(*ResetSettings)(nil),                         // 22: lumenvox.api.ResetSettings
	(*status.Status)(nil),                         // 23: google.rpc.Status
	(GrammarMode)(0),                              // 24: lumenvox.api.GrammarMode
	(*TtsSettings)(nil),                           // 25: lumenvox.api.TtsSettings
}
var file_lumenvox_api_global_proto_depIdxs = []int32{
	10, // 0: lumenvox.api.GlobalRequest.correlation_id:type_name -> lumenvox.api.OptionalString
	3,  // 1: lumenvox.api.GlobalRequest.global_load_grammar_request:type_name -> lumenvox.api.GlobalLoadGrammarRequest
	5,  // 2: lumenvox.api.GlobalRequest.global_load_phrase_list:type_name -> lumenvox.api.GlobalLoadPhraseList
	8,  // 3: lumenvox.api.GlobalRequest.global_get_settings_request:type_name -> lumenvox.api.GlobalGetSettingsRequest
	11, // 4: lumenvox.api.GlobalRequest.session_settings:type_name -> lumenvox.api.SessionSettings
	12, // 5: lumenvox.api.GlobalRequest.interaction_settings:type_name -> lumenvox.api.InteractionSettings
	13, // 6: lumenvox.api.GlobalRequest.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	14, // 7: lumenvox.api.GlobalRequest.recognition_settings:type_name -> lumenvox.api.RecognitionSettings
	15, // 8: lumenvox.api.GlobalRequest.normalization_settings:type_name -> lumenvox.api.NormalizationSettings
	16, // 9: lumenvox.api.GlobalRequest.vad_settings:type_name -> lumenvox.api.VadSettings
	17, // 10: lumenvox.api.GlobalRequest.cpa_settings:type_name -> lumenvox.api.CpaSettings
	18, // 11: lumenvox.api.GlobalRequest.amd_settings:type_name -> lumenvox.api.AmdSettings
	19, // 12: lumenvox.api.GlobalRequest.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	20, // 13: lumenvox.api.GlobalRequest.logging_settings:type_name -> lumenvox.api.LoggingSettings
	21, // 14: lumenvox.api.GlobalRequest.phrase_list_settings:type_name -> lumenvox.api.PhraseListSettings
	22, // 15: lumenvox.api.GlobalRequest.reset_settings:type_name -> lumenvox.api.ResetSettings
	10, // 16: lumenvox.api.GlobalResponse.correlation_id:type_name -> lumenvox.api.OptionalString
	7,  // 17: lumenvox.api.GlobalResponse.global_event:type_name -> lumenvox.api.GlobalEvent
	9,  // 18: lumenvox.api.GlobalResponse.global_settings:type_name -> lumenvox.api.GlobalSettings
	4,  // 19: lumenvox.api.GlobalResponse.global_grammar:type_name -> lumenvox.api.GlobalLoadGrammarResponse
	6,  // 20: lumenvox.api.GlobalResponse.global_phrase_list:type_name -> lumenvox.api.GlobalLoadPhraseListResponse
	13, // 21: lumenvox.api.GlobalLoadGrammarRequest.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	23, // 22: lumenvox.api.GlobalLoadGrammarResponse.status:type_name -> google.rpc.Status
	24, // 23: lumenvox.api.GlobalLoadGrammarResponse.mode:type_name -> lumenvox.api.GrammarMode
	21, // 24: lumenvox.api.GlobalLoadPhraseList.phrase_list_settings:type_name -> lumenvox.api.PhraseListSettings
	23, // 25: lumenvox.api.GlobalLoadPhraseListResponse.status:type_name -> google.rpc.Status
	23, // 26: lumenvox.api.GlobalEvent.status_message:type_name -> google.rpc.Status
	0,  // 27: lumenvox.api.GlobalGetSettingsRequest.settings_type:type_name -> lumenvox.api.GlobalGetSettingsRequest.GetSettingsType
	11, // 28: lumenvox.api.GlobalSettings.session_settings:type_name -> lumenvox.api.SessionSettings
	12, // 29: lumenvox.api.GlobalSettings.interaction_settings:type_name -> lumenvox.api.InteractionSettings
	13, // 30: lumenvox.api.GlobalSettings.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	14, // 31: lumenvox.api.GlobalSettings.recognition_settings:type_name -> lumenvox.api.RecognitionSettings
	15, // 32: lumenvox.api.GlobalSettings.normalization_settings:type_name -> lumenvox.api.NormalizationSettings
	16, // 33: lumenvox.api.GlobalSettings.vad_settings:type_name -> lumenvox.api.VadSettings
	17, // 34: lumenvox.api.GlobalSettings.cpa_settings:type_name -> lumenvox.api.CpaSettings
	18, // 35: lumenvox.api.GlobalSettings.amd_settings:type_name -> lumenvox.api.AmdSettings
	19, // 36: lumenvox.api.GlobalSettings.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	20, // 37: lumenvox.api.GlobalSettings.logging_settings:type_name -> lumenvox.api.LoggingSettings
	21, // 38: lumenvox.api.GlobalSettings.phrase_list_settings:type_name -> lumenvox.api.PhraseListSettings
	25, // 39: lumenvox.api.GlobalSettings.tts_settings:type_name -> lumenvox.api.TtsSettings
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_lumenvox_api_global_proto_init() }
func file_lumenvox_api_global_proto_init() {
	if File_lumenvox_api_global_proto != nil {
		return
	}
	file_lumenvox_api_common_proto_init()
	file_lumenvox_api_optional_values_proto_init()
	file_lumenvox_api_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_global_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalLoadGrammarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalLoadGrammarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalLoadPhraseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalLoadPhraseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalGetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_global_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_global_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GlobalRequest_GlobalLoadGrammarRequest)(nil),
		(*GlobalRequest_GlobalLoadPhraseList)(nil),
		(*GlobalRequest_GlobalGetSettingsRequest)(nil),
		(*GlobalRequest_SessionSettings)(nil),
		(*GlobalRequest_InteractionSettings)(nil),
		(*GlobalRequest_GrammarSettings)(nil),
		(*GlobalRequest_RecognitionSettings)(nil),
		(*GlobalRequest_NormalizationSettings)(nil),
		(*GlobalRequest_VadSettings)(nil),
		(*GlobalRequest_CpaSettings)(nil),
		(*GlobalRequest_AmdSettings)(nil),
		(*GlobalRequest_AudioConsumeSettings)(nil),
		(*GlobalRequest_LoggingSettings)(nil),
		(*GlobalRequest_PhraseListSettings)(nil),
		(*GlobalRequest_ResetSettings)(nil),
	}
	file_lumenvox_api_global_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GlobalResponse_GlobalEvent)(nil),
		(*GlobalResponse_GlobalSettings)(nil),
		(*GlobalResponse_GlobalGrammar)(nil),
		(*GlobalResponse_GlobalPhraseList)(nil),
	}
	file_lumenvox_api_global_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GlobalLoadGrammarRequest_GrammarUrl)(nil),
		(*GlobalLoadGrammarRequest_InlineGrammarText)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_global_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_global_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_global_proto_depIdxs,
		EnumInfos:         file_lumenvox_api_global_proto_enumTypes,
		MessageInfos:      file_lumenvox_api_global_proto_msgTypes,
	}.Build()
	File_lumenvox_api_global_proto = out.File
	file_lumenvox_api_global_proto_rawDesc = nil
	file_lumenvox_api_global_proto_goTypes = nil
	file_lumenvox_api_global_proto_depIdxs = nil
}
