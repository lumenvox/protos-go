// Protocol Buffer File
// This is the gRPC definition for Settings messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/settings.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GrammarSettings_TagFormat int32

const (
	GrammarSettings_TAG_FORMAT_UNSPECIFIED GrammarSettings_TagFormat = 0
	// lumenvox/1.0 tag format
	GrammarSettings_TAG_FORMAT_LUMENVOX_1 GrammarSettings_TagFormat = 1
	// semantics/1.0 tag format
	GrammarSettings_TAG_FORMAT_SEMANTICS_1 GrammarSettings_TagFormat = 2
	// semantics/1.0-literals tag format
	GrammarSettings_TAG_FORMAT_SEMANTICS_1_LITERALS GrammarSettings_TagFormat = 3
	// semantics/1.0.2006 tag format
	GrammarSettings_TAG_FORMAT_SEMANTICS_1_2006 GrammarSettings_TagFormat = 4
	// semantics/1.0.2006-literals tag format
	GrammarSettings_TAG_FORMAT_SEMANTICS_1_2006_LITERALS GrammarSettings_TagFormat = 5
)

// Enum value maps for GrammarSettings_TagFormat.
var (
	GrammarSettings_TagFormat_name = map[int32]string{
		0: "TAG_FORMAT_UNSPECIFIED",
		1: "TAG_FORMAT_LUMENVOX_1",
		2: "TAG_FORMAT_SEMANTICS_1",
		3: "TAG_FORMAT_SEMANTICS_1_LITERALS",
		4: "TAG_FORMAT_SEMANTICS_1_2006",
		5: "TAG_FORMAT_SEMANTICS_1_2006_LITERALS",
	}
	GrammarSettings_TagFormat_value = map[string]int32{
		"TAG_FORMAT_UNSPECIFIED":               0,
		"TAG_FORMAT_LUMENVOX_1":                1,
		"TAG_FORMAT_SEMANTICS_1":               2,
		"TAG_FORMAT_SEMANTICS_1_LITERALS":      3,
		"TAG_FORMAT_SEMANTICS_1_2006":          4,
		"TAG_FORMAT_SEMANTICS_1_2006_LITERALS": 5,
	}
)

func (x GrammarSettings_TagFormat) Enum() *GrammarSettings_TagFormat {
	p := new(GrammarSettings_TagFormat)
	*p = x
	return p
}

func (x GrammarSettings_TagFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrammarSettings_TagFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[0].Descriptor()
}

func (GrammarSettings_TagFormat) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[0]
}

func (x GrammarSettings_TagFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrammarSettings_TagFormat.Descriptor instead.
func (GrammarSettings_TagFormat) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{3, 0}
}

type NluSettings_DetectOutcomeType int32

const (
	// Not used - indicates no request type was specified
	NluSettings_UNDEFINED NluSettings_DetectOutcomeType = 0
	// Detects if a payment was successfully made
	NluSettings_PAYMENT NluSettings_DetectOutcomeType = 1
	// Detects whether the call was successfully resolved
	NluSettings_SUCCESSFUL NluSettings_DetectOutcomeType = 2
)

// Enum value maps for NluSettings_DetectOutcomeType.
var (
	NluSettings_DetectOutcomeType_name = map[int32]string{
		0: "UNDEFINED",
		1: "PAYMENT",
		2: "SUCCESSFUL",
	}
	NluSettings_DetectOutcomeType_value = map[string]int32{
		"UNDEFINED":  0,
		"PAYMENT":    1,
		"SUCCESSFUL": 2,
	}
)

func (x NluSettings_DetectOutcomeType) Enum() *NluSettings_DetectOutcomeType {
	p := new(NluSettings_DetectOutcomeType)
	*p = x
	return p
}

func (x NluSettings_DetectOutcomeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NluSettings_DetectOutcomeType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[1].Descriptor()
}

func (NluSettings_DetectOutcomeType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[1]
}

func (x NluSettings_DetectOutcomeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NluSettings_DetectOutcomeType.Descriptor instead.
func (NluSettings_DetectOutcomeType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{6, 0}
}

type VadSettings_NoiseReductionMode int32

const (
	// No change to setting
	VadSettings_NOISE_REDUCTION_MODE_UNSPECIFIED VadSettings_NoiseReductionMode = 0
	// Noise reduction disabled
	VadSettings_NOISE_REDUCTION_MODE_DISABLED VadSettings_NoiseReductionMode = 1
	// Default (recommended) noise reduction algorithm is enabled.
	VadSettings_NOISE_REDUCTION_MODE_DEFAULT VadSettings_NoiseReductionMode = 2
	// Alternate noise reduction algorithm. Similar to default, but we have
	// seen varied results based on differing noise types and levels.
	VadSettings_NOISE_REDUCTION_MODE_ALTERNATE VadSettings_NoiseReductionMode = 3
	// Uses an adaptive noise reduction algorithm that is most suited to
	// varying levels of background noise, such as changing car noise, etc.
	VadSettings_NOISE_REDUCTION_MODE_ADAPTIVE VadSettings_NoiseReductionMode = 4
)

// Enum value maps for VadSettings_NoiseReductionMode.
var (
	VadSettings_NoiseReductionMode_name = map[int32]string{
		0: "NOISE_REDUCTION_MODE_UNSPECIFIED",
		1: "NOISE_REDUCTION_MODE_DISABLED",
		2: "NOISE_REDUCTION_MODE_DEFAULT",
		3: "NOISE_REDUCTION_MODE_ALTERNATE",
		4: "NOISE_REDUCTION_MODE_ADAPTIVE",
	}
	VadSettings_NoiseReductionMode_value = map[string]int32{
		"NOISE_REDUCTION_MODE_UNSPECIFIED": 0,
		"NOISE_REDUCTION_MODE_DISABLED":    1,
		"NOISE_REDUCTION_MODE_DEFAULT":     2,
		"NOISE_REDUCTION_MODE_ALTERNATE":   3,
		"NOISE_REDUCTION_MODE_ADAPTIVE":    4,
	}
)

func (x VadSettings_NoiseReductionMode) Enum() *VadSettings_NoiseReductionMode {
	p := new(VadSettings_NoiseReductionMode)
	*p = x
	return p
}

func (x VadSettings_NoiseReductionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VadSettings_NoiseReductionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[2].Descriptor()
}

func (VadSettings_NoiseReductionMode) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[2]
}

func (x VadSettings_NoiseReductionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VadSettings_NoiseReductionMode.Descriptor instead.
func (VadSettings_NoiseReductionMode) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{7, 0}
}

type AudioConsumeSettings_AudioConsumeMode int32

const (
	// No mode specified
	AudioConsumeSettings_AUDIO_CONSUME_MODE_UNSPECIFIED AudioConsumeSettings_AudioConsumeMode = 0
	// Specify streaming mode is used
	AudioConsumeSettings_AUDIO_CONSUME_MODE_STREAMING AudioConsumeSettings_AudioConsumeMode = 1
	// Specify batch mode is used
	AudioConsumeSettings_AUDIO_CONSUME_MODE_BATCH AudioConsumeSettings_AudioConsumeMode = 2
)

// Enum value maps for AudioConsumeSettings_AudioConsumeMode.
var (
	AudioConsumeSettings_AudioConsumeMode_name = map[int32]string{
		0: "AUDIO_CONSUME_MODE_UNSPECIFIED",
		1: "AUDIO_CONSUME_MODE_STREAMING",
		2: "AUDIO_CONSUME_MODE_BATCH",
	}
	AudioConsumeSettings_AudioConsumeMode_value = map[string]int32{
		"AUDIO_CONSUME_MODE_UNSPECIFIED": 0,
		"AUDIO_CONSUME_MODE_STREAMING":   1,
		"AUDIO_CONSUME_MODE_BATCH":       2,
	}
)

func (x AudioConsumeSettings_AudioConsumeMode) Enum() *AudioConsumeSettings_AudioConsumeMode {
	p := new(AudioConsumeSettings_AudioConsumeMode)
	*p = x
	return p
}

func (x AudioConsumeSettings_AudioConsumeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConsumeSettings_AudioConsumeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[3].Descriptor()
}

func (AudioConsumeSettings_AudioConsumeMode) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[3]
}

func (x AudioConsumeSettings_AudioConsumeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConsumeSettings_AudioConsumeMode.Descriptor instead.
func (AudioConsumeSettings_AudioConsumeMode) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{11, 0}
}

// Only used when AUDIO_CONSUME_MODE_STREAMING is used
type AudioConsumeSettings_StreamStartLocation int32

const (
	// No location specified
	AudioConsumeSettings_STREAM_START_LOCATION_UNSPECIFIED AudioConsumeSettings_StreamStartLocation = 0
	// Start processing from the beginning of the stream.
	//
	// Note: Only valid option for AUDIO_CONSUME_MODE_BATCH
	AudioConsumeSettings_STREAM_START_LOCATION_STREAM_BEGIN AudioConsumeSettings_StreamStartLocation = 1
	// Start processing from the audio streamed after the API call
	// InteractionBeginProcessing() was made.
	//
	// Note: Not valid for AUDIO_CONSUME_MODE_BATCH
	AudioConsumeSettings_STREAM_START_LOCATION_BEGIN_PROCESSING_CALL AudioConsumeSettings_StreamStartLocation = 2
	// Start processing from the audio streamed after the interaction was
	// created.
	//
	// Note: Not valid for AUDIO_CONSUME_MODE_BATCH
	AudioConsumeSettings_STREAM_START_LOCATION_INTERACTION_CREATED AudioConsumeSettings_StreamStartLocation = 3
)

// Enum value maps for AudioConsumeSettings_StreamStartLocation.
var (
	AudioConsumeSettings_StreamStartLocation_name = map[int32]string{
		0: "STREAM_START_LOCATION_UNSPECIFIED",
		1: "STREAM_START_LOCATION_STREAM_BEGIN",
		2: "STREAM_START_LOCATION_BEGIN_PROCESSING_CALL",
		3: "STREAM_START_LOCATION_INTERACTION_CREATED",
	}
	AudioConsumeSettings_StreamStartLocation_value = map[string]int32{
		"STREAM_START_LOCATION_UNSPECIFIED":           0,
		"STREAM_START_LOCATION_STREAM_BEGIN":          1,
		"STREAM_START_LOCATION_BEGIN_PROCESSING_CALL": 2,
		"STREAM_START_LOCATION_INTERACTION_CREATED":   3,
	}
)

func (x AudioConsumeSettings_StreamStartLocation) Enum() *AudioConsumeSettings_StreamStartLocation {
	p := new(AudioConsumeSettings_StreamStartLocation)
	*p = x
	return p
}

func (x AudioConsumeSettings_StreamStartLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConsumeSettings_StreamStartLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[4].Descriptor()
}

func (AudioConsumeSettings_StreamStartLocation) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[4]
}

func (x AudioConsumeSettings_StreamStartLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConsumeSettings_StreamStartLocation.Descriptor instead.
func (AudioConsumeSettings_StreamStartLocation) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{11, 1}
}

type LoggingSettings_LoggingVerbosity int32

const (
	// Logging verbosity is not specified
	LoggingSettings_LOGGING_VERBOSITY_UNSPECIFIED LoggingSettings_LoggingVerbosity = 0
	// Internal system events that are not usually observable
	LoggingSettings_LOGGING_VERBOSITY_DEBUG LoggingSettings_LoggingVerbosity = 1
	// Routine logging, such as ongoing status or performance
	LoggingSettings_LOGGING_VERBOSITY_INFO LoggingSettings_LoggingVerbosity = 2
	// Warnings and above only - service degradation or danger
	LoggingSettings_LOGGING_VERBOSITY_WARNING LoggingSettings_LoggingVerbosity = 3
	// Functionality is unavailable, invariants are broken, or data is lost
	LoggingSettings_LOGGING_VERBOSITY_ERROR LoggingSettings_LoggingVerbosity = 4
	// Only log exceptions and critical errors (not recommended)
	LoggingSettings_LOGGING_VERBOSITY_CRITICAL LoggingSettings_LoggingVerbosity = 5
)

// Enum value maps for LoggingSettings_LoggingVerbosity.
var (
	LoggingSettings_LoggingVerbosity_name = map[int32]string{
		0: "LOGGING_VERBOSITY_UNSPECIFIED",
		1: "LOGGING_VERBOSITY_DEBUG",
		2: "LOGGING_VERBOSITY_INFO",
		3: "LOGGING_VERBOSITY_WARNING",
		4: "LOGGING_VERBOSITY_ERROR",
		5: "LOGGING_VERBOSITY_CRITICAL",
	}
	LoggingSettings_LoggingVerbosity_value = map[string]int32{
		"LOGGING_VERBOSITY_UNSPECIFIED": 0,
		"LOGGING_VERBOSITY_DEBUG":       1,
		"LOGGING_VERBOSITY_INFO":        2,
		"LOGGING_VERBOSITY_WARNING":     3,
		"LOGGING_VERBOSITY_ERROR":       4,
		"LOGGING_VERBOSITY_CRITICAL":    5,
	}
)

func (x LoggingSettings_LoggingVerbosity) Enum() *LoggingSettings_LoggingVerbosity {
	p := new(LoggingSettings_LoggingVerbosity)
	*p = x
	return p
}

func (x LoggingSettings_LoggingVerbosity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingSettings_LoggingVerbosity) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_settings_proto_enumTypes[5].Descriptor()
}

func (LoggingSettings_LoggingVerbosity) Type() protoreflect.EnumType {
	return &file_lumenvox_api_settings_proto_enumTypes[5]
}

func (x LoggingSettings_LoggingVerbosity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingSettings_LoggingVerbosity.Descriptor instead.
func (LoggingSettings_LoggingVerbosity) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{15, 0}
}

// Optional settings to be used for the duration of a session for all
// interactions created within the session.
//
// # These can be overridden at the interaction level
//
// All settings are optional, not specifying a setting at any level means the
// default or parent context's value will be used. As a rule, only settings
// that need to be changed from default should be set explicitly
type SessionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the session data should be archived when closed, for tuning and
	// other diagnostic purposes
	// Default: false
	ArchiveSession *OptionalBool `protobuf:"bytes,1,opt,name=archive_session,json=archiveSession,proto3" json:"archive_session,omitempty"`
	// Optional data (i.e. could be string, JSON, delimited lists, etc.) set by
	// user, for external purposes. Not used by LumenVox
	CustomSessionData *OptionalString `protobuf:"bytes,2,opt,name=custom_session_data,json=customSessionData,proto3" json:"custom_session_data,omitempty"`
	// Optional settings to be used for duration of session for all interactions
	// created. These can be over-ridden at the interaction level
	InteractionSettings *InteractionSettings `protobuf:"bytes,3,opt,name=interaction_settings,json=interactionSettings,proto3" json:"interaction_settings,omitempty"`
	// Optional call identifier sting used for CDR tracking. This is often
	// associated with the telephony call-id value or equivalent.
	CallId *OptionalString `protobuf:"bytes,4,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	// Optional channel identifier sting used for CDR tracking. This is often
	// associated with a telephony/MRCP channel SDP value or equivalent.
	ChannelId []*OptionalString `protobuf:"bytes,5,rep,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Optional delay interval for archiving in seconds
	// Session data will persist more in redis before being written to database
	ArchiveSessionDelaySeconds *OptionalInt32 `protobuf:"bytes,6,opt,name=archive_session_delay_seconds,json=archiveSessionDelaySeconds,proto3" json:"archive_session_delay_seconds,omitempty"`
	// Optional tag for logging. Reserved for future use.
	LoggingTag []*OptionalString `protobuf:"bytes,7,rep,name=logging_tag,json=loggingTag,proto3" json:"logging_tag,omitempty"`
}

func (x *SessionSettings) Reset() {
	*x = SessionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionSettings) ProtoMessage() {}

func (x *SessionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionSettings.ProtoReflect.Descriptor instead.
func (*SessionSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{0}
}

func (x *SessionSettings) GetArchiveSession() *OptionalBool {
	if x != nil {
		return x.ArchiveSession
	}
	return nil
}

func (x *SessionSettings) GetCustomSessionData() *OptionalString {
	if x != nil {
		return x.CustomSessionData
	}
	return nil
}

func (x *SessionSettings) GetInteractionSettings() *InteractionSettings {
	if x != nil {
		return x.InteractionSettings
	}
	return nil
}

func (x *SessionSettings) GetCallId() *OptionalString {
	if x != nil {
		return x.CallId
	}
	return nil
}

func (x *SessionSettings) GetChannelId() []*OptionalString {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *SessionSettings) GetArchiveSessionDelaySeconds() *OptionalInt32 {
	if x != nil {
		return x.ArchiveSessionDelaySeconds
	}
	return nil
}

func (x *SessionSettings) GetLoggingTag() []*OptionalString {
	if x != nil {
		return x.LoggingTag
	}
	return nil
}

// Describes the interaction specific settings
type InteractionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional settings related to all interactions
	GeneralInteractionSettings *GeneralInteractionSettings `protobuf:"bytes,1,opt,name=general_interaction_settings,json=generalInteractionSettings,proto3" json:"general_interaction_settings,omitempty"`
	// Optional settings defining how audio is consumed/used by the interaction
	AudioConsumeSettings *AudioConsumeSettings `protobuf:"bytes,3,opt,name=audio_consume_settings,json=audioConsumeSettings,proto3" json:"audio_consume_settings,omitempty"`
	// Optional Voice Activity Detection settings for interaction
	VadSettings *VadSettings `protobuf:"bytes,4,opt,name=vad_settings,json=vadSettings,proto3" json:"vad_settings,omitempty"`
	// Optional grammar settings for interaction
	GrammarSettings *GrammarSettings `protobuf:"bytes,5,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
	// Optional recognition settings for interaction
	RecognitionSettings *RecognitionSettings `protobuf:"bytes,6,opt,name=recognition_settings,json=recognitionSettings,proto3" json:"recognition_settings,omitempty"`
	// Optional Call Progress Analysis settings for interaction
	CpaSettings *CpaSettings `protobuf:"bytes,7,opt,name=cpa_settings,json=cpaSettings,proto3" json:"cpa_settings,omitempty"`
	// Optional Tone Detection (AMD) settings for interaction
	AmdSettings *AmdSettings `protobuf:"bytes,8,opt,name=amd_settings,json=amdSettings,proto3" json:"amd_settings,omitempty"`
	// Optional settings specifying which text normalization steps should be
	// performed on output of interaction.
	NormalizationSettings *NormalizationSettings `protobuf:"bytes,10,opt,name=normalization_settings,json=normalizationSettings,proto3" json:"normalization_settings,omitempty"`
	// Optional settings specifying boost options for phrases
	PhraseListSettings *PhraseListSettings `protobuf:"bytes,11,opt,name=phrase_list_settings,json=phraseListSettings,proto3" json:"phrase_list_settings,omitempty"`
	// Optional settings for Text-To-Speech (TTS)
	TtsSettings *TtsSettings `protobuf:"bytes,12,opt,name=tts_settings,json=ttsSettings,proto3" json:"tts_settings,omitempty"`
}

func (x *InteractionSettings) Reset() {
	*x = InteractionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionSettings) ProtoMessage() {}

func (x *InteractionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionSettings.ProtoReflect.Descriptor instead.
func (*InteractionSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{1}
}

func (x *InteractionSettings) GetGeneralInteractionSettings() *GeneralInteractionSettings {
	if x != nil {
		return x.GeneralInteractionSettings
	}
	return nil
}

func (x *InteractionSettings) GetAudioConsumeSettings() *AudioConsumeSettings {
	if x != nil {
		return x.AudioConsumeSettings
	}
	return nil
}

func (x *InteractionSettings) GetVadSettings() *VadSettings {
	if x != nil {
		return x.VadSettings
	}
	return nil
}

func (x *InteractionSettings) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

func (x *InteractionSettings) GetRecognitionSettings() *RecognitionSettings {
	if x != nil {
		return x.RecognitionSettings
	}
	return nil
}

func (x *InteractionSettings) GetCpaSettings() *CpaSettings {
	if x != nil {
		return x.CpaSettings
	}
	return nil
}

func (x *InteractionSettings) GetAmdSettings() *AmdSettings {
	if x != nil {
		return x.AmdSettings
	}
	return nil
}

func (x *InteractionSettings) GetNormalizationSettings() *NormalizationSettings {
	if x != nil {
		return x.NormalizationSettings
	}
	return nil
}

func (x *InteractionSettings) GetPhraseListSettings() *PhraseListSettings {
	if x != nil {
		return x.PhraseListSettings
	}
	return nil
}

func (x *InteractionSettings) GetTtsSettings() *TtsSettings {
	if x != nil {
		return x.TtsSettings
	}
	return nil
}

// Settings that apply to all interaction types
type GeneralInteractionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When true (enabled), certain ASR and TTS data will not be logged.
	// This provides additional security for sensitive data such as account
	// numbers and passwords that may be used within applications. Anywhere
	// that potentially sensitive data would have been recorded will be replaced
	// with _SUPPRESSED in the logs.
	// Default: false
	SecureContext *OptionalBool `protobuf:"bytes,1,opt,name=secure_context,json=secureContext,proto3" json:"secure_context,omitempty"`
	// Optional data (i.e. could be string, JSON, delimited lists, etc.) set by
	// user, for external purposes. Not used by LumenVox
	CustomInteractionData *OptionalString `protobuf:"bytes,2,opt,name=custom_interaction_data,json=customInteractionData,proto3" json:"custom_interaction_data,omitempty"`
	// Optional tag for logging. Reserved for future use.
	LoggingTag []*OptionalString `protobuf:"bytes,3,rep,name=logging_tag,json=loggingTag,proto3" json:"logging_tag,omitempty"`
}

func (x *GeneralInteractionSettings) Reset() {
	*x = GeneralInteractionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralInteractionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralInteractionSettings) ProtoMessage() {}

func (x *GeneralInteractionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralInteractionSettings.ProtoReflect.Descriptor instead.
func (*GeneralInteractionSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralInteractionSettings) GetSecureContext() *OptionalBool {
	if x != nil {
		return x.SecureContext
	}
	return nil
}

func (x *GeneralInteractionSettings) GetCustomInteractionData() *OptionalString {
	if x != nil {
		return x.CustomInteractionData
	}
	return nil
}

func (x *GeneralInteractionSettings) GetLoggingTag() []*OptionalString {
	if x != nil {
		return x.LoggingTag
	}
	return nil
}

// Settings related to SRGS grammar usage
type GrammarSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default tag-format for loaded grammars if not otherwise specified.
	// Default: TAG_FORMAT_SEMANTICS_1_2006
	DefaultTagFormat GrammarSettings_TagFormat `protobuf:"varint,1,opt,name=default_tag_format,json=defaultTagFormat,proto3,enum=lumenvox.api.GrammarSettings_TagFormat" json:"default_tag_format,omitempty"`
	// Enables or disables the verification of a peer's certificate using a local
	// certificate authority file upon HTTPS requests. Set to false (disabled) to
	// skip verification for trusted sites.
	// Default: true
	SslVerifyPeer *OptionalBool `protobuf:"bytes,2,opt,name=ssl_verify_peer,json=sslVerifyPeer,proto3" json:"ssl_verify_peer,omitempty"`
	// Maximum milliseconds to allow for grammar loading. If this is exceeded,
	// a timeout error will be raised. Range 1000-2147483647 (~600 hours)
	// Default: 200000 (~3.333 minutes)
	LoadGrammarTimeoutMs *OptionalInt32 `protobuf:"bytes,3,opt,name=load_grammar_timeout_ms,json=loadGrammarTimeoutMs,proto3" json:"load_grammar_timeout_ms,omitempty"`
	// Compatibility mode for certain media server operations. Only change from
	// the default if you understand the consequences.
	// Range: 0-1
	// Default: 0
	CompatibilityMode *OptionalInt32 `protobuf:"bytes,4,opt,name=compatibility_mode,json=compatibilityMode,proto3" json:"compatibility_mode,omitempty"`
	// Maximum grammar size permitted. If surpassed, a grammar load failure
	// will be raised.
	// Default: 0 (Unlimited)
	GrammarThreshold *OptionalInt32 `protobuf:"bytes,5,opt,name=grammar_threshold,json=grammarThreshold,proto3" json:"grammar_threshold,omitempty"`
	// Maximum number of words to parse for enhanced transcription. This does
	// not apply to legacy enhanced transcription.
	// Range: 1-
	// Default: 6
	MaxEnhancedLength *OptionalInt32 `protobuf:"bytes,6,opt,name=max_enhanced_length,json=maxEnhancedLength,proto3" json:"max_enhanced_length,omitempty"`
}

func (x *GrammarSettings) Reset() {
	*x = GrammarSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrammarSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrammarSettings) ProtoMessage() {}

func (x *GrammarSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrammarSettings.ProtoReflect.Descriptor instead.
func (*GrammarSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{3}
}

func (x *GrammarSettings) GetDefaultTagFormat() GrammarSettings_TagFormat {
	if x != nil {
		return x.DefaultTagFormat
	}
	return GrammarSettings_TAG_FORMAT_UNSPECIFIED
}

func (x *GrammarSettings) GetSslVerifyPeer() *OptionalBool {
	if x != nil {
		return x.SslVerifyPeer
	}
	return nil
}

func (x *GrammarSettings) GetLoadGrammarTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.LoadGrammarTimeoutMs
	}
	return nil
}

func (x *GrammarSettings) GetCompatibilityMode() *OptionalInt32 {
	if x != nil {
		return x.CompatibilityMode
	}
	return nil
}

func (x *GrammarSettings) GetGrammarThreshold() *OptionalInt32 {
	if x != nil {
		return x.GrammarThreshold
	}
	return nil
}

func (x *GrammarSettings) GetMaxEnhancedLength() *OptionalInt32 {
	if x != nil {
		return x.MaxEnhancedLength
	}
	return nil
}

// Settings related to recognition results
type RecognitionSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number of recognition hypotheses to be returned.
	// Specifically, the maximum number of `NBest` messages within each
	// `AsrInteractionResult`.
	// Default: 1
	MaxAlternatives *OptionalInt32 `protobuf:"bytes,1,opt,name=max_alternatives,json=maxAlternatives,proto3" json:"max_alternatives,omitempty"`
	// Controls how aggressively the ASR trims leading silence from input audio.
	// Range: 0 (very aggressive) to 1000 (no silence trimmed)
	// Default: 970
	TrimSilenceValue *OptionalInt32 `protobuf:"bytes,2,opt,name=trim_silence_value,json=trimSilenceValue,proto3" json:"trim_silence_value,omitempty"`
	// When true, partial results callbacks will be enabled for the interaction
	// Default: false
	EnablePartialResults *OptionalBool `protobuf:"bytes,3,opt,name=enable_partial_results,json=enablePartialResults,proto3" json:"enable_partial_results,omitempty"`
	// Confidence threshold. Range 0 to 1000; applies to grammar based asr interactions
	// Default: 0
	ConfidenceThreshold *OptionalInt32 `protobuf:"bytes,4,opt,name=confidence_threshold,json=confidenceThreshold,proto3" json:"confidence_threshold,omitempty"`
	// Number of milliseconds the ASR should await results before timing out
	// Possible values: 0 - 100,000,000
	// Default: 10,000,000 (~2.7 hours)
	DecodeTimeout *OptionalInt32 `protobuf:"bytes,5,opt,name=decode_timeout,json=decodeTimeout,proto3" json:"decode_timeout,omitempty"`
}

func (x *RecognitionSettings) Reset() {
	*x = RecognitionSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionSettings) ProtoMessage() {}

func (x *RecognitionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionSettings.ProtoReflect.Descriptor instead.
func (*RecognitionSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{4}
}

func (x *RecognitionSettings) GetMaxAlternatives() *OptionalInt32 {
	if x != nil {
		return x.MaxAlternatives
	}
	return nil
}

func (x *RecognitionSettings) GetTrimSilenceValue() *OptionalInt32 {
	if x != nil {
		return x.TrimSilenceValue
	}
	return nil
}

func (x *RecognitionSettings) GetEnablePartialResults() *OptionalBool {
	if x != nil {
		return x.EnablePartialResults
	}
	return nil
}

func (x *RecognitionSettings) GetConfidenceThreshold() *OptionalInt32 {
	if x != nil {
		return x.ConfidenceThreshold
	}
	return nil
}

func (x *RecognitionSettings) GetDecodeTimeout() *OptionalInt32 {
	if x != nil {
		return x.DecodeTimeout
	}
	return nil
}

// Settings related to text Normalization results
type NormalizationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true to enable inverse text normalization (going from spoken form
	// → written form (e.g. twenty two → 22)
	// Default: false
	EnableInverseText *OptionalBool `protobuf:"bytes,1,opt,name=enable_inverse_text,json=enableInverseText,proto3" json:"enable_inverse_text,omitempty"`
	// Set to true to enable punctuation and capitalization normalization
	// Default: false
	EnablePunctuationCapitalization *OptionalBool `protobuf:"bytes,2,opt,name=enable_punctuation_capitalization,json=enablePunctuationCapitalization,proto3" json:"enable_punctuation_capitalization,omitempty"`
	// Set to true to enable redaction of sensitive information
	// Default: false
	EnableRedaction *OptionalBool `protobuf:"bytes,3,opt,name=enable_redaction,json=enableRedaction,proto3" json:"enable_redaction,omitempty"`
	// Number of milliseconds text normalization should await results before timing out
	// Possible values: 0 - 1000000
	// Default: 5000
	RequestTimeoutMs *OptionalInt32 `protobuf:"bytes,4,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3" json:"request_timeout_ms,omitempty"`
	// Set to true to enable generation of SRT file (SubRip file format)
	// Default: false
	EnableSrtGeneration *OptionalBool `protobuf:"bytes,5,opt,name=enable_srt_generation,json=enableSrtGeneration,proto3" json:"enable_srt_generation,omitempty"`
	// Set to true to enable generation of VTT file (WebVTT file format)
	// Default: false
	EnableVttGeneration *OptionalBool `protobuf:"bytes,6,opt,name=enable_vtt_generation,json=enableVttGeneration,proto3" json:"enable_vtt_generation,omitempty"`
}

func (x *NormalizationSettings) Reset() {
	*x = NormalizationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizationSettings) ProtoMessage() {}

func (x *NormalizationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizationSettings.ProtoReflect.Descriptor instead.
func (*NormalizationSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{5}
}

func (x *NormalizationSettings) GetEnableInverseText() *OptionalBool {
	if x != nil {
		return x.EnableInverseText
	}
	return nil
}

func (x *NormalizationSettings) GetEnablePunctuationCapitalization() *OptionalBool {
	if x != nil {
		return x.EnablePunctuationCapitalization
	}
	return nil
}

func (x *NormalizationSettings) GetEnableRedaction() *OptionalBool {
	if x != nil {
		return x.EnableRedaction
	}
	return nil
}

func (x *NormalizationSettings) GetRequestTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.RequestTimeoutMs
	}
	return nil
}

func (x *NormalizationSettings) GetEnableSrtGeneration() *OptionalBool {
	if x != nil {
		return x.EnableSrtGeneration
	}
	return nil
}

func (x *NormalizationSettings) GetEnableVttGeneration() *OptionalBool {
	if x != nil {
		return x.EnableVttGeneration
	}
	return nil
}

// Settings related to text NLU processing
type NluSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional number of bullet points to summarize in output.
	// Range: 1-15
	// Default: 0 (no summarization bullets produced)
	SummarizationBulletPoints int32 `protobuf:"varint,10,opt,name=summarization_bullet_points,json=summarizationBulletPoints,proto3" json:"summarization_bullet_points,omitempty"`
	// Optional number of words to summarize in output.
	// Note: summarization_bullet_points and summarization_words are mutually
	// exclusive and only one these may be specified.
	// Range: 10-1000
	// Default: 0 (no summarization words produced)
	SummarizationWords int32 `protobuf:"varint,11,opt,name=summarization_words,json=summarizationWords,proto3" json:"summarization_words,omitempty"`
	// Optional language to translate from (source).
	// This can be a language specified, such as "American English", "english"
	// or "en-US"
	// Translation may be suboptimal when the source language is not specified.
	// Default: "" (auto-detect source language when translation enabled)
	TranslateFromLanguage string `protobuf:"bytes,20,opt,name=translate_from_language,json=translateFromLanguage,proto3" json:"translate_from_language,omitempty"`
	// Optional language to translate to (target).
	// This can be a language specified, such as "American English", "english"
	// or "en-US".
	// Default: "" (no translation)
	TranslateToLanguage string `protobuf:"bytes,21,opt,name=translate_to_language,json=translateToLanguage,proto3" json:"translate_to_language,omitempty"`
	// When enabled, a list of alternate translations will be added to the
	// result when possible.
	EnableAlternateTranslations bool `protobuf:"varint,22,opt,name=enable_alternate_translations,json=enableAlternateTranslations,proto3" json:"enable_alternate_translations,omitempty"`
	// When enabled, the language of the input_text will be detected, as well
	// as the dialect, where possible.
	EnableLanguageDetect bool `protobuf:"varint,30,opt,name=enable_language_detect,json=enableLanguageDetect,proto3" json:"enable_language_detect,omitempty"`
	// When enabled, the topic of the input_text will be detected
	EnableTopicDetect bool `protobuf:"varint,40,opt,name=enable_topic_detect,json=enableTopicDetect,proto3" json:"enable_topic_detect,omitempty"`
	// When enabled, the service will detect whether the specified outcome was
	// achieved, based on the input text
	DetectOutcomeType NluSettings_DetectOutcomeType `protobuf:"varint,50,opt,name=detect_outcome_type,json=detectOutcomeType,proto3,enum=lumenvox.api.NluSettings_DetectOutcomeType" json:"detect_outcome_type,omitempty"`
	// When enabled, will determine sentiment of the input_text
	EnableSentimentAnalysis bool `protobuf:"varint,60,opt,name=enable_sentiment_analysis,json=enableSentimentAnalysis,proto3" json:"enable_sentiment_analysis,omitempty"`
	// Number of milliseconds NLU processing should await results before timing out.
	// Possible values: 0 - 1000000
	// Default: 5000
	RequestTimeoutMs *OptionalInt32 `protobuf:"bytes,100,opt,name=request_timeout_ms,json=requestTimeoutMs,proto3" json:"request_timeout_ms,omitempty"`
}

func (x *NluSettings) Reset() {
	*x = NluSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NluSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NluSettings) ProtoMessage() {}

func (x *NluSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NluSettings.ProtoReflect.Descriptor instead.
func (*NluSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{6}
}

func (x *NluSettings) GetSummarizationBulletPoints() int32 {
	if x != nil {
		return x.SummarizationBulletPoints
	}
	return 0
}

func (x *NluSettings) GetSummarizationWords() int32 {
	if x != nil {
		return x.SummarizationWords
	}
	return 0
}

func (x *NluSettings) GetTranslateFromLanguage() string {
	if x != nil {
		return x.TranslateFromLanguage
	}
	return ""
}

func (x *NluSettings) GetTranslateToLanguage() string {
	if x != nil {
		return x.TranslateToLanguage
	}
	return ""
}

func (x *NluSettings) GetEnableAlternateTranslations() bool {
	if x != nil {
		return x.EnableAlternateTranslations
	}
	return false
}

func (x *NluSettings) GetEnableLanguageDetect() bool {
	if x != nil {
		return x.EnableLanguageDetect
	}
	return false
}

func (x *NluSettings) GetEnableTopicDetect() bool {
	if x != nil {
		return x.EnableTopicDetect
	}
	return false
}

func (x *NluSettings) GetDetectOutcomeType() NluSettings_DetectOutcomeType {
	if x != nil {
		return x.DetectOutcomeType
	}
	return NluSettings_UNDEFINED
}

func (x *NluSettings) GetEnableSentimentAnalysis() bool {
	if x != nil {
		return x.EnableSentimentAnalysis
	}
	return false
}

func (x *NluSettings) GetRequestTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.RequestTimeoutMs
	}
	return nil
}

// Settings related to Voice Activity Detection (VAD)
// VAD is used to begin audio processing once a person starts speaking and
// is used to detect when a person has stopped speaking
type VadSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When `false`, all audio as specified in AudioConsumeSettings is used for
	// processing.
	//
	// In streaming audio mode, InteractionFinalizeProcessing() would need be
	// called to finish processing
	//
	// When `true`, VAD is used to determine when the speaker starts and stops
	// speaking. When using VAD in batch audio mode, the engine will look for
	// speech begin within the designated audio to process and will stop
	// processing audio when end of speech is found, which may mean that all
	// audio loaded is not processed.
	UseVad *OptionalBool `protobuf:"bytes,1,opt,name=use_vad,json=useVad,proto3" json:"use_vad,omitempty"`
	// Maximum silence, in ms, allowed while waiting for user input (barge-in)
	// before a timeout is reported.
	// Range: -1 (infinite) to positive integer number of milliseconds
	// Default: -1 (infinite)
	BargeInTimeoutMs *OptionalInt32 `protobuf:"bytes,3,opt,name=barge_in_timeout_ms,json=bargeInTimeoutMs,proto3" json:"barge_in_timeout_ms,omitempty"`
	// After barge-in, STREAM_STATUS_END_SPEECH_TIMEOUT will occur if
	// end-of-speech not detected in time specified by this property.
	// This is different from the eos_delay_ms; This value represents the total
	// amount of time a caller is permitted to speak after barge-in is detected.
	// Range: a positive number of milliseconds or -1 (infinite)
	// Default: -1 (infinite)
	EndOfSpeechTimeoutMs *OptionalInt32 `protobuf:"bytes,4,opt,name=end_of_speech_timeout_ms,json=endOfSpeechTimeoutMs,proto3" json:"end_of_speech_timeout_ms,omitempty"`
	// Determines noise reduction mode.
	// Default: NOISE_REDUCTION_DEFAULT
	NoiseReductionMode VadSettings_NoiseReductionMode `protobuf:"varint,5,opt,name=noise_reduction_mode,json=noiseReductionMode,proto3,enum=lumenvox.api.VadSettings_NoiseReductionMode" json:"noise_reduction_mode,omitempty"`
	// A higher value makes the VAD more sensitive towards speech, and less
	// sensitive towards non-speech, which means that the VAD algorithm must be
	// more sure that the audio is speech before triggering barge in.
	// Raising the value will reject more false positives/noises. However, it
	// may mean that some speech that is on the borderline may be rejected. This
	// value should not be changed from the default without significant tuning
	// and verification.
	// Range: Integer value from 0 to 100
	// Default: 50
	BargeinThreshold *OptionalInt32 `protobuf:"bytes,6,opt,name=bargein_threshold,json=bargeinThreshold,proto3" json:"bargein_threshold,omitempty"`
	// Milliseconds of silence after speech before processing begins.
	// Range: A positive integer number of milliseconds
	// Default: 800
	EosDelayMs *OptionalInt32 `protobuf:"bytes,7,opt,name=eos_delay_ms,json=eosDelayMs,proto3" json:"eos_delay_ms,omitempty"`
	// Determines how much louder the speaker must be than the background noise
	// in order to trigger barge-in. The smaller this value, the easier it will
	// be to trigger barge-in.
	// Range: Integer range from 0 to 100
	// Default: 50
	SnrSensitivity *OptionalInt32 `protobuf:"bytes,8,opt,name=snr_sensitivity,json=snrSensitivity,proto3" json:"snr_sensitivity,omitempty"`
	// Accurate VAD depends on a good estimation of the acoustic environment. The
	// VAD module uses the first couple frames of audio to estimate the acoustic
	// environment, such as noise level. The length of this period is defined by
	// this parameter.
	// Range: A positive integer number of milliseconds.
	// Default: 100
	StreamInitDelay *OptionalInt32 `protobuf:"bytes,9,opt,name=stream_init_delay,json=streamInitDelay,proto3" json:"stream_init_delay,omitempty"`
	// The volume required to trigger barge-in. The smaller the value, the more
	// sensitive barge-in will be. This is primarily used to deal with poor echo
	// cancellation. By setting this value higher (less sensitive) prompts that
	// are not properly cancelled will be less likely to falsely cancel barge-in.
	// Range: Integer range from 0 to 100
	// Default: 50
	VolumeSensitivity *OptionalInt32 `protobuf:"bytes,10,opt,name=volume_sensitivity,json=volumeSensitivity,proto3" json:"volume_sensitivity,omitempty"`
	// The length of audio to be wound back at the beginning of voice activity.
	// This is used primarily to counter instances where barge-in does not
	// accurately capture the very start of speech. The resolution of this
	// parameter is 1/8 of a second.
	// Range: A positive integer number of milliseconds
	// Default: 480
	WindBackMs *OptionalInt32 `protobuf:"bytes,11,opt,name=wind_back_ms,json=windBackMs,proto3" json:"wind_back_ms,omitempty"`
}

func (x *VadSettings) Reset() {
	*x = VadSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VadSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VadSettings) ProtoMessage() {}

func (x *VadSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VadSettings.ProtoReflect.Descriptor instead.
func (*VadSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{7}
}

func (x *VadSettings) GetUseVad() *OptionalBool {
	if x != nil {
		return x.UseVad
	}
	return nil
}

func (x *VadSettings) GetBargeInTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.BargeInTimeoutMs
	}
	return nil
}

func (x *VadSettings) GetEndOfSpeechTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.EndOfSpeechTimeoutMs
	}
	return nil
}

func (x *VadSettings) GetNoiseReductionMode() VadSettings_NoiseReductionMode {
	if x != nil {
		return x.NoiseReductionMode
	}
	return VadSettings_NOISE_REDUCTION_MODE_UNSPECIFIED
}

func (x *VadSettings) GetBargeinThreshold() *OptionalInt32 {
	if x != nil {
		return x.BargeinThreshold
	}
	return nil
}

func (x *VadSettings) GetEosDelayMs() *OptionalInt32 {
	if x != nil {
		return x.EosDelayMs
	}
	return nil
}

func (x *VadSettings) GetSnrSensitivity() *OptionalInt32 {
	if x != nil {
		return x.SnrSensitivity
	}
	return nil
}

func (x *VadSettings) GetStreamInitDelay() *OptionalInt32 {
	if x != nil {
		return x.StreamInitDelay
	}
	return nil
}

func (x *VadSettings) GetVolumeSensitivity() *OptionalInt32 {
	if x != nil {
		return x.VolumeSensitivity
	}
	return nil
}

func (x *VadSettings) GetWindBackMs() *OptionalInt32 {
	if x != nil {
		return x.WindBackMs
	}
	return nil
}

// Settings related to Call Progress Analysis
type CpaSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum amount of speech for human residence classification
	// Default: 1800
	HumanResidenceTimeMs *OptionalInt32 `protobuf:"bytes,1,opt,name=human_residence_time_ms,json=humanResidenceTimeMs,proto3" json:"human_residence_time_ms,omitempty"`
	// Maximum amount of speech for human business classification. Human
	// speech lasting longer than this will be classified as unknown speech
	// Default: 3000
	HumanBusinessTimeMs *OptionalInt32 `protobuf:"bytes,2,opt,name=human_business_time_ms,json=humanBusinessTimeMs,proto3" json:"human_business_time_ms,omitempty"`
	// Maximum amount of silence to allow before human speech is detected. If
	// This timeout is reached, the classification will be returned as unknown
	// silence.
	// Default: 5000
	UnknownSilenceTimeoutMs *OptionalInt32 `protobuf:"bytes,3,opt,name=unknown_silence_timeout_ms,json=unknownSilenceTimeoutMs,proto3" json:"unknown_silence_timeout_ms,omitempty"`
	// Maximum amount of time the CPA algorithm is allowed to perform human or
	// machine classification.
	// Only use this if you understand the implications (lower accuracy).
	// Default: 0 (disabled)
	MaxTimeFromConnectMs *OptionalInt32 `protobuf:"bytes,4,opt,name=max_time_from_connect_ms,json=maxTimeFromConnectMs,proto3" json:"max_time_from_connect_ms,omitempty"`
}

func (x *CpaSettings) Reset() {
	*x = CpaSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpaSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpaSettings) ProtoMessage() {}

func (x *CpaSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpaSettings.ProtoReflect.Descriptor instead.
func (*CpaSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{8}
}

func (x *CpaSettings) GetHumanResidenceTimeMs() *OptionalInt32 {
	if x != nil {
		return x.HumanResidenceTimeMs
	}
	return nil
}

func (x *CpaSettings) GetHumanBusinessTimeMs() *OptionalInt32 {
	if x != nil {
		return x.HumanBusinessTimeMs
	}
	return nil
}

func (x *CpaSettings) GetUnknownSilenceTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.UnknownSilenceTimeoutMs
	}
	return nil
}

func (x *CpaSettings) GetMaxTimeFromConnectMs() *OptionalInt32 {
	if x != nil {
		return x.MaxTimeFromConnectMs
	}
	return nil
}

type PhraseListSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probability score boost raises or lowers the probability the words or
	// phrases are recognized. A negative value lowers the probability the
	// word is returned in results.
	// Range: -10.0 to 5.0 (very probable)
	// Default: 0
	ProbabilityBoost *OptionalInt32 `protobuf:"bytes,2,opt,name=probability_boost,json=probabilityBoost,proto3" json:"probability_boost,omitempty"`
}

func (x *PhraseListSettings) Reset() {
	*x = PhraseListSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhraseListSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhraseListSettings) ProtoMessage() {}

func (x *PhraseListSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhraseListSettings.ProtoReflect.Descriptor instead.
func (*PhraseListSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{9}
}

func (x *PhraseListSettings) GetProbabilityBoost() *OptionalInt32 {
	if x != nil {
		return x.ProbabilityBoost
	}
	return nil
}

// Settings related to answering machine / tone detection
//
//	and other tones such as FAX or SIT tone
type AmdSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enabled answering machine beep detection
	// Default: true
	AmdEnable *OptionalBool `protobuf:"bytes,1,opt,name=amd_enable,json=amdEnable,proto3" json:"amd_enable,omitempty"`
	// Which string is returned in response to an AMD beep detection
	// Default: AMD
	AmdInputText *OptionalString `protobuf:"bytes,2,opt,name=amd_input_text,json=amdInputText,proto3" json:"amd_input_text,omitempty"`
	// Enable fax tone detection
	// Default: true
	FaxEnable *OptionalBool `protobuf:"bytes,3,opt,name=fax_enable,json=faxEnable,proto3" json:"fax_enable,omitempty"`
	// Which string is returned in response to a fax tone detection
	// Default: FAX
	FaxInputText *OptionalString `protobuf:"bytes,4,opt,name=fax_input_text,json=faxInputText,proto3" json:"fax_input_text,omitempty"`
	// Enable SIT detection
	// Default: true
	SitEnable *OptionalBool `protobuf:"bytes,5,opt,name=sit_enable,json=sitEnable,proto3" json:"sit_enable,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT REORDER LOCAL"
	SitReorderLocalInputText *OptionalString `protobuf:"bytes,6,opt,name=sit_reorder_local_input_text,json=sitReorderLocalInputText,proto3" json:"sit_reorder_local_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT VACANT CODE"
	SitVacantCodeInputText *OptionalString `protobuf:"bytes,7,opt,name=sit_vacant_code_input_text,json=sitVacantCodeInputText,proto3" json:"sit_vacant_code_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT NO CIRCUIT LOCAL"
	SitNoCircuitLocalInputText *OptionalString `protobuf:"bytes,8,opt,name=sit_no_circuit_local_input_text,json=sitNoCircuitLocalInputText,proto3" json:"sit_no_circuit_local_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT INTERCEPT"
	SitInterceptInputText *OptionalString `protobuf:"bytes,9,opt,name=sit_intercept_input_text,json=sitInterceptInputText,proto3" json:"sit_intercept_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT REORDER DISTANT"
	SitReorderDistantInputText *OptionalString `protobuf:"bytes,10,opt,name=sit_reorder_distant_input_text,json=sitReorderDistantInputText,proto3" json:"sit_reorder_distant_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT NO CIRCUIT DISTANT"
	SitNoCircuitDistantInputText *OptionalString `protobuf:"bytes,11,opt,name=sit_no_circuit_distant_input_text,json=sitNoCircuitDistantInputText,proto3" json:"sit_no_circuit_distant_input_text,omitempty"`
	// Which string is returned in response to specified SIT detection
	// Default: "SIT OTHER"
	SitOtherInputText *OptionalString `protobuf:"bytes,12,opt,name=sit_other_input_text,json=sitOtherInputText,proto3" json:"sit_other_input_text,omitempty"`
	// Enable busy tone detection
	// Default: false
	BusyEnable *OptionalBool `protobuf:"bytes,13,opt,name=busy_enable,json=busyEnable,proto3" json:"busy_enable,omitempty"`
	// Which string is returned in response to a busy tone detection
	// Default: BUSY
	BusyInputText *OptionalString `protobuf:"bytes,14,opt,name=busy_input_text,json=busyInputText,proto3" json:"busy_input_text,omitempty"`
	// Maximum number of milliseconds the tone detection algorithm should listen
	// for input before timing out.
	ToneDetectTimeoutMs *OptionalInt32 `protobuf:"bytes,15,opt,name=tone_detect_timeout_ms,json=toneDetectTimeoutMs,proto3" json:"tone_detect_timeout_ms,omitempty"`
}

func (x *AmdSettings) Reset() {
	*x = AmdSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmdSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmdSettings) ProtoMessage() {}

func (x *AmdSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmdSettings.ProtoReflect.Descriptor instead.
func (*AmdSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{10}
}

func (x *AmdSettings) GetAmdEnable() *OptionalBool {
	if x != nil {
		return x.AmdEnable
	}
	return nil
}

func (x *AmdSettings) GetAmdInputText() *OptionalString {
	if x != nil {
		return x.AmdInputText
	}
	return nil
}

func (x *AmdSettings) GetFaxEnable() *OptionalBool {
	if x != nil {
		return x.FaxEnable
	}
	return nil
}

func (x *AmdSettings) GetFaxInputText() *OptionalString {
	if x != nil {
		return x.FaxInputText
	}
	return nil
}

func (x *AmdSettings) GetSitEnable() *OptionalBool {
	if x != nil {
		return x.SitEnable
	}
	return nil
}

func (x *AmdSettings) GetSitReorderLocalInputText() *OptionalString {
	if x != nil {
		return x.SitReorderLocalInputText
	}
	return nil
}

func (x *AmdSettings) GetSitVacantCodeInputText() *OptionalString {
	if x != nil {
		return x.SitVacantCodeInputText
	}
	return nil
}

func (x *AmdSettings) GetSitNoCircuitLocalInputText() *OptionalString {
	if x != nil {
		return x.SitNoCircuitLocalInputText
	}
	return nil
}

func (x *AmdSettings) GetSitInterceptInputText() *OptionalString {
	if x != nil {
		return x.SitInterceptInputText
	}
	return nil
}

func (x *AmdSettings) GetSitReorderDistantInputText() *OptionalString {
	if x != nil {
		return x.SitReorderDistantInputText
	}
	return nil
}

func (x *AmdSettings) GetSitNoCircuitDistantInputText() *OptionalString {
	if x != nil {
		return x.SitNoCircuitDistantInputText
	}
	return nil
}

func (x *AmdSettings) GetSitOtherInputText() *OptionalString {
	if x != nil {
		return x.SitOtherInputText
	}
	return nil
}

func (x *AmdSettings) GetBusyEnable() *OptionalBool {
	if x != nil {
		return x.BusyEnable
	}
	return nil
}

func (x *AmdSettings) GetBusyInputText() *OptionalString {
	if x != nil {
		return x.BusyInputText
	}
	return nil
}

func (x *AmdSettings) GetToneDetectTimeoutMs() *OptionalInt32 {
	if x != nil {
		return x.ToneDetectTimeoutMs
	}
	return nil
}

type AudioConsumeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For multi-channel audio, this is the channel number being referenced.
	// Range is from 0 to N. Default channel 0 will be used if not specified
	AudioChannel *OptionalInt32 `protobuf:"bytes,1,opt,name=audio_channel,json=audioChannel,proto3" json:"audio_channel,omitempty"`
	// Select which audio mode is used
	// Default: AUDIO_CONSUME_MODE_STREAMING
	AudioConsumeMode AudioConsumeSettings_AudioConsumeMode `protobuf:"varint,2,opt,name=audio_consume_mode,json=audioConsumeMode,proto3,enum=lumenvox.api.AudioConsumeSettings_AudioConsumeMode" json:"audio_consume_mode,omitempty"`
	// Specify where audio consume starts when "streaming" mode is used
	// Default: STREAM_START_LOCATION_STREAM_BEGIN
	StreamStartLocation AudioConsumeSettings_StreamStartLocation `protobuf:"varint,3,opt,name=stream_start_location,json=streamStartLocation,proto3,enum=lumenvox.api.AudioConsumeSettings_StreamStartLocation" json:"stream_start_location,omitempty"`
	// Optional offset in milliseconds to adjust the audio start point.
	// Range: Value in milliseconds, positive or negative.
	// Default: 0
	StartOffsetMs *OptionalInt32 `protobuf:"bytes,4,opt,name=start_offset_ms,json=startOffsetMs,proto3" json:"start_offset_ms,omitempty"`
	// Optional maximum audio to process. Value of 0 means process all audio sent
	// Range: Positive value in milliseconds
	// Default: 0
	AudioConsumeMaxMs *OptionalInt32 `protobuf:"bytes,5,opt,name=audio_consume_max_ms,json=audioConsumeMaxMs,proto3" json:"audio_consume_max_ms,omitempty"`
}

func (x *AudioConsumeSettings) Reset() {
	*x = AudioConsumeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConsumeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConsumeSettings) ProtoMessage() {}

func (x *AudioConsumeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConsumeSettings.ProtoReflect.Descriptor instead.
func (*AudioConsumeSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{11}
}

func (x *AudioConsumeSettings) GetAudioChannel() *OptionalInt32 {
	if x != nil {
		return x.AudioChannel
	}
	return nil
}

func (x *AudioConsumeSettings) GetAudioConsumeMode() AudioConsumeSettings_AudioConsumeMode {
	if x != nil {
		return x.AudioConsumeMode
	}
	return AudioConsumeSettings_AUDIO_CONSUME_MODE_UNSPECIFIED
}

func (x *AudioConsumeSettings) GetStreamStartLocation() AudioConsumeSettings_StreamStartLocation {
	if x != nil {
		return x.StreamStartLocation
	}
	return AudioConsumeSettings_STREAM_START_LOCATION_UNSPECIFIED
}

func (x *AudioConsumeSettings) GetStartOffsetMs() *OptionalInt32 {
	if x != nil {
		return x.StartOffsetMs
	}
	return nil
}

func (x *AudioConsumeSettings) GetAudioConsumeMaxMs() *OptionalInt32 {
	if x != nil {
		return x.AudioConsumeMaxMs
	}
	return nil
}

type TtsSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Voice mappings allow alternative voice names to map to LumenVox voices.
	// The key is the language of the voice mappings.
	VoiceMappings map[string]*VoiceMapping `protobuf:"bytes,1,rep,name=voice_mappings,json=voiceMappings,proto3" json:"voice_mappings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// When true, partial results callbacks will be enabled for the interaction
	// Default: false
	//
	// Deprecated: Marked as deprecated in lumenvox/api/settings.proto.
	EnablePartialResults *OptionalBool `protobuf:"bytes,2,opt,name=enable_partial_results,json=enablePartialResults,proto3" json:"enable_partial_results,omitempty"`
}

func (x *TtsSettings) Reset() {
	*x = TtsSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsSettings) ProtoMessage() {}

func (x *TtsSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsSettings.ProtoReflect.Descriptor instead.
func (*TtsSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{12}
}

func (x *TtsSettings) GetVoiceMappings() map[string]*VoiceMapping {
	if x != nil {
		return x.VoiceMappings
	}
	return nil
}

// Deprecated: Marked as deprecated in lumenvox/api/settings.proto.
func (x *TtsSettings) GetEnablePartialResults() *OptionalBool {
	if x != nil {
		return x.EnablePartialResults
	}
	return nil
}

type VoiceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of custom voice pairs.
	// The key is the voice that will be requested by the API user.
	// The value is the LumenVox voice that will be used for synthesis.
	// Use the key "default" to set a default voice for the given language.
	VoicePairs map[string]string `protobuf:"bytes,2,rep,name=voicePairs,proto3" json:"voicePairs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VoiceMapping) Reset() {
	*x = VoiceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceMapping) ProtoMessage() {}

func (x *VoiceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceMapping.ProtoReflect.Descriptor instead.
func (*VoiceMapping) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{13}
}

func (x *VoiceMapping) GetVoicePairs() map[string]string {
	if x != nil {
		return x.VoicePairs
	}
	return nil
}

type TtsInlineSynthesisSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional voice (if using simple text, or if not specified within SSML)
	Voice *OptionalString `protobuf:"bytes,1,opt,name=voice,proto3" json:"voice,omitempty"`
	// The strength of the emphasis used in the voice during synthesis.
	// Possible Values: "strong", "moderate", "none" or "reduced".
	SynthEmphasisLevel *OptionalString `protobuf:"bytes,2,opt,name=synth_emphasis_level,json=synthEmphasisLevel,proto3" json:"synth_emphasis_level,omitempty"`
	// The pitch of the audio being synthesized.
	// Possible Values: A number followed by "Hz", a relative change, or one of
	// the following values: "x-low", "low", "medium", "high", "x-high", or
	// "default". See the SSML standard for details.
	SynthProsodyPitch *OptionalString `protobuf:"bytes,3,opt,name=synth_prosody_pitch,json=synthProsodyPitch,proto3" json:"synth_prosody_pitch,omitempty"`
	// The contour of the audio being synthesized.
	// Possible Values: Please refer to the SSML standard on pitch contour
	// for details.
	SynthProsodyContour *OptionalString `protobuf:"bytes,4,opt,name=synth_prosody_contour,json=synthProsodyContour,proto3" json:"synth_prosody_contour,omitempty"`
	// The speaking rate of the audio being synthesized.
	// Possible Values: A relative change or "x-slow", "slow", "medium", "fast",
	// "x-fast", or "default". See the SSML standard for details.
	SynthProsodyRate *OptionalString `protobuf:"bytes,5,opt,name=synth_prosody_rate,json=synthProsodyRate,proto3" json:"synth_prosody_rate,omitempty"`
	// The duration of time it will take for the synthesized text to play.
	// Possible Values: A time, such as "250ms" or "3s".
	SynthProsodyDuration *OptionalString `protobuf:"bytes,6,opt,name=synth_prosody_duration,json=synthProsodyDuration,proto3" json:"synth_prosody_duration,omitempty"`
	// The volume of the audio being synthesized.
	// Possible Values: A number, a relative change or one of: "silent", "x-soft",
	// "soft", "medium", "loud", "x-loud", or "default". See the SSML
	// specification for details.
	SynthProsodyVolume *OptionalString `protobuf:"bytes,7,opt,name=synth_prosody_volume,json=synthProsodyVolume,proto3" json:"synth_prosody_volume,omitempty"`
	// The age of the voice used for synthesis.
	// Possible Values: A non-negative integer.
	SynthVoiceAge *OptionalString `protobuf:"bytes,8,opt,name=synth_voice_age,json=synthVoiceAge,proto3" json:"synth_voice_age,omitempty"`
	// The default TTS gender to use if none is specified.
	// Possible Values: Either neutral (which uses the default), male, or female.
	SynthVoiceGender *OptionalString `protobuf:"bytes,9,opt,name=synth_voice_gender,json=synthVoiceGender,proto3" json:"synth_voice_gender,omitempty"`
}

func (x *TtsInlineSynthesisSettings) Reset() {
	*x = TtsInlineSynthesisSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsInlineSynthesisSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsInlineSynthesisSettings) ProtoMessage() {}

func (x *TtsInlineSynthesisSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsInlineSynthesisSettings.ProtoReflect.Descriptor instead.
func (*TtsInlineSynthesisSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{14}
}

func (x *TtsInlineSynthesisSettings) GetVoice() *OptionalString {
	if x != nil {
		return x.Voice
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthEmphasisLevel() *OptionalString {
	if x != nil {
		return x.SynthEmphasisLevel
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthProsodyPitch() *OptionalString {
	if x != nil {
		return x.SynthProsodyPitch
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthProsodyContour() *OptionalString {
	if x != nil {
		return x.SynthProsodyContour
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthProsodyRate() *OptionalString {
	if x != nil {
		return x.SynthProsodyRate
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthProsodyDuration() *OptionalString {
	if x != nil {
		return x.SynthProsodyDuration
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthProsodyVolume() *OptionalString {
	if x != nil {
		return x.SynthProsodyVolume
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthVoiceAge() *OptionalString {
	if x != nil {
		return x.SynthVoiceAge
	}
	return nil
}

func (x *TtsInlineSynthesisSettings) GetSynthVoiceGender() *OptionalString {
	if x != nil {
		return x.SynthVoiceGender
	}
	return nil
}

type LoggingSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logging verbosity setting
	// Default: LOGGING_VERBOSITY_INFO
	LoggingVerbosity LoggingSettings_LoggingVerbosity `protobuf:"varint,1,opt,name=logging_verbosity,json=loggingVerbosity,proto3,enum=lumenvox.api.LoggingSettings_LoggingVerbosity" json:"logging_verbosity,omitempty"`
}

func (x *LoggingSettings) Reset() {
	*x = LoggingSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingSettings) ProtoMessage() {}

func (x *LoggingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingSettings.ProtoReflect.Descriptor instead.
func (*LoggingSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{15}
}

func (x *LoggingSettings) GetLoggingVerbosity() LoggingSettings_LoggingVerbosity {
	if x != nil {
		return x.LoggingVerbosity
	}
	return LoggingSettings_LOGGING_VERBOSITY_UNSPECIFIED
}

type ResetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetSettings) Reset() {
	*x = ResetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_settings_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetSettings) ProtoMessage() {}

func (x *ResetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_settings_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetSettings.ProtoReflect.Descriptor instead.
func (*ResetSettings) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_settings_proto_rawDescGZIP(), []int{16}
}

var File_lumenvox_api_settings_proto protoreflect.FileDescriptor

var file_lumenvox_api_settings_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x22, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8d, 0x04, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x61, 0x6c,
	0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x1d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x1a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x22,
	0xa3, 0x06, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x1c, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x76, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b,
	0x76, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x63,
	0x70, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x70, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x63, 0x70,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x6d, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x6d, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x61, 0x6d, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x12, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x74, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x74, 0x74, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x22, 0xb4, 0x05, 0x0a,
	0x0f, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x55, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x61,
	0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x73, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x73, 0x73,
	0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x17, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x14, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12,
	0x4a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x10, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x22, 0xce, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4c, 0x55, 0x4d, 0x45, 0x4e,
	0x56, 0x4f, 0x58, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x47, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x53, 0x5f,
	0x31, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x31, 0x5f, 0x4c, 0x49,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x47, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43, 0x53,
	0x5f, 0x31, 0x5f, 0x32, 0x30, 0x30, 0x36, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x41, 0x47,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54, 0x49, 0x43,
	0x53, 0x5f, 0x31, 0x5f, 0x32, 0x30, 0x30, 0x36, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c,
	0x53, 0x10, 0x05, 0x22, 0x8e, 0x03, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x74, 0x72,
	0x69, 0x6d, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50,
	0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x13, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x42, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4a,
	0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x66, 0x0a, 0x21, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x4d, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x72, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x74, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x74, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x05, 0x0a, 0x0b, 0x4e, 0x6c, 0x75, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x5b, 0x0a, 0x13, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6c, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22,
	0x3f, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x02,
	0x22, 0xaf, 0x07, 0x0a, 0x0b, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x33, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x56, 0x61, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x62, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x10, 0x62, 0x61, 0x72, 0x67, 0x65, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x12, 0x53, 0x0a, 0x18, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x14, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x5e, 0x0a, 0x14, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x4e, 0x6f, 0x69, 0x73, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x12, 0x6e, 0x6f, 0x69, 0x73, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x62, 0x61, 0x72, 0x67, 0x65, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10,
	0x62, 0x61, 0x72, 0x67, 0x65, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0a, 0x65, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12,
	0x44, 0x0a, 0x0f, 0x73, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0e, 0x73, 0x6e, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x4a,
	0x0a, 0x12, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x69,
	0x6e, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0a, 0x77,
	0x69, 0x6e, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4d, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x12, 0x4e, 0x6f,
	0x69, 0x73, 0x65, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x49,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4e,
	0x4f, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x49, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x22, 0xe2, 0x02, 0x0a, 0x0b, 0x43, 0x70, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x14, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x50, 0x0a, 0x16, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x13, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x17, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x4d, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x22, 0x5e, 0x0a, 0x12, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xa5, 0x09, 0x0a, 0x0b, 0x41, 0x6d, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x6d, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x61, 0x6d, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x61, 0x6d, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x61, 0x6d, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x66, 0x61, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x5c, 0x0a, 0x1c, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x73, 0x69, 0x74, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x58,
	0x0a, 0x1a, 0x73, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x63, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x16, 0x73, 0x69, 0x74, 0x56, 0x61, 0x63, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x61, 0x0a, 0x1f, 0x73, 0x69, 0x74, 0x5f,
	0x6e, 0x6f, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x1a, 0x73, 0x69, 0x74, 0x4e, 0x6f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x18, 0x73,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x73, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x60, 0x0a, 0x1e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1a, 0x73, 0x69, 0x74, 0x52, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x69, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1c, 0x73,
	0x69, 0x74, 0x4e, 0x6f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x73,
	0x69, 0x74, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x69, 0x74, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x75,
	0x73, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x62, 0x75, 0x73,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x62, 0x75, 0x73, 0x79, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x62, 0x75, 0x73, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x50, 0x0a,
	0x16, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x13, 0x74, 0x6f, 0x6e, 0x65,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22,
	0xf9, 0x05, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x61, 0x0a, 0x12, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a,
	0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x12, 0x4c,
	0x0a, 0x14, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x73, 0x22, 0x76, 0x0a, 0x10,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x02, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x96, 0x02, 0x0a, 0x0b,
	0x54, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x74, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x54, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x5c, 0x0a, 0x12, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc2, 0x05, 0x0a, 0x1a, 0x54, 0x74, 0x73, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x70,
	0x68, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x45, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x6f,
	0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x13,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x6f, 0x75, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x52, 0x0a, 0x16, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x73, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x5f, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x74,
	0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x79, 0x6e,
	0x74, 0x68, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x10, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x69, 0x74, 0x79, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72,
	0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x4c,
	0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x56,
	0x45, 0x52, 0x42, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x22, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x96, 0x01, 0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02, 0x15,
	0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0xca, 0x02, 0x15, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78,
	0x5c, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_settings_proto_rawDescOnce sync.Once
	file_lumenvox_api_settings_proto_rawDescData = file_lumenvox_api_settings_proto_rawDesc
)

func file_lumenvox_api_settings_proto_rawDescGZIP() []byte {
	file_lumenvox_api_settings_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_settings_proto_rawDescData)
	})
	return file_lumenvox_api_settings_proto_rawDescData
}

var file_lumenvox_api_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_lumenvox_api_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_lumenvox_api_settings_proto_goTypes = []interface{}{
	(GrammarSettings_TagFormat)(0),                // 0: lumenvox.api.GrammarSettings.TagFormat
	(NluSettings_DetectOutcomeType)(0),            // 1: lumenvox.api.NluSettings.DetectOutcomeType
	(VadSettings_NoiseReductionMode)(0),           // 2: lumenvox.api.VadSettings.NoiseReductionMode
	(AudioConsumeSettings_AudioConsumeMode)(0),    // 3: lumenvox.api.AudioConsumeSettings.AudioConsumeMode
	(AudioConsumeSettings_StreamStartLocation)(0), // 4: lumenvox.api.AudioConsumeSettings.StreamStartLocation
	(LoggingSettings_LoggingVerbosity)(0),         // 5: lumenvox.api.LoggingSettings.LoggingVerbosity
	(*SessionSettings)(nil),                       // 6: lumenvox.api.SessionSettings
	(*InteractionSettings)(nil),                   // 7: lumenvox.api.InteractionSettings
	(*GeneralInteractionSettings)(nil),            // 8: lumenvox.api.GeneralInteractionSettings
	(*GrammarSettings)(nil),                       // 9: lumenvox.api.GrammarSettings
	(*RecognitionSettings)(nil),                   // 10: lumenvox.api.RecognitionSettings
	(*NormalizationSettings)(nil),                 // 11: lumenvox.api.NormalizationSettings
	(*NluSettings)(nil),                           // 12: lumenvox.api.NluSettings
	(*VadSettings)(nil),                           // 13: lumenvox.api.VadSettings
	(*CpaSettings)(nil),                           // 14: lumenvox.api.CpaSettings
	(*PhraseListSettings)(nil),                    // 15: lumenvox.api.PhraseListSettings
	(*AmdSettings)(nil),                           // 16: lumenvox.api.AmdSettings
	(*AudioConsumeSettings)(nil),                  // 17: lumenvox.api.AudioConsumeSettings
	(*TtsSettings)(nil),                           // 18: lumenvox.api.TtsSettings
	(*VoiceMapping)(nil),                          // 19: lumenvox.api.VoiceMapping
	(*TtsInlineSynthesisSettings)(nil),            // 20: lumenvox.api.TtsInlineSynthesisSettings
	(*LoggingSettings)(nil),                       // 21: lumenvox.api.LoggingSettings
	(*ResetSettings)(nil),                         // 22: lumenvox.api.ResetSettings
	nil,                                           // 23: lumenvox.api.TtsSettings.VoiceMappingsEntry
	nil,                                           // 24: lumenvox.api.VoiceMapping.VoicePairsEntry
	(*OptionalBool)(nil),                          // 25: lumenvox.api.OptionalBool
	(*OptionalString)(nil),                        // 26: lumenvox.api.OptionalString
	(*OptionalInt32)(nil),                         // 27: lumenvox.api.OptionalInt32
}
var file_lumenvox_api_settings_proto_depIdxs = []int32{
	25, // 0: lumenvox.api.SessionSettings.archive_session:type_name -> lumenvox.api.OptionalBool
	26, // 1: lumenvox.api.SessionSettings.custom_session_data:type_name -> lumenvox.api.OptionalString
	7,  // 2: lumenvox.api.SessionSettings.interaction_settings:type_name -> lumenvox.api.InteractionSettings
	26, // 3: lumenvox.api.SessionSettings.call_id:type_name -> lumenvox.api.OptionalString
	26, // 4: lumenvox.api.SessionSettings.channel_id:type_name -> lumenvox.api.OptionalString
	27, // 5: lumenvox.api.SessionSettings.archive_session_delay_seconds:type_name -> lumenvox.api.OptionalInt32
	26, // 6: lumenvox.api.SessionSettings.logging_tag:type_name -> lumenvox.api.OptionalString
	8,  // 7: lumenvox.api.InteractionSettings.general_interaction_settings:type_name -> lumenvox.api.GeneralInteractionSettings
	17, // 8: lumenvox.api.InteractionSettings.audio_consume_settings:type_name -> lumenvox.api.AudioConsumeSettings
	13, // 9: lumenvox.api.InteractionSettings.vad_settings:type_name -> lumenvox.api.VadSettings
	9,  // 10: lumenvox.api.InteractionSettings.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	10, // 11: lumenvox.api.InteractionSettings.recognition_settings:type_name -> lumenvox.api.RecognitionSettings
	14, // 12: lumenvox.api.InteractionSettings.cpa_settings:type_name -> lumenvox.api.CpaSettings
	16, // 13: lumenvox.api.InteractionSettings.amd_settings:type_name -> lumenvox.api.AmdSettings
	11, // 14: lumenvox.api.InteractionSettings.normalization_settings:type_name -> lumenvox.api.NormalizationSettings
	15, // 15: lumenvox.api.InteractionSettings.phrase_list_settings:type_name -> lumenvox.api.PhraseListSettings
	18, // 16: lumenvox.api.InteractionSettings.tts_settings:type_name -> lumenvox.api.TtsSettings
	25, // 17: lumenvox.api.GeneralInteractionSettings.secure_context:type_name -> lumenvox.api.OptionalBool
	26, // 18: lumenvox.api.GeneralInteractionSettings.custom_interaction_data:type_name -> lumenvox.api.OptionalString
	26, // 19: lumenvox.api.GeneralInteractionSettings.logging_tag:type_name -> lumenvox.api.OptionalString
	0,  // 20: lumenvox.api.GrammarSettings.default_tag_format:type_name -> lumenvox.api.GrammarSettings.TagFormat
	25, // 21: lumenvox.api.GrammarSettings.ssl_verify_peer:type_name -> lumenvox.api.OptionalBool
	27, // 22: lumenvox.api.GrammarSettings.load_grammar_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 23: lumenvox.api.GrammarSettings.compatibility_mode:type_name -> lumenvox.api.OptionalInt32
	27, // 24: lumenvox.api.GrammarSettings.grammar_threshold:type_name -> lumenvox.api.OptionalInt32
	27, // 25: lumenvox.api.GrammarSettings.max_enhanced_length:type_name -> lumenvox.api.OptionalInt32
	27, // 26: lumenvox.api.RecognitionSettings.max_alternatives:type_name -> lumenvox.api.OptionalInt32
	27, // 27: lumenvox.api.RecognitionSettings.trim_silence_value:type_name -> lumenvox.api.OptionalInt32
	25, // 28: lumenvox.api.RecognitionSettings.enable_partial_results:type_name -> lumenvox.api.OptionalBool
	27, // 29: lumenvox.api.RecognitionSettings.confidence_threshold:type_name -> lumenvox.api.OptionalInt32
	27, // 30: lumenvox.api.RecognitionSettings.decode_timeout:type_name -> lumenvox.api.OptionalInt32
	25, // 31: lumenvox.api.NormalizationSettings.enable_inverse_text:type_name -> lumenvox.api.OptionalBool
	25, // 32: lumenvox.api.NormalizationSettings.enable_punctuation_capitalization:type_name -> lumenvox.api.OptionalBool
	25, // 33: lumenvox.api.NormalizationSettings.enable_redaction:type_name -> lumenvox.api.OptionalBool
	27, // 34: lumenvox.api.NormalizationSettings.request_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	25, // 35: lumenvox.api.NormalizationSettings.enable_srt_generation:type_name -> lumenvox.api.OptionalBool
	25, // 36: lumenvox.api.NormalizationSettings.enable_vtt_generation:type_name -> lumenvox.api.OptionalBool
	1,  // 37: lumenvox.api.NluSettings.detect_outcome_type:type_name -> lumenvox.api.NluSettings.DetectOutcomeType
	27, // 38: lumenvox.api.NluSettings.request_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	25, // 39: lumenvox.api.VadSettings.use_vad:type_name -> lumenvox.api.OptionalBool
	27, // 40: lumenvox.api.VadSettings.barge_in_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 41: lumenvox.api.VadSettings.end_of_speech_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	2,  // 42: lumenvox.api.VadSettings.noise_reduction_mode:type_name -> lumenvox.api.VadSettings.NoiseReductionMode
	27, // 43: lumenvox.api.VadSettings.bargein_threshold:type_name -> lumenvox.api.OptionalInt32
	27, // 44: lumenvox.api.VadSettings.eos_delay_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 45: lumenvox.api.VadSettings.snr_sensitivity:type_name -> lumenvox.api.OptionalInt32
	27, // 46: lumenvox.api.VadSettings.stream_init_delay:type_name -> lumenvox.api.OptionalInt32
	27, // 47: lumenvox.api.VadSettings.volume_sensitivity:type_name -> lumenvox.api.OptionalInt32
	27, // 48: lumenvox.api.VadSettings.wind_back_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 49: lumenvox.api.CpaSettings.human_residence_time_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 50: lumenvox.api.CpaSettings.human_business_time_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 51: lumenvox.api.CpaSettings.unknown_silence_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 52: lumenvox.api.CpaSettings.max_time_from_connect_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 53: lumenvox.api.PhraseListSettings.probability_boost:type_name -> lumenvox.api.OptionalInt32
	25, // 54: lumenvox.api.AmdSettings.amd_enable:type_name -> lumenvox.api.OptionalBool
	26, // 55: lumenvox.api.AmdSettings.amd_input_text:type_name -> lumenvox.api.OptionalString
	25, // 56: lumenvox.api.AmdSettings.fax_enable:type_name -> lumenvox.api.OptionalBool
	26, // 57: lumenvox.api.AmdSettings.fax_input_text:type_name -> lumenvox.api.OptionalString
	25, // 58: lumenvox.api.AmdSettings.sit_enable:type_name -> lumenvox.api.OptionalBool
	26, // 59: lumenvox.api.AmdSettings.sit_reorder_local_input_text:type_name -> lumenvox.api.OptionalString
	26, // 60: lumenvox.api.AmdSettings.sit_vacant_code_input_text:type_name -> lumenvox.api.OptionalString
	26, // 61: lumenvox.api.AmdSettings.sit_no_circuit_local_input_text:type_name -> lumenvox.api.OptionalString
	26, // 62: lumenvox.api.AmdSettings.sit_intercept_input_text:type_name -> lumenvox.api.OptionalString
	26, // 63: lumenvox.api.AmdSettings.sit_reorder_distant_input_text:type_name -> lumenvox.api.OptionalString
	26, // 64: lumenvox.api.AmdSettings.sit_no_circuit_distant_input_text:type_name -> lumenvox.api.OptionalString
	26, // 65: lumenvox.api.AmdSettings.sit_other_input_text:type_name -> lumenvox.api.OptionalString
	25, // 66: lumenvox.api.AmdSettings.busy_enable:type_name -> lumenvox.api.OptionalBool
	26, // 67: lumenvox.api.AmdSettings.busy_input_text:type_name -> lumenvox.api.OptionalString
	27, // 68: lumenvox.api.AmdSettings.tone_detect_timeout_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 69: lumenvox.api.AudioConsumeSettings.audio_channel:type_name -> lumenvox.api.OptionalInt32
	3,  // 70: lumenvox.api.AudioConsumeSettings.audio_consume_mode:type_name -> lumenvox.api.AudioConsumeSettings.AudioConsumeMode
	4,  // 71: lumenvox.api.AudioConsumeSettings.stream_start_location:type_name -> lumenvox.api.AudioConsumeSettings.StreamStartLocation
	27, // 72: lumenvox.api.AudioConsumeSettings.start_offset_ms:type_name -> lumenvox.api.OptionalInt32
	27, // 73: lumenvox.api.AudioConsumeSettings.audio_consume_max_ms:type_name -> lumenvox.api.OptionalInt32
	23, // 74: lumenvox.api.TtsSettings.voice_mappings:type_name -> lumenvox.api.TtsSettings.VoiceMappingsEntry
	25, // 75: lumenvox.api.TtsSettings.enable_partial_results:type_name -> lumenvox.api.OptionalBool
	24, // 76: lumenvox.api.VoiceMapping.voicePairs:type_name -> lumenvox.api.VoiceMapping.VoicePairsEntry
	26, // 77: lumenvox.api.TtsInlineSynthesisSettings.voice:type_name -> lumenvox.api.OptionalString
	26, // 78: lumenvox.api.TtsInlineSynthesisSettings.synth_emphasis_level:type_name -> lumenvox.api.OptionalString
	26, // 79: lumenvox.api.TtsInlineSynthesisSettings.synth_prosody_pitch:type_name -> lumenvox.api.OptionalString
	26, // 80: lumenvox.api.TtsInlineSynthesisSettings.synth_prosody_contour:type_name -> lumenvox.api.OptionalString
	26, // 81: lumenvox.api.TtsInlineSynthesisSettings.synth_prosody_rate:type_name -> lumenvox.api.OptionalString
	26, // 82: lumenvox.api.TtsInlineSynthesisSettings.synth_prosody_duration:type_name -> lumenvox.api.OptionalString
	26, // 83: lumenvox.api.TtsInlineSynthesisSettings.synth_prosody_volume:type_name -> lumenvox.api.OptionalString
	26, // 84: lumenvox.api.TtsInlineSynthesisSettings.synth_voice_age:type_name -> lumenvox.api.OptionalString
	26, // 85: lumenvox.api.TtsInlineSynthesisSettings.synth_voice_gender:type_name -> lumenvox.api.OptionalString
	5,  // 86: lumenvox.api.LoggingSettings.logging_verbosity:type_name -> lumenvox.api.LoggingSettings.LoggingVerbosity
	19, // 87: lumenvox.api.TtsSettings.VoiceMappingsEntry.value:type_name -> lumenvox.api.VoiceMapping
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_lumenvox_api_settings_proto_init() }
func file_lumenvox_api_settings_proto_init() {
	if File_lumenvox_api_settings_proto != nil {
		return
	}
	file_lumenvox_api_optional_values_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralInteractionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrammarSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NluSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VadSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpaSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhraseListSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmdSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConsumeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsInlineSynthesisSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_settings_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_settings_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_settings_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_settings_proto_depIdxs,
		EnumInfos:         file_lumenvox_api_settings_proto_enumTypes,
		MessageInfos:      file_lumenvox_api_settings_proto_msgTypes,
	}.Build()
	File_lumenvox_api_settings_proto = out.File
	file_lumenvox_api_settings_proto_rawDesc = nil
	file_lumenvox_api_settings_proto_goTypes = nil
	file_lumenvox_api_settings_proto_depIdxs = nil
}
