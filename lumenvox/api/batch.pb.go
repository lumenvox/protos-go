// Batch API Protocol Buffer File
// This is the gRPC definition for the LumenVox Batch API

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/batch.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*BatchRequest_Create
	//	*BatchRequest_Attach
	//	*BatchRequest_CreateFile
	//	*BatchRequest_SendFileChunk
	//	*BatchRequest_Status
	//	*BatchRequest_Close
	RequestType isBatchRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{0}
}

func (m *BatchRequest) GetRequestType() isBatchRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *BatchRequest) GetCreate() *BatchCreateRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_Create); ok {
		return x.Create
	}
	return nil
}

func (x *BatchRequest) GetAttach() *BatchAttachRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_Attach); ok {
		return x.Attach
	}
	return nil
}

func (x *BatchRequest) GetCreateFile() *BatchCreateFileRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_CreateFile); ok {
		return x.CreateFile
	}
	return nil
}

func (x *BatchRequest) GetSendFileChunk() *BatchSendFileChunkRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_SendFileChunk); ok {
		return x.SendFileChunk
	}
	return nil
}

func (x *BatchRequest) GetStatus() *BatchStatusRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_Status); ok {
		return x.Status
	}
	return nil
}

func (x *BatchRequest) GetClose() *BatchCloseRequest {
	if x, ok := x.GetRequestType().(*BatchRequest_Close); ok {
		return x.Close
	}
	return nil
}

type isBatchRequest_RequestType interface {
	isBatchRequest_RequestType()
}

type BatchRequest_Create struct {
	// Creates a new batch and returns its ID that can be used to access other
	// batch operations
	Create *BatchCreateRequest `protobuf:"bytes,1,opt,name=create,proto3,oneof"`
}

type BatchRequest_Attach struct {
	// Attach to an existing batch to access batch operations
	Attach *BatchAttachRequest `protobuf:"bytes,2,opt,name=attach,proto3,oneof"`
}

type BatchRequest_CreateFile struct {
	// Request creation of a new file related to a batch
	CreateFile *BatchCreateFileRequest `protobuf:"bytes,3,opt,name=create_file,json=createFile,proto3,oneof"`
}

type BatchRequest_SendFileChunk struct {
	// Send sequential chunk of a file data sent for specified batch
	SendFileChunk *BatchSendFileChunkRequest `protobuf:"bytes,4,opt,name=send_file_chunk,json=sendFileChunk,proto3,oneof"`
}

type BatchRequest_Status struct {
	// Request the status of specified batch operation
	Status *BatchStatusRequest `protobuf:"bytes,5,opt,name=status,proto3,oneof"`
}

type BatchRequest_Close struct {
	// Request to close and end a batch (stopping processing if needed)
	Close *BatchCloseRequest `protobuf:"bytes,6,opt,name=close,proto3,oneof"`
}

func (*BatchRequest_Create) isBatchRequest_RequestType() {}

func (*BatchRequest_Attach) isBatchRequest_RequestType() {}

func (*BatchRequest_CreateFile) isBatchRequest_RequestType() {}

func (*BatchRequest_SendFileChunk) isBatchRequest_RequestType() {}

func (*BatchRequest_Status) isBatchRequest_RequestType() {}

func (*BatchRequest_Close) isBatchRequest_RequestType() {}

type BatchCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration parameters that describes the operation performed by the
	// batch, as well as parameters to use while executing the operation
	BatchConfig *BatchConfig `protobuf:"bytes,1,opt,name=batch_config,json=batchConfig,proto3" json:"batch_config,omitempty"`
}

func (x *BatchCreateRequest) Reset() {
	*x = BatchCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateRequest) ProtoMessage() {}

func (x *BatchCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{1}
}

func (x *BatchCreateRequest) GetBatchConfig() *BatchConfig {
	if x != nil {
		return x.BatchConfig
	}
	return nil
}

type BatchAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid identifier of existing batch to attach to
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *BatchAttachRequest) Reset() {
	*x = BatchAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAttachRequest) ProtoMessage() {}

func (x *BatchAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAttachRequest.ProtoReflect.Descriptor instead.
func (*BatchAttachRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{2}
}

func (x *BatchAttachRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

type BatchStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid identifier of existing batch to request status of
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Identifier for specific batch step (if any)
	BatchStepId string `protobuf:"bytes,2,opt,name=batch_step_id,json=batchStepId,proto3" json:"batch_step_id,omitempty"`
	// Status information for batch processing
	BatchStatus *BatchStatus `protobuf:"bytes,3,opt,name=batch_status,json=batchStatus,proto3" json:"batch_status,omitempty"`
}

func (x *BatchStatusRequest) Reset() {
	*x = BatchStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStatusRequest) ProtoMessage() {}

func (x *BatchStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStatusRequest.ProtoReflect.Descriptor instead.
func (*BatchStatusRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{3}
}

func (x *BatchStatusRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchStatusRequest) GetBatchStepId() string {
	if x != nil {
		return x.BatchStepId
	}
	return ""
}

func (x *BatchStatusRequest) GetBatchStatus() *BatchStatus {
	if x != nil {
		return x.BatchStatus
	}
	return nil
}

type BatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BatchConfig:
	//
	//	*BatchConfig_TranscriptionBatchConfig
	//	*BatchConfig_AsrBatchConfig
	BatchConfig isBatchConfig_BatchConfig `protobuf_oneof:"batch_config"`
}

func (x *BatchConfig) Reset() {
	*x = BatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchConfig) ProtoMessage() {}

func (x *BatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchConfig.ProtoReflect.Descriptor instead.
func (*BatchConfig) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{4}
}

func (m *BatchConfig) GetBatchConfig() isBatchConfig_BatchConfig {
	if m != nil {
		return m.BatchConfig
	}
	return nil
}

func (x *BatchConfig) GetTranscriptionBatchConfig() *TranscriptionBatchConfig {
	if x, ok := x.GetBatchConfig().(*BatchConfig_TranscriptionBatchConfig); ok {
		return x.TranscriptionBatchConfig
	}
	return nil
}

func (x *BatchConfig) GetAsrBatchConfig() *AsrBatchConfig {
	if x, ok := x.GetBatchConfig().(*BatchConfig_AsrBatchConfig); ok {
		return x.AsrBatchConfig
	}
	return nil
}

type isBatchConfig_BatchConfig interface {
	isBatchConfig_BatchConfig()
}

type BatchConfig_TranscriptionBatchConfig struct {
	// Configuration parameters for a transcription batch operation
	TranscriptionBatchConfig *TranscriptionBatchConfig `protobuf:"bytes,1,opt,name=transcription_batch_config,json=transcriptionBatchConfig,proto3,oneof"`
}

type BatchConfig_AsrBatchConfig struct {
	// Configuration parameters for an ASR batch operation
	AsrBatchConfig *AsrBatchConfig `protobuf:"bytes,2,opt,name=asr_batch_config,json=asrBatchConfig,proto3,oneof"`
}

func (*BatchConfig_TranscriptionBatchConfig) isBatchConfig_BatchConfig() {}

func (*BatchConfig_AsrBatchConfig) isBatchConfig_BatchConfig() {}

type TranscriptionBatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TranscriptionBatchConfig) Reset() {
	*x = TranscriptionBatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionBatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionBatchConfig) ProtoMessage() {}

func (x *TranscriptionBatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionBatchConfig.ProtoReflect.Descriptor instead.
func (*TranscriptionBatchConfig) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{5}
}

type AsrBatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AsrBatchConfig) Reset() {
	*x = AsrBatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsrBatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsrBatchConfig) ProtoMessage() {}

func (x *AsrBatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsrBatchConfig.ProtoReflect.Descriptor instead.
func (*AsrBatchConfig) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{6}
}

type BatchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BatchStatus:
	//
	//	*BatchStatus_TranscriptionBatchStatus
	//	*BatchStatus_AsrBatchStatus
	BatchStatus isBatchStatus_BatchStatus `protobuf_oneof:"batch_status"`
}

func (x *BatchStatus) Reset() {
	*x = BatchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchStatus) ProtoMessage() {}

func (x *BatchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchStatus.ProtoReflect.Descriptor instead.
func (*BatchStatus) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{7}
}

func (m *BatchStatus) GetBatchStatus() isBatchStatus_BatchStatus {
	if m != nil {
		return m.BatchStatus
	}
	return nil
}

func (x *BatchStatus) GetTranscriptionBatchStatus() *TranscriptionBatchStatus {
	if x, ok := x.GetBatchStatus().(*BatchStatus_TranscriptionBatchStatus); ok {
		return x.TranscriptionBatchStatus
	}
	return nil
}

func (x *BatchStatus) GetAsrBatchStatus() *AsrBatchStatus {
	if x, ok := x.GetBatchStatus().(*BatchStatus_AsrBatchStatus); ok {
		return x.AsrBatchStatus
	}
	return nil
}

type isBatchStatus_BatchStatus interface {
	isBatchStatus_BatchStatus()
}

type BatchStatus_TranscriptionBatchStatus struct {
	// Status for a transcription batch operation
	TranscriptionBatchStatus *TranscriptionBatchStatus `protobuf:"bytes,1,opt,name=transcription_batch_status,json=transcriptionBatchStatus,proto3,oneof"`
}

type BatchStatus_AsrBatchStatus struct {
	// Status for an ASR batch operation
	AsrBatchStatus *AsrBatchStatus `protobuf:"bytes,2,opt,name=asr_batch_status,json=asrBatchStatus,proto3,oneof"`
}

func (*BatchStatus_TranscriptionBatchStatus) isBatchStatus_BatchStatus() {}

func (*BatchStatus_AsrBatchStatus) isBatchStatus_BatchStatus() {}

type TranscriptionBatchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TranscriptionBatchStatus) Reset() {
	*x = TranscriptionBatchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionBatchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionBatchStatus) ProtoMessage() {}

func (x *TranscriptionBatchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionBatchStatus.ProtoReflect.Descriptor instead.
func (*TranscriptionBatchStatus) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{8}
}

type AsrBatchStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AsrBatchStatus) Reset() {
	*x = AsrBatchStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsrBatchStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsrBatchStatus) ProtoMessage() {}

func (x *AsrBatchStatus) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsrBatchStatus.ProtoReflect.Descriptor instead.
func (*AsrBatchStatus) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{9}
}

type BatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//
	//	*BatchResponse_BatchCallback
	ResponseType isBatchResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *BatchResponse) Reset() {
	*x = BatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResponse) ProtoMessage() {}

func (x *BatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResponse.ProtoReflect.Descriptor instead.
func (*BatchResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{10}
}

func (m *BatchResponse) GetResponseType() isBatchResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *BatchResponse) GetBatchCallback() *BatchCallbackResponse {
	if x, ok := x.GetResponseType().(*BatchResponse_BatchCallback); ok {
		return x.BatchCallback
	}
	return nil
}

type isBatchResponse_ResponseType interface {
	isBatchResponse_ResponseType()
}

type BatchResponse_BatchCallback struct {
	// Batch callback messages
	BatchCallback *BatchCallbackResponse `protobuf:"bytes,1,opt,name=batch_callback,json=batchCallback,proto3,oneof"`
}

func (*BatchResponse_BatchCallback) isBatchResponse_ResponseType() {}

type BatchCallbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Responses will be in the form of streamed callback messages, and will be
	// one of the following types
	//
	// Types that are assignable to Response:
	//
	//	*BatchCallbackResponse_BatchId
	//	*BatchCallbackResponse_BatchStatus
	//	*BatchCallbackResponse_BatchResult
	//	*BatchCallbackResponse_BatchEvent
	Response isBatchCallbackResponse_Response `protobuf_oneof:"response"`
}

func (x *BatchCallbackResponse) Reset() {
	*x = BatchCallbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCallbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCallbackResponse) ProtoMessage() {}

func (x *BatchCallbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCallbackResponse.ProtoReflect.Descriptor instead.
func (*BatchCallbackResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{11}
}

func (m *BatchCallbackResponse) GetResponse() isBatchCallbackResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *BatchCallbackResponse) GetBatchId() string {
	if x, ok := x.GetResponse().(*BatchCallbackResponse_BatchId); ok {
		return x.BatchId
	}
	return ""
}

func (x *BatchCallbackResponse) GetBatchStatus() *BatchStatus {
	if x, ok := x.GetResponse().(*BatchCallbackResponse_BatchStatus); ok {
		return x.BatchStatus
	}
	return nil
}

func (x *BatchCallbackResponse) GetBatchResult() *BatchResult {
	if x, ok := x.GetResponse().(*BatchCallbackResponse_BatchResult); ok {
		return x.BatchResult
	}
	return nil
}

func (x *BatchCallbackResponse) GetBatchEvent() *BatchEvent {
	if x, ok := x.GetResponse().(*BatchCallbackResponse_BatchEvent); ok {
		return x.BatchEvent
	}
	return nil
}

type isBatchCallbackResponse_Response interface {
	isBatchCallbackResponse_Response()
}

type BatchCallbackResponse_BatchId struct {
	// ID of newly created or attached batch (returned from initial call)
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3,oneof"`
}

type BatchCallbackResponse_BatchStatus struct {
	// Batch status response
	BatchStatus *BatchStatus `protobuf:"bytes,2,opt,name=batch_status,json=batchStatus,proto3,oneof"`
}

type BatchCallbackResponse_BatchResult struct {
	// Final results notification
	BatchResult *BatchResult `protobuf:"bytes,3,opt,name=batch_result,json=batchResult,proto3,oneof"`
}

type BatchCallbackResponse_BatchEvent struct {
	// Batch event notification (typically used for errors)
	BatchEvent *BatchEvent `protobuf:"bytes,4,opt,name=batch_event,json=batchEvent,proto3,oneof"`
}

func (*BatchCallbackResponse_BatchId) isBatchCallbackResponse_Response() {}

func (*BatchCallbackResponse_BatchStatus) isBatchCallbackResponse_Response() {}

func (*BatchCallbackResponse_BatchResult) isBatchCallbackResponse_Response() {}

func (*BatchCallbackResponse_BatchEvent) isBatchCallbackResponse_Response() {}

type BatchCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to batch to close
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *BatchCloseRequest) Reset() {
	*x = BatchCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCloseRequest) ProtoMessage() {}

func (x *BatchCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCloseRequest.ProtoReflect.Descriptor instead.
func (*BatchCloseRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{12}
}

func (x *BatchCloseRequest) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

// BatchResult
type BatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The batch object being referenced
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The batch step object being referenced (if any)
	BatchStepId string `protobuf:"bytes,2,opt,name=batch_step_id,json=batchStepId,proto3" json:"batch_step_id,omitempty"`
	// The JSON object containing the result
	// TODO : Change this to protocol buffer message type
	ResultsJson string `protobuf:"bytes,3,opt,name=results_json,json=resultsJson,proto3" json:"results_json,omitempty"`
}

func (x *BatchResult) Reset() {
	*x = BatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchResult) ProtoMessage() {}

func (x *BatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchResult.ProtoReflect.Descriptor instead.
func (*BatchResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{13}
}

func (x *BatchResult) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchResult) GetBatchStepId() string {
	if x != nil {
		return x.BatchStepId
	}
	return ""
}

func (x *BatchResult) GetResultsJson() string {
	if x != nil {
		return x.ResultsJson
	}
	return ""
}

type BatchCreateFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of file being created (for informational purposes only)
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Specifies the audio format (if applicable) for the file
	BatchAudioFormat *AudioFormat `protobuf:"bytes,2,opt,name=batch_audio_format,json=batchAudioFormat,proto3" json:"batch_audio_format,omitempty"`
}

func (x *BatchCreateFileRequest) Reset() {
	*x = BatchCreateFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFileRequest) ProtoMessage() {}

func (x *BatchCreateFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFileRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateFileRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{14}
}

func (x *BatchCreateFileRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *BatchCreateFileRequest) GetBatchAudioFormat() *AudioFormat {
	if x != nil {
		return x.BatchAudioFormat
	}
	return nil
}

type BatchCreateFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch file identifier to use when referencing the created file
	BatchFileId string `protobuf:"bytes,1,opt,name=batch_file_id,json=batchFileId,proto3" json:"batch_file_id,omitempty"`
}

func (x *BatchCreateFileResponse) Reset() {
	*x = BatchCreateFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateFileResponse) ProtoMessage() {}

func (x *BatchCreateFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateFileResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateFileResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{15}
}

func (x *BatchCreateFileResponse) GetBatchFileId() string {
	if x != nil {
		return x.BatchFileId
	}
	return ""
}

type BatchSendFileChunkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batch file identifier returned from previous BatchFileRequestRequest
	BatchFileId string `protobuf:"bytes,1,opt,name=batch_file_id,json=batchFileId,proto3" json:"batch_file_id,omitempty"`
	// Sequential block of data relating to file
	FileData []byte `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
}

func (x *BatchSendFileChunkRequest) Reset() {
	*x = BatchSendFileChunkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSendFileChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSendFileChunkRequest) ProtoMessage() {}

func (x *BatchSendFileChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSendFileChunkRequest.ProtoReflect.Descriptor instead.
func (*BatchSendFileChunkRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{16}
}

func (x *BatchSendFileChunkRequest) GetBatchFileId() string {
	if x != nil {
		return x.BatchFileId
	}
	return ""
}

func (x *BatchSendFileChunkRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

type BatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The batch object being referenced
	BatchId string `protobuf:"bytes,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// Batch step object being referenced (if any)
	BatchStepId string `protobuf:"bytes,2,opt,name=batch_step_id,json=batchStepId,proto3" json:"batch_step_id,omitempty"`
	// Batch file object being referenced (if any)
	BatchFileId string `protobuf:"bytes,3,opt,name=batch_file_id,json=batchFileId,proto3" json:"batch_file_id,omitempty"`
	// String containing event information
	StatusMessage *status.Status `protobuf:"bytes,4,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *BatchEvent) Reset() {
	*x = BatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_batch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchEvent) ProtoMessage() {}

func (x *BatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_batch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchEvent.ProtoReflect.Descriptor instead.
func (*BatchEvent) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_batch_proto_rawDescGZIP(), []int{17}
}

func (x *BatchEvent) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *BatchEvent) GetBatchStepId() string {
	if x != nil {
		return x.BatchStepId
	}
	return ""
}

func (x *BatchEvent) GetBatchFileId() string {
	if x != nil {
		return x.BatchFileId
	}
	return ""
}

func (x *BatchEvent) GetStatusMessage() *status.Status {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

var File_lumenvox_api_batch_proto protoreflect.FileDescriptor

var file_lumenvox_api_batch_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x3a, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a,
	0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x2f, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x48,
	0x0a, 0x10, 0x61, 0x73, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x73, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48,
	0x0a, 0x10, 0x61, 0x73, 0x72, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x73, 0x72, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x73, 0x72, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x3d, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x4d, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x44, 0x0a, 0x05, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x8d, 0x01, 0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x42, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d,
	0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75,
	0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f,
	0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05,
	0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02, 0x12, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0xca, 0x02, 0x12, 0x4c, 0x75, 0x6d,
	0x65, 0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_batch_proto_rawDescOnce sync.Once
	file_lumenvox_api_batch_proto_rawDescData = file_lumenvox_api_batch_proto_rawDesc
)

func file_lumenvox_api_batch_proto_rawDescGZIP() []byte {
	file_lumenvox_api_batch_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_batch_proto_rawDescData)
	})
	return file_lumenvox_api_batch_proto_rawDescData
}

var file_lumenvox_api_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_lumenvox_api_batch_proto_goTypes = []interface{}{
	(*BatchRequest)(nil),              // 0: lumenvox.api.BatchRequest
	(*BatchCreateRequest)(nil),        // 1: lumenvox.api.BatchCreateRequest
	(*BatchAttachRequest)(nil),        // 2: lumenvox.api.BatchAttachRequest
	(*BatchStatusRequest)(nil),        // 3: lumenvox.api.BatchStatusRequest
	(*BatchConfig)(nil),               // 4: lumenvox.api.BatchConfig
	(*TranscriptionBatchConfig)(nil),  // 5: lumenvox.api.TranscriptionBatchConfig
	(*AsrBatchConfig)(nil),            // 6: lumenvox.api.AsrBatchConfig
	(*BatchStatus)(nil),               // 7: lumenvox.api.BatchStatus
	(*TranscriptionBatchStatus)(nil),  // 8: lumenvox.api.TranscriptionBatchStatus
	(*AsrBatchStatus)(nil),            // 9: lumenvox.api.AsrBatchStatus
	(*BatchResponse)(nil),             // 10: lumenvox.api.BatchResponse
	(*BatchCallbackResponse)(nil),     // 11: lumenvox.api.BatchCallbackResponse
	(*BatchCloseRequest)(nil),         // 12: lumenvox.api.BatchCloseRequest
	(*BatchResult)(nil),               // 13: lumenvox.api.BatchResult
	(*BatchCreateFileRequest)(nil),    // 14: lumenvox.api.BatchCreateFileRequest
	(*BatchCreateFileResponse)(nil),   // 15: lumenvox.api.BatchCreateFileResponse
	(*BatchSendFileChunkRequest)(nil), // 16: lumenvox.api.BatchSendFileChunkRequest
	(*BatchEvent)(nil),                // 17: lumenvox.api.BatchEvent
	(*AudioFormat)(nil),               // 18: lumenvox.api.AudioFormat
	(*status.Status)(nil),             // 19: google.rpc.Status
}
var file_lumenvox_api_batch_proto_depIdxs = []int32{
	1,  // 0: lumenvox.api.BatchRequest.create:type_name -> lumenvox.api.BatchCreateRequest
	2,  // 1: lumenvox.api.BatchRequest.attach:type_name -> lumenvox.api.BatchAttachRequest
	14, // 2: lumenvox.api.BatchRequest.create_file:type_name -> lumenvox.api.BatchCreateFileRequest
	16, // 3: lumenvox.api.BatchRequest.send_file_chunk:type_name -> lumenvox.api.BatchSendFileChunkRequest
	3,  // 4: lumenvox.api.BatchRequest.status:type_name -> lumenvox.api.BatchStatusRequest
	12, // 5: lumenvox.api.BatchRequest.close:type_name -> lumenvox.api.BatchCloseRequest
	4,  // 6: lumenvox.api.BatchCreateRequest.batch_config:type_name -> lumenvox.api.BatchConfig
	7,  // 7: lumenvox.api.BatchStatusRequest.batch_status:type_name -> lumenvox.api.BatchStatus
	5,  // 8: lumenvox.api.BatchConfig.transcription_batch_config:type_name -> lumenvox.api.TranscriptionBatchConfig
	6,  // 9: lumenvox.api.BatchConfig.asr_batch_config:type_name -> lumenvox.api.AsrBatchConfig
	8,  // 10: lumenvox.api.BatchStatus.transcription_batch_status:type_name -> lumenvox.api.TranscriptionBatchStatus
	9,  // 11: lumenvox.api.BatchStatus.asr_batch_status:type_name -> lumenvox.api.AsrBatchStatus
	11, // 12: lumenvox.api.BatchResponse.batch_callback:type_name -> lumenvox.api.BatchCallbackResponse
	7,  // 13: lumenvox.api.BatchCallbackResponse.batch_status:type_name -> lumenvox.api.BatchStatus
	13, // 14: lumenvox.api.BatchCallbackResponse.batch_result:type_name -> lumenvox.api.BatchResult
	17, // 15: lumenvox.api.BatchCallbackResponse.batch_event:type_name -> lumenvox.api.BatchEvent
	18, // 16: lumenvox.api.BatchCreateFileRequest.batch_audio_format:type_name -> lumenvox.api.AudioFormat
	19, // 17: lumenvox.api.BatchEvent.status_message:type_name -> google.rpc.Status
	0,  // 18: lumenvox.api.Batch.Batch:input_type -> lumenvox.api.BatchRequest
	10, // 19: lumenvox.api.Batch.Batch:output_type -> lumenvox.api.BatchResponse
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_lumenvox_api_batch_proto_init() }
func file_lumenvox_api_batch_proto_init() {
	if File_lumenvox_api_batch_proto != nil {
		return
	}
	file_lumenvox_api_audio_formats_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionBatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsrBatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionBatchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsrBatchStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCallbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSendFileChunkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_batch_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_batch_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BatchRequest_Create)(nil),
		(*BatchRequest_Attach)(nil),
		(*BatchRequest_CreateFile)(nil),
		(*BatchRequest_SendFileChunk)(nil),
		(*BatchRequest_Status)(nil),
		(*BatchRequest_Close)(nil),
	}
	file_lumenvox_api_batch_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*BatchConfig_TranscriptionBatchConfig)(nil),
		(*BatchConfig_AsrBatchConfig)(nil),
	}
	file_lumenvox_api_batch_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BatchStatus_TranscriptionBatchStatus)(nil),
		(*BatchStatus_AsrBatchStatus)(nil),
	}
	file_lumenvox_api_batch_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*BatchResponse_BatchCallback)(nil),
	}
	file_lumenvox_api_batch_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*BatchCallbackResponse_BatchId)(nil),
		(*BatchCallbackResponse_BatchStatus)(nil),
		(*BatchCallbackResponse_BatchResult)(nil),
		(*BatchCallbackResponse_BatchEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_batch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lumenvox_api_batch_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_batch_proto_depIdxs,
		MessageInfos:      file_lumenvox_api_batch_proto_msgTypes,
	}.Build()
	File_lumenvox_api_batch_proto = out.File
	file_lumenvox_api_batch_proto_rawDesc = nil
	file_lumenvox_api_batch_proto_goTypes = nil
	file_lumenvox_api_batch_proto_depIdxs = nil
}
