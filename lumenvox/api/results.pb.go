// Protocol Buffer File
// This is the gRPC definition for Results messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/results.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of Interaction FinalResult Statuses
type FinalResultStatus int32

const (
	// No final status specified
	FinalResultStatus_FINAL_RESULT_STATUS_UNSPECIFIED FinalResultStatus = 0
	// No voice audio detected within the audio
	// The final_result field in FinalResult will be empty
	FinalResultStatus_FINAL_RESULT_STATUS_NO_INPUT FinalResultStatus = 1
	// An error occurred that stopped processing
	FinalResultStatus_FINAL_RESULT_STATUS_ERROR FinalResultStatus = 2
	// Interaction cancelled or closed before results can be returned
	FinalResultStatus_FINAL_RESULT_STATUS_CANCELLED FinalResultStatus = 3
	// A transcription result was returned
	FinalResultStatus_FINAL_RESULT_STATUS_TRANSCRIPTION_MATCH FinalResultStatus = 11
	// A transcription “intermediate” final result was returned
	FinalResultStatus_FINAL_RESULT_STATUS_TRANSCRIPTION_CONTINUOUS_MATCH FinalResultStatus = 12
	// A transcription result was returned,
	// which contains one or more embedded grammar matches
	FinalResultStatus_FINAL_RESULT_STATUS_TRANSCRIPTION_GRAMMAR_MATCHES FinalResultStatus = 13
	// A enhanced transcription result was returned, but no SISR
	FinalResultStatus_FINAL_RESULT_STATUS_TRANSCRIPTION_PARTIAL_MATCH FinalResultStatus = 14
	// A complete grammar match was returned
	FinalResultStatus_FINAL_RESULT_STATUS_GRAMMAR_MATCH FinalResultStatus = 21
	// No result could be obtained for the audio with the supplied grammars
	FinalResultStatus_FINAL_RESULT_STATUS_GRAMMAR_NO_MATCH FinalResultStatus = 22
	// Raw text is returned, but could not be parsed with the supplied grammars
	FinalResultStatus_FINAL_RESULT_STATUS_GRAMMAR_PARTIAL_MATCH FinalResultStatus = 23
	// An AMD interaction found one or more tones within the audio
	FinalResultStatus_FINAL_RESULT_STATUS_AMD_TONE FinalResultStatus = 31
	// An AMD interaction found no tones within the audio
	FinalResultStatus_FINAL_RESULT_STATUS_AMD_NO_TONES FinalResultStatus = 32
	// A CPA interaction result was returned
	FinalResultStatus_FINAL_RESULT_STATUS_CPA_RESULT FinalResultStatus = 41
	// No voice audio was detected for a CPA interaction
	FinalResultStatus_FINAL_RESULT_STATUS_CPA_SILENCE FinalResultStatus = 42
	// TTS audio is available to pull
	FinalResultStatus_FINAL_RESULT_STATUS_TTS_READY FinalResultStatus = 51
	// An inverse text normalization result was returned for a NormalizeText interaction.
	FinalResultStatus_FINAL_RESULT_STATUS_TEXT_NORMALIZE_RESULT FinalResultStatus = 61
	// An NLU result was returned for a requested interaction
	FinalResultStatus_FINAL_RESULT_STATUS_NLU_RESULT FinalResultStatus = 71
	// A diarization result was returned for a requested interaction
	FinalResultStatus_FINAL_RESULT_STATUS_DIARIZATION_RESULT FinalResultStatus = 81
	// A language ID result was returned for a requested interaction
	FinalResultStatus_FINAL_RESULT_STATUS_LANGUAGE_ID_RESULT FinalResultStatus = 91
)

// Enum value maps for FinalResultStatus.
var (
	FinalResultStatus_name = map[int32]string{
		0:  "FINAL_RESULT_STATUS_UNSPECIFIED",
		1:  "FINAL_RESULT_STATUS_NO_INPUT",
		2:  "FINAL_RESULT_STATUS_ERROR",
		3:  "FINAL_RESULT_STATUS_CANCELLED",
		11: "FINAL_RESULT_STATUS_TRANSCRIPTION_MATCH",
		12: "FINAL_RESULT_STATUS_TRANSCRIPTION_CONTINUOUS_MATCH",
		13: "FINAL_RESULT_STATUS_TRANSCRIPTION_GRAMMAR_MATCHES",
		14: "FINAL_RESULT_STATUS_TRANSCRIPTION_PARTIAL_MATCH",
		21: "FINAL_RESULT_STATUS_GRAMMAR_MATCH",
		22: "FINAL_RESULT_STATUS_GRAMMAR_NO_MATCH",
		23: "FINAL_RESULT_STATUS_GRAMMAR_PARTIAL_MATCH",
		31: "FINAL_RESULT_STATUS_AMD_TONE",
		32: "FINAL_RESULT_STATUS_AMD_NO_TONES",
		41: "FINAL_RESULT_STATUS_CPA_RESULT",
		42: "FINAL_RESULT_STATUS_CPA_SILENCE",
		51: "FINAL_RESULT_STATUS_TTS_READY",
		61: "FINAL_RESULT_STATUS_TEXT_NORMALIZE_RESULT",
		71: "FINAL_RESULT_STATUS_NLU_RESULT",
		81: "FINAL_RESULT_STATUS_DIARIZATION_RESULT",
		91: "FINAL_RESULT_STATUS_LANGUAGE_ID_RESULT",
	}
	FinalResultStatus_value = map[string]int32{
		"FINAL_RESULT_STATUS_UNSPECIFIED":                    0,
		"FINAL_RESULT_STATUS_NO_INPUT":                       1,
		"FINAL_RESULT_STATUS_ERROR":                          2,
		"FINAL_RESULT_STATUS_CANCELLED":                      3,
		"FINAL_RESULT_STATUS_TRANSCRIPTION_MATCH":            11,
		"FINAL_RESULT_STATUS_TRANSCRIPTION_CONTINUOUS_MATCH": 12,
		"FINAL_RESULT_STATUS_TRANSCRIPTION_GRAMMAR_MATCHES":  13,
		"FINAL_RESULT_STATUS_TRANSCRIPTION_PARTIAL_MATCH":    14,
		"FINAL_RESULT_STATUS_GRAMMAR_MATCH":                  21,
		"FINAL_RESULT_STATUS_GRAMMAR_NO_MATCH":               22,
		"FINAL_RESULT_STATUS_GRAMMAR_PARTIAL_MATCH":          23,
		"FINAL_RESULT_STATUS_AMD_TONE":                       31,
		"FINAL_RESULT_STATUS_AMD_NO_TONES":                   32,
		"FINAL_RESULT_STATUS_CPA_RESULT":                     41,
		"FINAL_RESULT_STATUS_CPA_SILENCE":                    42,
		"FINAL_RESULT_STATUS_TTS_READY":                      51,
		"FINAL_RESULT_STATUS_TEXT_NORMALIZE_RESULT":          61,
		"FINAL_RESULT_STATUS_NLU_RESULT":                     71,
		"FINAL_RESULT_STATUS_DIARIZATION_RESULT":             81,
		"FINAL_RESULT_STATUS_LANGUAGE_ID_RESULT":             91,
	}
)

func (x FinalResultStatus) Enum() *FinalResultStatus {
	p := new(FinalResultStatus)
	*p = x
	return p
}

func (x FinalResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_results_proto_enumTypes[0].Descriptor()
}

func (FinalResultStatus) Type() protoreflect.EnumType {
	return &file_lumenvox_api_results_proto_enumTypes[0]
}

func (x FinalResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalResultStatus.Descriptor instead.
func (FinalResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{0}
}

// One word that is part of an ASR result.
type Word struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time in milliseconds since beginning of audio where word starts.
	StartTimeMs int32 `protobuf:"varint,1,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	// Length of word in milliseconds.
	DurationMs int32 `protobuf:"varint,2,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// String output of word.
	Word string `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	// Value 0 to 1000 on how confident the result is.
	Confidence uint32 `protobuf:"varint,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *Word) Reset() {
	*x = Word{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Word) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Word) ProtoMessage() {}

func (x *Word) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Word.ProtoReflect.Descriptor instead.
func (*Word) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{0}
}

func (x *Word) GetStartTimeMs() int32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *Word) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Word) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Word) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// Raw transcript of words decoded by ASR
type AsrResultMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All words in Phrase so far.
	Words []*Word `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
	// All words in single string.
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Time in milliseconds since beginning of audio stream where recognition
	// starts.
	StartTimeMs int32 `protobuf:"varint,3,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	// Length of transcript in milliseconds.
	DurationMs int32 `protobuf:"varint,4,opt,name=duration_ms,json=durationMs,proto3" json:"duration_ms,omitempty"`
	// Overall confidence of the entire transcript.
	Confidence uint32 `protobuf:"varint,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *AsrResultMetaData) Reset() {
	*x = AsrResultMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsrResultMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsrResultMetaData) ProtoMessage() {}

func (x *AsrResultMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsrResultMetaData.ProtoReflect.Descriptor instead.
func (*AsrResultMetaData) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{1}
}

func (x *AsrResultMetaData) GetWords() []*Word {
	if x != nil {
		return x.Words
	}
	return nil
}

func (x *AsrResultMetaData) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *AsrResultMetaData) GetStartTimeMs() int32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *AsrResultMetaData) GetDurationMs() int32 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *AsrResultMetaData) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// Semantic Interpretation of an ASR result
type SemanticInterpretation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Structure containing Semantic Interpretation.
	Interpretation *structpb.Struct `protobuf:"bytes,1,opt,name=interpretation,proto3" json:"interpretation,omitempty"`
	// Json string containing Semantic interpretation.
	InterpretationJson string `protobuf:"bytes,2,opt,name=interpretation_json,json=interpretationJson,proto3" json:"interpretation_json,omitempty"`
	// The label of the grammar used to generate this Semantic Interpretation.
	GrammarLabel string `protobuf:"bytes,3,opt,name=grammar_label,json=grammarLabel,proto3" json:"grammar_label,omitempty"`
	// Value 0 to 1000 of how confident the ASR is that result is correct match
	Confidence uint32 `protobuf:"varint,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// Tag Format of in grammar used to generate this Semantic Interpretation.
	TagFormat string `protobuf:"bytes,5,opt,name=tag_format,json=tagFormat,proto3" json:"tag_format,omitempty"`
	// Raw input text for the interpretation
	InputText string `protobuf:"bytes,6,opt,name=input_text,json=inputText,proto3" json:"input_text,omitempty"`
}

func (x *SemanticInterpretation) Reset() {
	*x = SemanticInterpretation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemanticInterpretation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticInterpretation) ProtoMessage() {}

func (x *SemanticInterpretation) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticInterpretation.ProtoReflect.Descriptor instead.
func (*SemanticInterpretation) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{2}
}

func (x *SemanticInterpretation) GetInterpretation() *structpb.Struct {
	if x != nil {
		return x.Interpretation
	}
	return nil
}

func (x *SemanticInterpretation) GetInterpretationJson() string {
	if x != nil {
		return x.InterpretationJson
	}
	return ""
}

func (x *SemanticInterpretation) GetGrammarLabel() string {
	if x != nil {
		return x.GrammarLabel
	}
	return ""
}

func (x *SemanticInterpretation) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *SemanticInterpretation) GetTagFormat() string {
	if x != nil {
		return x.TagFormat
	}
	return ""
}

func (x *SemanticInterpretation) GetInputText() string {
	if x != nil {
		return x.InputText
	}
	return ""
}

// Structure to hold data provided from ASR as final results
type AsrGrammarResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw ASR output used to produce semantic interpretations
	AsrResultMetaData *AsrResultMetaData `protobuf:"bytes,1,opt,name=asr_result_meta_data,json=asrResultMetaData,proto3" json:"asr_result_meta_data,omitempty"`
	// List of all possible semantic interpretations for given transcript.
	SemanticInterpretations []*SemanticInterpretation `protobuf:"bytes,2,rep,name=semantic_interpretations,json=semanticInterpretations,proto3" json:"semantic_interpretations,omitempty"`
}

func (x *AsrGrammarResult) Reset() {
	*x = AsrGrammarResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsrGrammarResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsrGrammarResult) ProtoMessage() {}

func (x *AsrGrammarResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsrGrammarResult.ProtoReflect.Descriptor instead.
func (*AsrGrammarResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{3}
}

func (x *AsrGrammarResult) GetAsrResultMetaData() *AsrResultMetaData {
	if x != nil {
		return x.AsrResultMetaData
	}
	return nil
}

func (x *AsrGrammarResult) GetSemanticInterpretations() []*SemanticInterpretation {
	if x != nil {
		return x.SemanticInterpretations
	}
	return nil
}

// Structure to hold data provided from ASR as final results
type TranscriptionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw ASR output which includes the transcript of the audio.
	AsrResultMetaData *AsrResultMetaData `protobuf:"bytes,1,opt,name=asr_result_meta_data,json=asrResultMetaData,proto3" json:"asr_result_meta_data,omitempty"`
	// If results are to be normalized, Normalized Result is added here.
	NormalizedResult *NormalizedResult `protobuf:"bytes,2,opt,name=normalized_result,json=normalizedResult,proto3" json:"normalized_result,omitempty"`
	// If enhanced transcription with grammars is used results are added here.
	GrammarResults []*AsrGrammarResult `protobuf:"bytes,3,rep,name=grammar_results,json=grammarResults,proto3" json:"grammar_results,omitempty"`
	// If SRT generation is enabled, the SRT file is added here.
	SrtFile []byte `protobuf:"bytes,4,opt,name=srt_file,json=srtFile,proto3" json:"srt_file,omitempty"`
	// If VTT generation is enabled, the VTT file is added here.
	VttFile []byte `protobuf:"bytes,5,opt,name=vtt_file,json=vttFile,proto3" json:"vtt_file,omitempty"`
	// Optional blended quality transcription score
	BlendedScore *OptionalFloat `protobuf:"bytes,6,opt,name=blended_score,json=blendedScore,proto3" json:"blended_score,omitempty"`
}

func (x *TranscriptionResult) Reset() {
	*x = TranscriptionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionResult) ProtoMessage() {}

func (x *TranscriptionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionResult.ProtoReflect.Descriptor instead.
func (*TranscriptionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{4}
}

func (x *TranscriptionResult) GetAsrResultMetaData() *AsrResultMetaData {
	if x != nil {
		return x.AsrResultMetaData
	}
	return nil
}

func (x *TranscriptionResult) GetNormalizedResult() *NormalizedResult {
	if x != nil {
		return x.NormalizedResult
	}
	return nil
}

func (x *TranscriptionResult) GetGrammarResults() []*AsrGrammarResult {
	if x != nil {
		return x.GrammarResults
	}
	return nil
}

func (x *TranscriptionResult) GetSrtFile() []byte {
	if x != nil {
		return x.SrtFile
	}
	return nil
}

func (x *TranscriptionResult) GetVttFile() []byte {
	if x != nil {
		return x.VttFile
	}
	return nil
}

func (x *TranscriptionResult) GetBlendedScore() *OptionalFloat {
	if x != nil {
		return x.BlendedScore
	}
	return nil
}

// Result returned from an AMD interaction.
type AmdInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AMD result in the form of an ASR-type message.
	AmdResult *AsrGrammarResult `protobuf:"bytes,1,opt,name=amd_result,json=amdResult,proto3" json:"amd_result,omitempty"`
}

func (x *AmdInteractionResult) Reset() {
	*x = AmdInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmdInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmdInteractionResult) ProtoMessage() {}

func (x *AmdInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmdInteractionResult.ProtoReflect.Descriptor instead.
func (*AmdInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{5}
}

func (x *AmdInteractionResult) GetAmdResult() *AsrGrammarResult {
	if x != nil {
		return x.AmdResult
	}
	return nil
}

// Result returned from an ASR interaction.
type AsrInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of the N best possible matches provided via ASR.
	NBests []*AsrGrammarResult `protobuf:"bytes,1,rep,name=n_bests,json=nBests,proto3" json:"n_bests,omitempty"`
	// The modality of the input, for example, speech, dtmf, etc.
	InputMode string `protobuf:"bytes,2,opt,name=input_mode,json=inputMode,proto3" json:"input_mode,omitempty"`
	// Language defined when creating the interaction.
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *AsrInteractionResult) Reset() {
	*x = AsrInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsrInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsrInteractionResult) ProtoMessage() {}

func (x *AsrInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsrInteractionResult.ProtoReflect.Descriptor instead.
func (*AsrInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{6}
}

func (x *AsrInteractionResult) GetNBests() []*AsrGrammarResult {
	if x != nil {
		return x.NBests
	}
	return nil
}

func (x *AsrInteractionResult) GetInputMode() string {
	if x != nil {
		return x.InputMode
	}
	return ""
}

func (x *AsrInteractionResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Result returned from a CPA interaction.
type CpaInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPA result in the form of an ASR-type message.
	CpaResult *AsrGrammarResult `protobuf:"bytes,1,opt,name=cpa_result,json=cpaResult,proto3" json:"cpa_result,omitempty"`
}

func (x *CpaInteractionResult) Reset() {
	*x = CpaInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpaInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpaInteractionResult) ProtoMessage() {}

func (x *CpaInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpaInteractionResult.ProtoReflect.Descriptor instead.
func (*CpaInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{7}
}

func (x *CpaInteractionResult) GetCpaResult() *AsrGrammarResult {
	if x != nil {
		return x.CpaResult
	}
	return nil
}

// Result returned from an NLU interaction.
type NluInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If summarization bullet points are specified, bullet points are added here.
	SummaryBulletPoints []string `protobuf:"bytes,1,rep,name=summary_bullet_points,json=summaryBulletPoints,proto3" json:"summary_bullet_points,omitempty"`
	// If summarization number of words is specified, summary is added here.
	SummaryWords string `protobuf:"bytes,2,opt,name=summary_words,json=summaryWords,proto3" json:"summary_words,omitempty"`
	// If translation is specified, translation is added here.
	TranslationResult string `protobuf:"bytes,3,opt,name=translation_result,json=translationResult,proto3" json:"translation_result,omitempty"`
	// If alternate translations are enabled, alternate translations are added here.
	TranslationAlternateResults []string `protobuf:"bytes,4,rep,name=translation_alternate_results,json=translationAlternateResults,proto3" json:"translation_alternate_results,omitempty"`
	// If language detection is enable, detected language is added here.
	LanguageDetectResult string `protobuf:"bytes,5,opt,name=language_detect_result,json=languageDetectResult,proto3" json:"language_detect_result,omitempty"`
	// If topic detection is enabled, detected topic is added here.
	TopicDetectResult string `protobuf:"bytes,6,opt,name=topic_detect_result,json=topicDetectResult,proto3" json:"topic_detect_result,omitempty"`
	// If outcome detection is specified, detected outcome is added here.
	OutcomeResult string `protobuf:"bytes,7,opt,name=outcome_result,json=outcomeResult,proto3" json:"outcome_result,omitempty"`
	// If sentiment analysis is enabled, sentiment result is added here.
	SentimentResult string `protobuf:"bytes,8,opt,name=sentiment_result,json=sentimentResult,proto3" json:"sentiment_result,omitempty"`
}

func (x *NluInteractionResult) Reset() {
	*x = NluInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NluInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NluInteractionResult) ProtoMessage() {}

func (x *NluInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NluInteractionResult.ProtoReflect.Descriptor instead.
func (*NluInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{8}
}

func (x *NluInteractionResult) GetSummaryBulletPoints() []string {
	if x != nil {
		return x.SummaryBulletPoints
	}
	return nil
}

func (x *NluInteractionResult) GetSummaryWords() string {
	if x != nil {
		return x.SummaryWords
	}
	return ""
}

func (x *NluInteractionResult) GetTranslationResult() string {
	if x != nil {
		return x.TranslationResult
	}
	return ""
}

func (x *NluInteractionResult) GetTranslationAlternateResults() []string {
	if x != nil {
		return x.TranslationAlternateResults
	}
	return nil
}

func (x *NluInteractionResult) GetLanguageDetectResult() string {
	if x != nil {
		return x.LanguageDetectResult
	}
	return ""
}

func (x *NluInteractionResult) GetTopicDetectResult() string {
	if x != nil {
		return x.TopicDetectResult
	}
	return ""
}

func (x *NluInteractionResult) GetOutcomeResult() string {
	if x != nil {
		return x.OutcomeResult
	}
	return ""
}

func (x *NluInteractionResult) GetSentimentResult() string {
	if x != nil {
		return x.SentimentResult
	}
	return ""
}

// Result returned from a Diarization interaction.
type DiarizationInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*DiarizationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *DiarizationInteractionResult) Reset() {
	*x = DiarizationInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationInteractionResult) ProtoMessage() {}

func (x *DiarizationInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationInteractionResult.ProtoReflect.Descriptor instead.
func (*DiarizationInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{9}
}

func (x *DiarizationInteractionResult) GetResults() []*DiarizationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Identifies which speaker is detected within a segment of audio
type DiarizationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies which speaker is detected within this segment
	Label int32 `protobuf:"varint,1,opt,name=label,proto3" json:"label,omitempty"`
	// Start time in milliseconds
	StartTimeMs int32 `protobuf:"varint,2,opt,name=start_time_ms,json=startTimeMs,proto3" json:"start_time_ms,omitempty"`
	// End time in milliseconds
	EndTimeMs int32 `protobuf:"varint,3,opt,name=end_time_ms,json=endTimeMs,proto3" json:"end_time_ms,omitempty"`
}

func (x *DiarizationResult) Reset() {
	*x = DiarizationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiarizationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiarizationResult) ProtoMessage() {}

func (x *DiarizationResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiarizationResult.ProtoReflect.Descriptor instead.
func (*DiarizationResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{10}
}

func (x *DiarizationResult) GetLabel() int32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *DiarizationResult) GetStartTimeMs() int32 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *DiarizationResult) GetEndTimeMs() int32 {
	if x != nil {
		return x.EndTimeMs
	}
	return 0
}

// Result returned from a LanguageId interaction.
type LanguageIdInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*LanguageIdResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *LanguageIdInteractionResult) Reset() {
	*x = LanguageIdInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageIdInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageIdInteractionResult) ProtoMessage() {}

func (x *LanguageIdInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageIdInteractionResult.ProtoReflect.Descriptor instead.
func (*LanguageIdInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{11}
}

func (x *LanguageIdInteractionResult) GetResults() []*LanguageIdResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Identifies the language detected within the processed audio and its
// confidence score.
type LanguageIdResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies which speaker is detected within this segment
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Value 0 to 1000 on how confident the result is.
	Confidence uint32 `protobuf:"varint,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *LanguageIdResult) Reset() {
	*x = LanguageIdResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageIdResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageIdResult) ProtoMessage() {}

func (x *LanguageIdResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageIdResult.ProtoReflect.Descriptor instead.
func (*LanguageIdResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{12}
}

func (x *LanguageIdResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *LanguageIdResult) GetConfidence() uint32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// Result returned from a transcription interaction.
type TranscriptionInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of the N best possible matches provided via ASR.
	NBests []*TranscriptionResult `protobuf:"bytes,1,rep,name=n_bests,json=nBests,proto3" json:"n_bests,omitempty"`
	// Language defined when creating the interaction.
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *TranscriptionInteractionResult) Reset() {
	*x = TranscriptionInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptionInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptionInteractionResult) ProtoMessage() {}

func (x *TranscriptionInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptionInteractionResult.ProtoReflect.Descriptor instead.
func (*TranscriptionInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{13}
}

func (x *TranscriptionInteractionResult) GetNBests() []*TranscriptionResult {
	if x != nil {
		return x.NBests
	}
	return nil
}

func (x *TranscriptionInteractionResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Result returned from grammar parse interaction.
type GrammarParseInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input string used during grammar parse
	InputText string `protobuf:"bytes,1,opt,name=input_text,json=inputText,proto3" json:"input_text,omitempty"`
	// List of all possible semantic interpretations for given text.
	SemanticInterpretations []*SemanticInterpretation `protobuf:"bytes,2,rep,name=semantic_interpretations,json=semanticInterpretations,proto3" json:"semantic_interpretations,omitempty"`
	// The modality of the input, for example, speech, dtmf, etc.
	InputMode string `protobuf:"bytes,3,opt,name=input_mode,json=inputMode,proto3" json:"input_mode,omitempty"`
	// Language defined when creating the interaction.
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Set to true if more input on input text is valid of interaction grammars.
	HasNextTransition bool `protobuf:"varint,5,opt,name=has_next_transition,json=hasNextTransition,proto3" json:"has_next_transition,omitempty"`
}

func (x *GrammarParseInteractionResult) Reset() {
	*x = GrammarParseInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrammarParseInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrammarParseInteractionResult) ProtoMessage() {}

func (x *GrammarParseInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrammarParseInteractionResult.ProtoReflect.Descriptor instead.
func (*GrammarParseInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{14}
}

func (x *GrammarParseInteractionResult) GetInputText() string {
	if x != nil {
		return x.InputText
	}
	return ""
}

func (x *GrammarParseInteractionResult) GetSemanticInterpretations() []*SemanticInterpretation {
	if x != nil {
		return x.SemanticInterpretations
	}
	return nil
}

func (x *GrammarParseInteractionResult) GetInputMode() string {
	if x != nil {
		return x.InputMode
	}
	return ""
}

func (x *GrammarParseInteractionResult) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GrammarParseInteractionResult) GetHasNextTransition() bool {
	if x != nil {
		return x.HasNextTransition
	}
	return false
}

// Token used in Inverse Text Normalization
type InverseTextNormalizationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of token.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// All data in token
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *InverseTextNormalizationToken) Reset() {
	*x = InverseTextNormalizationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InverseTextNormalizationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InverseTextNormalizationToken) ProtoMessage() {}

func (x *InverseTextNormalizationToken) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InverseTextNormalizationToken.ProtoReflect.Descriptor instead.
func (*InverseTextNormalizationToken) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{15}
}

func (x *InverseTextNormalizationToken) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *InverseTextNormalizationToken) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// More detail on Redacted tokens
type RedactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Redacted Personal Identifiable Information.
	PersonalIdentifiableInformation bool `protobuf:"varint,1,opt,name=personal_identifiable_information,json=personalIdentifiableInformation,proto3" json:"personal_identifiable_information,omitempty"`
	// Type of redaction
	Entity string `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	// Redaction Score
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *RedactionData) Reset() {
	*x = RedactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactionData) ProtoMessage() {}

func (x *RedactionData) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactionData.ProtoReflect.Descriptor instead.
func (*RedactionData) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{16}
}

func (x *RedactionData) GetPersonalIdentifiableInformation() bool {
	if x != nil {
		return x.PersonalIdentifiableInformation
	}
	return false
}

func (x *RedactionData) GetEntity() string {
	if x != nil {
		return x.Entity
	}
	return ""
}

func (x *RedactionData) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// One segment (one or more words) that is part of a result phrase.
type NormalizationSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input word used to create segment.
	OriginalSegment string `protobuf:"bytes,1,opt,name=original_segment,json=originalSegment,proto3" json:"original_segment,omitempty"`
	// Index to words in original input.
	OriginalWordIndices []uint32 `protobuf:"varint,2,rep,packed,name=original_word_indices,json=originalWordIndices,proto3" json:"original_word_indices,omitempty"`
	// Output after Inverse Text normalization.
	Vocalization string `protobuf:"bytes,3,opt,name=vocalization,proto3" json:"vocalization,omitempty"`
	// Token information used in Inverse Text normalization.
	Token *InverseTextNormalizationToken `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// Data add for redaction.
	Redaction *RedactionData `protobuf:"bytes,5,opt,name=redaction,proto3" json:"redaction,omitempty"`
	// Final output for segment.
	Final string `protobuf:"bytes,6,opt,name=final,proto3" json:"final,omitempty"`
}

func (x *NormalizationSegment) Reset() {
	*x = NormalizationSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizationSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizationSegment) ProtoMessage() {}

func (x *NormalizationSegment) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizationSegment.ProtoReflect.Descriptor instead.
func (*NormalizationSegment) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{17}
}

func (x *NormalizationSegment) GetOriginalSegment() string {
	if x != nil {
		return x.OriginalSegment
	}
	return ""
}

func (x *NormalizationSegment) GetOriginalWordIndices() []uint32 {
	if x != nil {
		return x.OriginalWordIndices
	}
	return nil
}

func (x *NormalizationSegment) GetVocalization() string {
	if x != nil {
		return x.Vocalization
	}
	return ""
}

func (x *NormalizationSegment) GetToken() *InverseTextNormalizationToken {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *NormalizationSegment) GetRedaction() *RedactionData {
	if x != nil {
		return x.Redaction
	}
	return nil
}

func (x *NormalizationSegment) GetFinal() string {
	if x != nil {
		return x.Final
	}
	return ""
}

// Result returned from an Normalize Text. Used in either Transcription
// interaction or a Text Normalization interaction.
type NormalizedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All segments in result.
	Segments []*NormalizationSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	// Output after Inverse Text normalization.
	Verbalized string `protobuf:"bytes,2,opt,name=verbalized,proto3" json:"verbalized,omitempty"`
	// Output after Inverse Text normalization and redacted.
	VerbalizedRedacted string `protobuf:"bytes,3,opt,name=verbalized_redacted,json=verbalizedRedacted,proto3" json:"verbalized_redacted,omitempty"`
	// Final output after Inverse Text normalization and punctuation and
	// capitalization_normalization
	Final string `protobuf:"bytes,4,opt,name=final,proto3" json:"final,omitempty"`
	// Final output after Inverse Text normalization, punctuation and
	// capitalization_normalization, and redaction
	FinalRedacted string `protobuf:"bytes,5,opt,name=final_redacted,json=finalRedacted,proto3" json:"final_redacted,omitempty"`
}

func (x *NormalizedResult) Reset() {
	*x = NormalizedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizedResult) ProtoMessage() {}

func (x *NormalizedResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizedResult.ProtoReflect.Descriptor instead.
func (*NormalizedResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{18}
}

func (x *NormalizedResult) GetSegments() []*NormalizationSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *NormalizedResult) GetVerbalized() string {
	if x != nil {
		return x.Verbalized
	}
	return ""
}

func (x *NormalizedResult) GetVerbalizedRedacted() string {
	if x != nil {
		return x.VerbalizedRedacted
	}
	return ""
}

func (x *NormalizedResult) GetFinal() string {
	if x != nil {
		return x.Final
	}
	return ""
}

func (x *NormalizedResult) GetFinalRedacted() string {
	if x != nil {
		return x.FinalRedacted
	}
	return ""
}

// Result returned from an Normalize Text interaction.
type NormalizeTextResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input string used for the text normalization request
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Normalized result message
	NormalizedResult *NormalizedResult `protobuf:"bytes,2,opt,name=normalized_result,json=normalizedResult,proto3" json:"normalized_result,omitempty"`
}

func (x *NormalizeTextResult) Reset() {
	*x = NormalizeTextResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalizeTextResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeTextResult) ProtoMessage() {}

func (x *NormalizeTextResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeTextResult.ProtoReflect.Descriptor instead.
func (*NormalizeTextResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{19}
}

func (x *NormalizeTextResult) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *NormalizeTextResult) GetNormalizedResult() *NormalizedResult {
	if x != nil {
		return x.NormalizedResult
	}
	return nil
}

// Warning generated by a synthesis
type SynthesisWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String containing warning message returned from synthesizer
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Optional line indicating where the issue was detected
	Line *OptionalInt32 `protobuf:"bytes,2,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *SynthesisWarning) Reset() {
	*x = SynthesisWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesisWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisWarning) ProtoMessage() {}

func (x *SynthesisWarning) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisWarning.ProtoReflect.Descriptor instead.
func (*SynthesisWarning) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{20}
}

func (x *SynthesisWarning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SynthesisWarning) GetLine() *OptionalInt32 {
	if x != nil {
		return x.Line
	}
	return nil
}

// Description of some artifact within the synthesis
type SynthesisOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the artifact being referenced
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Offset in milliseconds to the named artifact
	OffsetMs uint32 `protobuf:"varint,2,opt,name=offset_ms,json=offsetMs,proto3" json:"offset_ms,omitempty"`
}

func (x *SynthesisOffset) Reset() {
	*x = SynthesisOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesisOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisOffset) ProtoMessage() {}

func (x *SynthesisOffset) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisOffset.ProtoReflect.Descriptor instead.
func (*SynthesisOffset) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{21}
}

func (x *SynthesisOffset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SynthesisOffset) GetOffsetMs() uint32 {
	if x != nil {
		return x.OffsetMs
	}
	return 0
}

// Contains a TTS interaction result.
type TtsInteractionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Format of returned audio.
	AudioFormat *AudioFormat `protobuf:"bytes,1,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
	// Length of generated audio data.
	AudioLengthMs uint32 `protobuf:"varint,2,opt,name=audio_length_ms,json=audioLengthMs,proto3" json:"audio_length_ms,omitempty"`
	// Offsets in milliseconds to where in audio buffer each synthesized sentence
	// begins.
	SentenceOffsetsMs []uint32 `protobuf:"varint,3,rep,packed,name=sentence_offsets_ms,json=sentenceOffsetsMs,proto3" json:"sentence_offsets_ms,omitempty"`
	// Offsets in milliseconds to where in audio buffer each synthesized word
	// begins.
	WordOffsetsMs []uint32 `protobuf:"varint,4,rep,packed,name=word_offsets_ms,json=wordOffsetsMs,proto3" json:"word_offsets_ms,omitempty"`
	// Offsets to where in audio buffer each synthesized SSML mark begins.
	SsmlMarkOffsets []*SynthesisOffset `protobuf:"bytes,5,rep,name=ssml_mark_offsets,json=ssmlMarkOffsets,proto3" json:"ssml_mark_offsets,omitempty"`
	// Offsets to where in audio voice each synthesized begins.
	VoiceOffsets []*SynthesisOffset `protobuf:"bytes,7,rep,name=voice_offsets,json=voiceOffsets,proto3" json:"voice_offsets,omitempty"`
	// List of any Synthesis warnings.
	SynthesisWarnings []*SynthesisWarning `protobuf:"bytes,8,rep,name=synthesis_warnings,json=synthesisWarnings,proto3" json:"synthesis_warnings,omitempty"`
}

func (x *TtsInteractionResult) Reset() {
	*x = TtsInteractionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsInteractionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsInteractionResult) ProtoMessage() {}

func (x *TtsInteractionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsInteractionResult.ProtoReflect.Descriptor instead.
func (*TtsInteractionResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{22}
}

func (x *TtsInteractionResult) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

func (x *TtsInteractionResult) GetAudioLengthMs() uint32 {
	if x != nil {
		return x.AudioLengthMs
	}
	return 0
}

func (x *TtsInteractionResult) GetSentenceOffsetsMs() []uint32 {
	if x != nil {
		return x.SentenceOffsetsMs
	}
	return nil
}

func (x *TtsInteractionResult) GetWordOffsetsMs() []uint32 {
	if x != nil {
		return x.WordOffsetsMs
	}
	return nil
}

func (x *TtsInteractionResult) GetSsmlMarkOffsets() []*SynthesisOffset {
	if x != nil {
		return x.SsmlMarkOffsets
	}
	return nil
}

func (x *TtsInteractionResult) GetVoiceOffsets() []*SynthesisOffset {
	if x != nil {
		return x.VoiceOffsets
	}
	return nil
}

func (x *TtsInteractionResult) GetSynthesisWarnings() []*SynthesisWarning {
	if x != nil {
		return x.SynthesisWarnings
	}
	return nil
}

// Contains results of various types that may be returned
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*Result_AsrInteractionResult
	//	*Result_TranscriptionInteractionResult
	//	*Result_GrammarParseInteractionResult
	//	*Result_TtsInteractionResult
	//	*Result_NormalizeTextResult
	//	*Result_AmdInteractionResult
	//	*Result_CpaInteractionResult
	//	*Result_NluInteractionResult
	//	*Result_DiarizationInteractionResult
	//	*Result_LanguageIdInteractionResult
	Result isResult_Result `protobuf_oneof:"result"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{23}
}

func (m *Result) GetResult() isResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Result) GetAsrInteractionResult() *AsrInteractionResult {
	if x, ok := x.GetResult().(*Result_AsrInteractionResult); ok {
		return x.AsrInteractionResult
	}
	return nil
}

func (x *Result) GetTranscriptionInteractionResult() *TranscriptionInteractionResult {
	if x, ok := x.GetResult().(*Result_TranscriptionInteractionResult); ok {
		return x.TranscriptionInteractionResult
	}
	return nil
}

func (x *Result) GetGrammarParseInteractionResult() *GrammarParseInteractionResult {
	if x, ok := x.GetResult().(*Result_GrammarParseInteractionResult); ok {
		return x.GrammarParseInteractionResult
	}
	return nil
}

func (x *Result) GetTtsInteractionResult() *TtsInteractionResult {
	if x, ok := x.GetResult().(*Result_TtsInteractionResult); ok {
		return x.TtsInteractionResult
	}
	return nil
}

func (x *Result) GetNormalizeTextResult() *NormalizeTextResult {
	if x, ok := x.GetResult().(*Result_NormalizeTextResult); ok {
		return x.NormalizeTextResult
	}
	return nil
}

func (x *Result) GetAmdInteractionResult() *AmdInteractionResult {
	if x, ok := x.GetResult().(*Result_AmdInteractionResult); ok {
		return x.AmdInteractionResult
	}
	return nil
}

func (x *Result) GetCpaInteractionResult() *CpaInteractionResult {
	if x, ok := x.GetResult().(*Result_CpaInteractionResult); ok {
		return x.CpaInteractionResult
	}
	return nil
}

func (x *Result) GetNluInteractionResult() *NluInteractionResult {
	if x, ok := x.GetResult().(*Result_NluInteractionResult); ok {
		return x.NluInteractionResult
	}
	return nil
}

func (x *Result) GetDiarizationInteractionResult() *DiarizationInteractionResult {
	if x, ok := x.GetResult().(*Result_DiarizationInteractionResult); ok {
		return x.DiarizationInteractionResult
	}
	return nil
}

func (x *Result) GetLanguageIdInteractionResult() *LanguageIdInteractionResult {
	if x, ok := x.GetResult().(*Result_LanguageIdInteractionResult); ok {
		return x.LanguageIdInteractionResult
	}
	return nil
}

type isResult_Result interface {
	isResult_Result()
}

type Result_AsrInteractionResult struct {
	// Results for an ASR interaction
	AsrInteractionResult *AsrInteractionResult `protobuf:"bytes,1,opt,name=asr_interaction_result,json=asrInteractionResult,proto3,oneof"`
}

type Result_TranscriptionInteractionResult struct {
	// Results for a transcription interaction
	TranscriptionInteractionResult *TranscriptionInteractionResult `protobuf:"bytes,2,opt,name=transcription_interaction_result,json=transcriptionInteractionResult,proto3,oneof"`
}

type Result_GrammarParseInteractionResult struct {
	// Results for a grammar parse interaction
	GrammarParseInteractionResult *GrammarParseInteractionResult `protobuf:"bytes,3,opt,name=grammar_parse_interaction_result,json=grammarParseInteractionResult,proto3,oneof"`
}

type Result_TtsInteractionResult struct {
	// Results for a TTS interaction
	TtsInteractionResult *TtsInteractionResult `protobuf:"bytes,4,opt,name=tts_interaction_result,json=ttsInteractionResult,proto3,oneof"`
}

type Result_NormalizeTextResult struct {
	// Result for a Normalize Text interaction
	NormalizeTextResult *NormalizeTextResult `protobuf:"bytes,5,opt,name=normalize_text_result,json=normalizeTextResult,proto3,oneof"`
}

type Result_AmdInteractionResult struct {
	// Result for an AMD interaction
	AmdInteractionResult *AmdInteractionResult `protobuf:"bytes,6,opt,name=amd_interaction_result,json=amdInteractionResult,proto3,oneof"`
}

type Result_CpaInteractionResult struct {
	// Result for a CPA interaction
	CpaInteractionResult *CpaInteractionResult `protobuf:"bytes,7,opt,name=cpa_interaction_result,json=cpaInteractionResult,proto3,oneof"`
}

type Result_NluInteractionResult struct {
	// Result for NLU interaction
	NluInteractionResult *NluInteractionResult `protobuf:"bytes,8,opt,name=nlu_interaction_result,json=nluInteractionResult,proto3,oneof"`
}

type Result_DiarizationInteractionResult struct {
	// Result for Diarization interaction
	DiarizationInteractionResult *DiarizationInteractionResult `protobuf:"bytes,9,opt,name=diarization_interaction_result,json=diarizationInteractionResult,proto3,oneof"`
}

type Result_LanguageIdInteractionResult struct {
	// Result for LanguageId interaction
	LanguageIdInteractionResult *LanguageIdInteractionResult `protobuf:"bytes,10,opt,name=language_id_interaction_result,json=languageIdInteractionResult,proto3,oneof"`
}

func (*Result_AsrInteractionResult) isResult_Result() {}

func (*Result_TranscriptionInteractionResult) isResult_Result() {}

func (*Result_GrammarParseInteractionResult) isResult_Result() {}

func (*Result_TtsInteractionResult) isResult_Result() {}

func (*Result_NormalizeTextResult) isResult_Result() {}

func (*Result_AmdInteractionResult) isResult_Result() {}

func (*Result_CpaInteractionResult) isResult_Result() {}

func (*Result_NluInteractionResult) isResult_Result() {}

func (*Result_DiarizationInteractionResult) isResult_Result() {}

func (*Result_LanguageIdInteractionResult) isResult_Result() {}

// Callback sent when a partial interaction result is available.
type PartialResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Partial result for the specified interaction
	PartialResult *Result `protobuf:"bytes,2,opt,name=partial_result,json=partialResult,proto3" json:"partial_result,omitempty"`
	// If set, this flag indicates that it is the last partial result message.
	// Currently, it is used only for continuous transcription.
	IsFinal bool `protobuf:"varint,3,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
}

func (x *PartialResult) Reset() {
	*x = PartialResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartialResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialResult) ProtoMessage() {}

func (x *PartialResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialResult.ProtoReflect.Descriptor instead.
func (*PartialResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{24}
}

func (x *PartialResult) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *PartialResult) GetPartialResult() *Result {
	if x != nil {
		return x.PartialResult
	}
	return nil
}

func (x *PartialResult) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

// Callback sent when a final interaction result is ready.
type FinalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// Final result for the specified interaction. Null if status error > 0
	FinalResult *Result `protobuf:"bytes,2,opt,name=final_result,json=finalResult,proto3" json:"final_result,omitempty"`
	// Final status of the interaction
	FinalResultStatus FinalResultStatus `protobuf:"varint,3,opt,name=final_result_status,json=finalResultStatus,proto3,enum=lumenvox.api.FinalResultStatus" json:"final_result_status,omitempty"`
	// Status code produced. Returns 0 on success.
	// this is comming form the 'internal' result message
	// and should be passed to the caller
	// shall we include the error here ???
	// or better send it as a SessionEvent ??
	Status *status.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *FinalResult) Reset() {
	*x = FinalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_results_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalResult) ProtoMessage() {}

func (x *FinalResult) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_results_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalResult.ProtoReflect.Descriptor instead.
func (*FinalResult) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_results_proto_rawDescGZIP(), []int{25}
}

func (x *FinalResult) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *FinalResult) GetFinalResult() *Result {
	if x != nil {
		return x.FinalResult
	}
	return nil
}

func (x *FinalResult) GetFinalResultStatus() FinalResultStatus {
	if x != nil {
		return x.FinalResultStatus
	}
	return FinalResultStatus_FINAL_RESULT_STATUS_UNSPECIFIED
}

func (x *FinalResult) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_lumenvox_api_results_proto protoreflect.FileDescriptor

var file_lumenvox_api_results_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72,
	0x64, 0x52, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x8d, 0x02,
	0x0a, 0x16, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc5, 0x01,
	0x0a, 0x10, 0x41, 0x73, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x61, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x73, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x61, 0x73, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5f, 0x0a, 0x18, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x14, 0x61, 0x73, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x61, 0x73,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4b, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x0f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x74, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x76, 0x74, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x62,
	0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x0c, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x55, 0x0a,
	0x14, 0x41, 0x6d, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x47, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x61, 0x6d, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x14, 0x41, 0x73, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a,
	0x07, 0x6e, 0x5f, 0x62, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73,
	0x72, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x6e, 0x42, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x55, 0x0a, 0x14, 0x43, 0x70, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x70, 0x61,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72,
	0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x63,
	0x70, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9a, 0x03, 0x0a, 0x14, 0x4e, 0x6c, 0x75,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x75, 0x6c, 0x6c, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59, 0x0a, 0x1c, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x6d, 0x0a, 0x11, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22,
	0x57, 0x0a, 0x1b, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x78, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x6e, 0x5f,
	0x62, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x6e, 0x42, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x1d, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x18, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5e, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x89, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4a, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x14,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x65, 0x78,
	0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65,
	0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x10,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3e, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x62, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x62, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x62, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x65, 0x72, 0x62, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x4d, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x14, 0x54, 0x74, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x3c, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x4d, 0x73, 0x12, 0x49, 0x0a,
	0x11, 0x73, 0x73, 0x6d, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x73, 0x73, 0x6d, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x0c,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x12,
	0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8f, 0x08, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x73, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x73, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x73,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x78, 0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x76, 0x0a, 0x20,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x74, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x74, 0x74, 0x73, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x57, 0x0a, 0x15, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x6d, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6d, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x6d, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x63, 0x70, 0x61, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x70, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x63, 0x70, 0x61,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x5a, 0x0a, 0x16, 0x6e, 0x6c, 0x75, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6c, 0x75, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x6c, 0x75, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x72, 0x0a,
	0x1e, 0x64, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x64, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x70, 0x0a, 0x1e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xea,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4f,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0xcc, 0x06, 0x0a, 0x11,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x36, 0x0a, 0x32, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0c, 0x12,
	0x35, 0x0a, 0x31, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x33, 0x0a, 0x2f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x16, 0x12, 0x2d, 0x0a, 0x29,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4d, 0x44, 0x5f, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x1f, 0x12, 0x24, 0x0a,
	0x20, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4d, 0x44, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x4f, 0x4e, 0x45,
	0x53, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x50, 0x41, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x29, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x50, 0x41, 0x5f, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x2a, 0x12, 0x21, 0x0a, 0x1d,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x33, 0x12,
	0x2d, 0x0a, 0x29, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x3d, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4c, 0x55, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x10, 0x47, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x51, 0x12, 0x2a,
	0x0a, 0x26, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x5b, 0x42, 0x93, 0x01, 0x0a, 0x0c, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e,
	0x56, 0x6f, 0x78, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74,
	0x2f, 0x64, 0x65, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56,
	0x4f, 0x50, 0xaa, 0x02, 0x14, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0xca, 0x02, 0x14, 0x4c, 0x75, 0x6d, 0x65,
	0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_results_proto_rawDescOnce sync.Once
	file_lumenvox_api_results_proto_rawDescData = file_lumenvox_api_results_proto_rawDesc
)

func file_lumenvox_api_results_proto_rawDescGZIP() []byte {
	file_lumenvox_api_results_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_results_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_results_proto_rawDescData)
	})
	return file_lumenvox_api_results_proto_rawDescData
}

var file_lumenvox_api_results_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lumenvox_api_results_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_lumenvox_api_results_proto_goTypes = []interface{}{
	(FinalResultStatus)(0),                 // 0: lumenvox.api.FinalResultStatus
	(*Word)(nil),                           // 1: lumenvox.api.Word
	(*AsrResultMetaData)(nil),              // 2: lumenvox.api.AsrResultMetaData
	(*SemanticInterpretation)(nil),         // 3: lumenvox.api.SemanticInterpretation
	(*AsrGrammarResult)(nil),               // 4: lumenvox.api.AsrGrammarResult
	(*TranscriptionResult)(nil),            // 5: lumenvox.api.TranscriptionResult
	(*AmdInteractionResult)(nil),           // 6: lumenvox.api.AmdInteractionResult
	(*AsrInteractionResult)(nil),           // 7: lumenvox.api.AsrInteractionResult
	(*CpaInteractionResult)(nil),           // 8: lumenvox.api.CpaInteractionResult
	(*NluInteractionResult)(nil),           // 9: lumenvox.api.NluInteractionResult
	(*DiarizationInteractionResult)(nil),   // 10: lumenvox.api.DiarizationInteractionResult
	(*DiarizationResult)(nil),              // 11: lumenvox.api.DiarizationResult
	(*LanguageIdInteractionResult)(nil),    // 12: lumenvox.api.LanguageIdInteractionResult
	(*LanguageIdResult)(nil),               // 13: lumenvox.api.LanguageIdResult
	(*TranscriptionInteractionResult)(nil), // 14: lumenvox.api.TranscriptionInteractionResult
	(*GrammarParseInteractionResult)(nil),  // 15: lumenvox.api.GrammarParseInteractionResult
	(*InverseTextNormalizationToken)(nil),  // 16: lumenvox.api.InverseTextNormalizationToken
	(*RedactionData)(nil),                  // 17: lumenvox.api.RedactionData
	(*NormalizationSegment)(nil),           // 18: lumenvox.api.NormalizationSegment
	(*NormalizedResult)(nil),               // 19: lumenvox.api.NormalizedResult
	(*NormalizeTextResult)(nil),            // 20: lumenvox.api.NormalizeTextResult
	(*SynthesisWarning)(nil),               // 21: lumenvox.api.SynthesisWarning
	(*SynthesisOffset)(nil),                // 22: lumenvox.api.SynthesisOffset
	(*TtsInteractionResult)(nil),           // 23: lumenvox.api.TtsInteractionResult
	(*Result)(nil),                         // 24: lumenvox.api.Result
	(*PartialResult)(nil),                  // 25: lumenvox.api.PartialResult
	(*FinalResult)(nil),                    // 26: lumenvox.api.FinalResult
	(*structpb.Struct)(nil),                // 27: google.protobuf.Struct
	(*OptionalFloat)(nil),                  // 28: lumenvox.api.OptionalFloat
	(*OptionalInt32)(nil),                  // 29: lumenvox.api.OptionalInt32
	(*AudioFormat)(nil),                    // 30: lumenvox.api.AudioFormat
	(*status.Status)(nil),                  // 31: google.rpc.Status
}
var file_lumenvox_api_results_proto_depIdxs = []int32{
	1,  // 0: lumenvox.api.AsrResultMetaData.words:type_name -> lumenvox.api.Word
	27, // 1: lumenvox.api.SemanticInterpretation.interpretation:type_name -> google.protobuf.Struct
	2,  // 2: lumenvox.api.AsrGrammarResult.asr_result_meta_data:type_name -> lumenvox.api.AsrResultMetaData
	3,  // 3: lumenvox.api.AsrGrammarResult.semantic_interpretations:type_name -> lumenvox.api.SemanticInterpretation
	2,  // 4: lumenvox.api.TranscriptionResult.asr_result_meta_data:type_name -> lumenvox.api.AsrResultMetaData
	19, // 5: lumenvox.api.TranscriptionResult.normalized_result:type_name -> lumenvox.api.NormalizedResult
	4,  // 6: lumenvox.api.TranscriptionResult.grammar_results:type_name -> lumenvox.api.AsrGrammarResult
	28, // 7: lumenvox.api.TranscriptionResult.blended_score:type_name -> lumenvox.api.OptionalFloat
	4,  // 8: lumenvox.api.AmdInteractionResult.amd_result:type_name -> lumenvox.api.AsrGrammarResult
	4,  // 9: lumenvox.api.AsrInteractionResult.n_bests:type_name -> lumenvox.api.AsrGrammarResult
	4,  // 10: lumenvox.api.CpaInteractionResult.cpa_result:type_name -> lumenvox.api.AsrGrammarResult
	11, // 11: lumenvox.api.DiarizationInteractionResult.results:type_name -> lumenvox.api.DiarizationResult
	13, // 12: lumenvox.api.LanguageIdInteractionResult.results:type_name -> lumenvox.api.LanguageIdResult
	5,  // 13: lumenvox.api.TranscriptionInteractionResult.n_bests:type_name -> lumenvox.api.TranscriptionResult
	3,  // 14: lumenvox.api.GrammarParseInteractionResult.semantic_interpretations:type_name -> lumenvox.api.SemanticInterpretation
	27, // 15: lumenvox.api.InverseTextNormalizationToken.data:type_name -> google.protobuf.Struct
	16, // 16: lumenvox.api.NormalizationSegment.token:type_name -> lumenvox.api.InverseTextNormalizationToken
	17, // 17: lumenvox.api.NormalizationSegment.redaction:type_name -> lumenvox.api.RedactionData
	18, // 18: lumenvox.api.NormalizedResult.segments:type_name -> lumenvox.api.NormalizationSegment
	19, // 19: lumenvox.api.NormalizeTextResult.normalized_result:type_name -> lumenvox.api.NormalizedResult
	29, // 20: lumenvox.api.SynthesisWarning.line:type_name -> lumenvox.api.OptionalInt32
	30, // 21: lumenvox.api.TtsInteractionResult.audio_format:type_name -> lumenvox.api.AudioFormat
	22, // 22: lumenvox.api.TtsInteractionResult.ssml_mark_offsets:type_name -> lumenvox.api.SynthesisOffset
	22, // 23: lumenvox.api.TtsInteractionResult.voice_offsets:type_name -> lumenvox.api.SynthesisOffset
	21, // 24: lumenvox.api.TtsInteractionResult.synthesis_warnings:type_name -> lumenvox.api.SynthesisWarning
	7,  // 25: lumenvox.api.Result.asr_interaction_result:type_name -> lumenvox.api.AsrInteractionResult
	14, // 26: lumenvox.api.Result.transcription_interaction_result:type_name -> lumenvox.api.TranscriptionInteractionResult
	15, // 27: lumenvox.api.Result.grammar_parse_interaction_result:type_name -> lumenvox.api.GrammarParseInteractionResult
	23, // 28: lumenvox.api.Result.tts_interaction_result:type_name -> lumenvox.api.TtsInteractionResult
	20, // 29: lumenvox.api.Result.normalize_text_result:type_name -> lumenvox.api.NormalizeTextResult
	6,  // 30: lumenvox.api.Result.amd_interaction_result:type_name -> lumenvox.api.AmdInteractionResult
	8,  // 31: lumenvox.api.Result.cpa_interaction_result:type_name -> lumenvox.api.CpaInteractionResult
	9,  // 32: lumenvox.api.Result.nlu_interaction_result:type_name -> lumenvox.api.NluInteractionResult
	10, // 33: lumenvox.api.Result.diarization_interaction_result:type_name -> lumenvox.api.DiarizationInteractionResult
	12, // 34: lumenvox.api.Result.language_id_interaction_result:type_name -> lumenvox.api.LanguageIdInteractionResult
	24, // 35: lumenvox.api.PartialResult.partial_result:type_name -> lumenvox.api.Result
	24, // 36: lumenvox.api.FinalResult.final_result:type_name -> lumenvox.api.Result
	0,  // 37: lumenvox.api.FinalResult.final_result_status:type_name -> lumenvox.api.FinalResultStatus
	31, // 38: lumenvox.api.FinalResult.status:type_name -> google.rpc.Status
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_lumenvox_api_results_proto_init() }
func file_lumenvox_api_results_proto_init() {
	if File_lumenvox_api_results_proto != nil {
		return
	}
	file_lumenvox_api_audio_formats_proto_init()
	file_lumenvox_api_optional_values_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_results_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Word); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsrResultMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemanticInterpretation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsrGrammarResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmdInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsrInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpaInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NluInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiarizationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageIdInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageIdResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptionInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrammarParseInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InverseTextNormalizationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizationSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalizeTextResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesisWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesisOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsInteractionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartialResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_results_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_results_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Result_AsrInteractionResult)(nil),
		(*Result_TranscriptionInteractionResult)(nil),
		(*Result_GrammarParseInteractionResult)(nil),
		(*Result_TtsInteractionResult)(nil),
		(*Result_NormalizeTextResult)(nil),
		(*Result_AmdInteractionResult)(nil),
		(*Result_CpaInteractionResult)(nil),
		(*Result_NluInteractionResult)(nil),
		(*Result_DiarizationInteractionResult)(nil),
		(*Result_LanguageIdInteractionResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_results_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_results_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_results_proto_depIdxs,
		EnumInfos:         file_lumenvox_api_results_proto_enumTypes,
		MessageInfos:      file_lumenvox_api_results_proto_msgTypes,
	}.Build()
	File_lumenvox_api_results_proto = out.File
	file_lumenvox_api_results_proto_rawDesc = nil
	file_lumenvox_api_results_proto_goTypes = nil
	file_lumenvox_api_results_proto_depIdxs = nil
}
