// API Protocol Buffer File
// This is the gRPC definition for session messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/session.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Name:
	//
	//	*SessionRequestMessage_SessionCreate
	//	*SessionRequestMessage_SessionAudioFormat
	//	*SessionRequestMessage_SessionAttach
	//	*SessionRequestMessage_SessionClose
	//	*SessionRequestMessage_SessionSetSettings
	//	*SessionRequestMessage_SessionGetSettings
	//	*SessionRequestMessage_SessionLoadGrammar
	//	*SessionRequestMessage_SessionLoadPhraseList
	//	*SessionRequestMessage_SessionCancel
	Name isSessionRequestMessage_Name `protobuf_oneof:"name"`
}

func (x *SessionRequestMessage) Reset() {
	*x = SessionRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequestMessage) ProtoMessage() {}

func (x *SessionRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequestMessage.ProtoReflect.Descriptor instead.
func (*SessionRequestMessage) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{0}
}

func (m *SessionRequestMessage) GetName() isSessionRequestMessage_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionCreate() *SessionCreateRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionCreate); ok {
		return x.SessionCreate
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionAudioFormat() *SessionInboundAudioFormatRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionAudioFormat); ok {
		return x.SessionAudioFormat
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionAttach() *SessionAttachRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionAttach); ok {
		return x.SessionAttach
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionClose() *SessionCloseRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionClose); ok {
		return x.SessionClose
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionSetSettings() *SessionSettings {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionSetSettings); ok {
		return x.SessionSetSettings
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionGetSettings() *SessionGetSettingsRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionGetSettings); ok {
		return x.SessionGetSettings
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionLoadGrammar() *SessionLoadGrammarRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionLoadGrammar); ok {
		return x.SessionLoadGrammar
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionLoadPhraseList() *SessionLoadPhraseList {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionLoadPhraseList); ok {
		return x.SessionLoadPhraseList
	}
	return nil
}

func (x *SessionRequestMessage) GetSessionCancel() *SessionCancelRequest {
	if x, ok := x.GetName().(*SessionRequestMessage_SessionCancel); ok {
		return x.SessionCancel
	}
	return nil
}

type isSessionRequestMessage_Name interface {
	isSessionRequestMessage_Name()
}

type SessionRequestMessage_SessionCreate struct {
	// Creates a new session and returns its ID and session related messages
	// through response streamed callback messages
	SessionCreate *SessionCreateRequest `protobuf:"bytes,1,opt,name=session_create,json=sessionCreate,proto3,oneof"`
}

type SessionRequestMessage_SessionAudioFormat struct {
	// Defines the inbound audio format for the session. Must be assigned
	// before any audio is sent and cannot later be changed.
	SessionAudioFormat *SessionInboundAudioFormatRequest `protobuf:"bytes,2,opt,name=session_audio_format,json=sessionAudioFormat,proto3,oneof"`
}

type SessionRequestMessage_SessionAttach struct {
	// Attach to an existing session
	SessionAttach *SessionAttachRequest `protobuf:"bytes,3,opt,name=session_attach,json=sessionAttach,proto3,oneof"`
}

type SessionRequestMessage_SessionClose struct {
	// Explicit request to close session
	SessionClose *SessionCloseRequest `protobuf:"bytes,4,opt,name=session_close,json=sessionClose,proto3,oneof"`
}

type SessionRequestMessage_SessionSetSettings struct {
	// Set settings to be configured for session.
	SessionSetSettings *SessionSettings `protobuf:"bytes,5,opt,name=session_set_settings,json=sessionSetSettings,proto3,oneof"`
}

type SessionRequestMessage_SessionGetSettings struct {
	// Get settings for session.
	SessionGetSettings *SessionGetSettingsRequest `protobuf:"bytes,6,opt,name=session_get_settings,json=sessionGetSettings,proto3,oneof"`
}

type SessionRequestMessage_SessionLoadGrammar struct {
	// Load session-specific grammar
	SessionLoadGrammar *SessionLoadGrammarRequest `protobuf:"bytes,7,opt,name=session_load_grammar,json=sessionLoadGrammar,proto3,oneof"`
}

type SessionRequestMessage_SessionLoadPhraseList struct {
	// Load session-specific phrase list
	SessionLoadPhraseList *SessionLoadPhraseList `protobuf:"bytes,8,opt,name=session_load_phrase_list,json=sessionLoadPhraseList,proto3,oneof"`
}

type SessionRequestMessage_SessionCancel struct {
	// Explicit request to cancel all session related interactions and processing in progress
	SessionCancel *SessionCancelRequest `protobuf:"bytes,9,opt,name=session_cancel,json=sessionCancel,proto3,oneof"`
}

func (*SessionRequestMessage_SessionCreate) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionAudioFormat) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionAttach) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionClose) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionSetSettings) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionGetSettings) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionLoadGrammar) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionLoadPhraseList) isSessionRequestMessage_Name() {}

func (*SessionRequestMessage_SessionCancel) isSessionRequestMessage_Name() {}

type SessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional unique reference per request message.
	// A UUID value will be auto generated if not supplied by client
	CorrelationId *OptionalString `protobuf:"bytes,1,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Types that are assignable to RequestType:
	//
	//	*SessionRequest_SessionRequest
	//	*SessionRequest_AudioRequest
	//	*SessionRequest_InteractionRequest
	//	*SessionRequest_DtmfRequest
	RequestType isSessionRequest_RequestType `protobuf_oneof:"request_type"`
}

func (x *SessionRequest) Reset() {
	*x = SessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRequest) ProtoMessage() {}

func (x *SessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRequest.ProtoReflect.Descriptor instead.
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{1}
}

func (x *SessionRequest) GetCorrelationId() *OptionalString {
	if x != nil {
		return x.CorrelationId
	}
	return nil
}

func (m *SessionRequest) GetRequestType() isSessionRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *SessionRequest) GetSessionRequest() *SessionRequestMessage {
	if x, ok := x.GetRequestType().(*SessionRequest_SessionRequest); ok {
		return x.SessionRequest
	}
	return nil
}

func (x *SessionRequest) GetAudioRequest() *AudioRequestMessage {
	if x, ok := x.GetRequestType().(*SessionRequest_AudioRequest); ok {
		return x.AudioRequest
	}
	return nil
}

func (x *SessionRequest) GetInteractionRequest() *InteractionRequestMessage {
	if x, ok := x.GetRequestType().(*SessionRequest_InteractionRequest); ok {
		return x.InteractionRequest
	}
	return nil
}

func (x *SessionRequest) GetDtmfRequest() *DtmfPushRequest {
	if x, ok := x.GetRequestType().(*SessionRequest_DtmfRequest); ok {
		return x.DtmfRequest
	}
	return nil
}

type isSessionRequest_RequestType interface {
	isSessionRequest_RequestType()
}

type SessionRequest_SessionRequest struct {
	// For session-specific requests
	SessionRequest *SessionRequestMessage `protobuf:"bytes,2,opt,name=session_request,json=sessionRequest,proto3,oneof"`
}

type SessionRequest_AudioRequest struct {
	// For audio-specific requests
	AudioRequest *AudioRequestMessage `protobuf:"bytes,3,opt,name=audio_request,json=audioRequest,proto3,oneof"`
}

type SessionRequest_InteractionRequest struct {
	// For interaction-specific requests
	InteractionRequest *InteractionRequestMessage `protobuf:"bytes,4,opt,name=interaction_request,json=interactionRequest,proto3,oneof"`
}

type SessionRequest_DtmfRequest struct {
	// For DTMF events (part of ASR interaction)
	DtmfRequest *DtmfPushRequest `protobuf:"bytes,5,opt,name=dtmf_request,json=dtmfRequest,proto3,oneof"`
}

func (*SessionRequest_SessionRequest) isSessionRequest_RequestType() {}

func (*SessionRequest_AudioRequest) isSessionRequest_RequestType() {}

func (*SessionRequest_InteractionRequest) isSessionRequest_RequestType() {}

func (*SessionRequest_DtmfRequest) isSessionRequest_RequestType() {}

type SessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session identifier (will be returned from initial call)
	SessionId *OptionalString `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Optional reference to corresponding request correlation_id
	CorrelationId *OptionalString `protobuf:"bytes,2,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Types that are assignable to ResponseType:
	//
	//	*SessionResponse_VadEvent
	//	*SessionResponse_FinalResult
	//	*SessionResponse_PartialResult
	//	*SessionResponse_SessionEvent
	//	*SessionResponse_SessionClose
	//	*SessionResponse_AudioPull
	//	*SessionResponse_SessionGetSettings
	//	*SessionResponse_InteractionCreateAmd
	//	*SessionResponse_InteractionCreateAsr
	//	*SessionResponse_InteractionCreateCpa
	//	*SessionResponse_InteractionCreateTts
	//	*SessionResponse_InteractionCreateGrammarParse
	//	*SessionResponse_InteractionCreateNormalizeText
	//	*SessionResponse_InteractionGetSettings
	//	*SessionResponse_InteractionRequestResults
	//	*SessionResponse_InteractionCreateTranscription
	//	*SessionResponse_SessionPhraseList
	//	*SessionResponse_SessionGrammar
	//	*SessionResponse_InteractionCreateNlu
	//	*SessionResponse_InteractionCreateDiarization
	//	*SessionResponse_InteractionCreateLanguageId
	//	*SessionResponse_InteractionCancel
	//	*SessionResponse_InteractionClose
	//	*SessionResponse_SessionCancel
	ResponseType isSessionResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *SessionResponse) Reset() {
	*x = SessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionResponse) ProtoMessage() {}

func (x *SessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionResponse.ProtoReflect.Descriptor instead.
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{2}
}

func (x *SessionResponse) GetSessionId() *OptionalString {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SessionResponse) GetCorrelationId() *OptionalString {
	if x != nil {
		return x.CorrelationId
	}
	return nil
}

func (m *SessionResponse) GetResponseType() isSessionResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *SessionResponse) GetVadEvent() *VadEvent {
	if x, ok := x.GetResponseType().(*SessionResponse_VadEvent); ok {
		return x.VadEvent
	}
	return nil
}

func (x *SessionResponse) GetFinalResult() *FinalResult {
	if x, ok := x.GetResponseType().(*SessionResponse_FinalResult); ok {
		return x.FinalResult
	}
	return nil
}

func (x *SessionResponse) GetPartialResult() *PartialResult {
	if x, ok := x.GetResponseType().(*SessionResponse_PartialResult); ok {
		return x.PartialResult
	}
	return nil
}

func (x *SessionResponse) GetSessionEvent() *SessionEvent {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionEvent); ok {
		return x.SessionEvent
	}
	return nil
}

func (x *SessionResponse) GetSessionClose() *SessionCloseResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionClose); ok {
		return x.SessionClose
	}
	return nil
}

func (x *SessionResponse) GetAudioPull() *AudioPullResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_AudioPull); ok {
		return x.AudioPull
	}
	return nil
}

func (x *SessionResponse) GetSessionGetSettings() *SessionSettings {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionGetSettings); ok {
		return x.SessionGetSettings
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateAmd() *InteractionCreateAmdResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateAmd); ok {
		return x.InteractionCreateAmd
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateAsr() *InteractionCreateAsrResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateAsr); ok {
		return x.InteractionCreateAsr
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateCpa() *InteractionCreateCpaResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateCpa); ok {
		return x.InteractionCreateCpa
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateTts() *InteractionCreateTtsResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateTts); ok {
		return x.InteractionCreateTts
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateGrammarParse() *InteractionCreateGrammarParseResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateGrammarParse); ok {
		return x.InteractionCreateGrammarParse
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateNormalizeText() *InteractionCreateNormalizeTextResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateNormalizeText); ok {
		return x.InteractionCreateNormalizeText
	}
	return nil
}

func (x *SessionResponse) GetInteractionGetSettings() *InteractionSettings {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionGetSettings); ok {
		return x.InteractionGetSettings
	}
	return nil
}

func (x *SessionResponse) GetInteractionRequestResults() *InteractionRequestResultsResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionRequestResults); ok {
		return x.InteractionRequestResults
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateTranscription() *InteractionCreateTranscriptionResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateTranscription); ok {
		return x.InteractionCreateTranscription
	}
	return nil
}

func (x *SessionResponse) GetSessionPhraseList() *SessionLoadPhraseListResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionPhraseList); ok {
		return x.SessionPhraseList
	}
	return nil
}

func (x *SessionResponse) GetSessionGrammar() *SessionLoadGrammarResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionGrammar); ok {
		return x.SessionGrammar
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateNlu() *InteractionCreateNluResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateNlu); ok {
		return x.InteractionCreateNlu
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateDiarization() *InteractionCreateDiarizationResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateDiarization); ok {
		return x.InteractionCreateDiarization
	}
	return nil
}

func (x *SessionResponse) GetInteractionCreateLanguageId() *InteractionCreateLanguageIdResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCreateLanguageId); ok {
		return x.InteractionCreateLanguageId
	}
	return nil
}

func (x *SessionResponse) GetInteractionCancel() *InteractionCancelResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionCancel); ok {
		return x.InteractionCancel
	}
	return nil
}

func (x *SessionResponse) GetInteractionClose() *InteractionCloseResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_InteractionClose); ok {
		return x.InteractionClose
	}
	return nil
}

func (x *SessionResponse) GetSessionCancel() *SessionCancelResponse {
	if x, ok := x.GetResponseType().(*SessionResponse_SessionCancel); ok {
		return x.SessionCancel
	}
	return nil
}

type isSessionResponse_ResponseType interface {
	isSessionResponse_ResponseType()
}

type SessionResponse_VadEvent struct {
	// VAD event notification
	VadEvent *VadEvent `protobuf:"bytes,3,opt,name=vad_event,json=vadEvent,proto3,oneof"`
}

type SessionResponse_FinalResult struct {
	// Final result notification
	FinalResult *FinalResult `protobuf:"bytes,4,opt,name=final_result,json=finalResult,proto3,oneof"`
}

type SessionResponse_PartialResult struct {
	// Partial result notification
	PartialResult *PartialResult `protobuf:"bytes,5,opt,name=partial_result,json=partialResult,proto3,oneof"`
}

type SessionResponse_SessionEvent struct {
	// Session event notification (typically errors)
	SessionEvent *SessionEvent `protobuf:"bytes,6,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

type SessionResponse_SessionClose struct {
	// Response for explicit session close request
	SessionClose *SessionCloseResponse `protobuf:"bytes,7,opt,name=session_close,json=sessionClose,proto3,oneof"`
}

type SessionResponse_AudioPull struct {
	// Response to audio pull request
	AudioPull *AudioPullResponse `protobuf:"bytes,8,opt,name=audio_pull,json=audioPull,proto3,oneof"`
}

type SessionResponse_SessionGetSettings struct {
	// Response to get settings for session.
	SessionGetSettings *SessionSettings `protobuf:"bytes,9,opt,name=session_get_settings,json=sessionGetSettings,proto3,oneof"`
}

type SessionResponse_InteractionCreateAmd struct {
	// Response to create AMD interaction request
	InteractionCreateAmd *InteractionCreateAmdResponse `protobuf:"bytes,10,opt,name=interaction_create_amd,json=interactionCreateAmd,proto3,oneof"`
}

type SessionResponse_InteractionCreateAsr struct {
	// Response to create ASR interaction request
	InteractionCreateAsr *InteractionCreateAsrResponse `protobuf:"bytes,11,opt,name=interaction_create_asr,json=interactionCreateAsr,proto3,oneof"`
}

type SessionResponse_InteractionCreateCpa struct {
	// Response to create CPA interaction request
	InteractionCreateCpa *InteractionCreateCpaResponse `protobuf:"bytes,12,opt,name=interaction_create_cpa,json=interactionCreateCpa,proto3,oneof"`
}

type SessionResponse_InteractionCreateTts struct {
	// Response to create TTS interaction request
	InteractionCreateTts *InteractionCreateTtsResponse `protobuf:"bytes,13,opt,name=interaction_create_tts,json=interactionCreateTts,proto3,oneof"`
}

type SessionResponse_InteractionCreateGrammarParse struct {
	// Response to create a grammar parse request
	InteractionCreateGrammarParse *InteractionCreateGrammarParseResponse `protobuf:"bytes,14,opt,name=interaction_create_grammar_parse,json=interactionCreateGrammarParse,proto3,oneof"`
}

type SessionResponse_InteractionCreateNormalizeText struct {
	// Response to create a normalize text request
	InteractionCreateNormalizeText *InteractionCreateNormalizeTextResponse `protobuf:"bytes,15,opt,name=interaction_create_normalize_text,json=interactionCreateNormalizeText,proto3,oneof"`
}

type SessionResponse_InteractionGetSettings struct {
	// Response to interaction get settings request
	InteractionGetSettings *InteractionSettings `protobuf:"bytes,16,opt,name=interaction_get_settings,json=interactionGetSettings,proto3,oneof"`
}

type SessionResponse_InteractionRequestResults struct {
	// Response to interaction request results
	InteractionRequestResults *InteractionRequestResultsResponse `protobuf:"bytes,17,opt,name=interaction_request_results,json=interactionRequestResults,proto3,oneof"`
}

type SessionResponse_InteractionCreateTranscription struct {
	// Response to create Transcription interaction request
	InteractionCreateTranscription *InteractionCreateTranscriptionResponse `protobuf:"bytes,18,opt,name=interaction_create_transcription,json=interactionCreateTranscription,proto3,oneof"`
}

type SessionResponse_SessionPhraseList struct {
	// Response for session load phrase list request
	SessionPhraseList *SessionLoadPhraseListResponse `protobuf:"bytes,19,opt,name=session_phrase_list,json=sessionPhraseList,proto3,oneof"`
}

type SessionResponse_SessionGrammar struct {
	// Response for session load grammar request
	SessionGrammar *SessionLoadGrammarResponse `protobuf:"bytes,20,opt,name=session_grammar,json=sessionGrammar,proto3,oneof"`
}

type SessionResponse_InteractionCreateNlu struct {
	// Response to create TTS interaction request
	InteractionCreateNlu *InteractionCreateNluResponse `protobuf:"bytes,21,opt,name=interaction_create_nlu,json=interactionCreateNlu,proto3,oneof"`
}

type SessionResponse_InteractionCreateDiarization struct {
	// Response to create Diarization interaction request
	InteractionCreateDiarization *InteractionCreateDiarizationResponse `protobuf:"bytes,22,opt,name=interaction_create_diarization,json=interactionCreateDiarization,proto3,oneof"`
}

type SessionResponse_InteractionCreateLanguageId struct {
	// Response to create LanguageId interaction request
	InteractionCreateLanguageId *InteractionCreateLanguageIdResponse `protobuf:"bytes,23,opt,name=interaction_create_language_id,json=interactionCreateLanguageId,proto3,oneof"`
}

type SessionResponse_InteractionCancel struct {
	// Response to interaction cancel
	InteractionCancel *InteractionCancelResponse `protobuf:"bytes,100,opt,name=interaction_cancel,json=interactionCancel,proto3,oneof"`
}

type SessionResponse_InteractionClose struct {
	// Response to explicit request to close interaction
	InteractionClose *InteractionCloseResponse `protobuf:"bytes,101,opt,name=interaction_close,json=interactionClose,proto3,oneof"`
}

type SessionResponse_SessionCancel struct {
	// Response for explicit session cancel request
	SessionCancel *SessionCancelResponse `protobuf:"bytes,102,opt,name=session_cancel,json=sessionCancel,proto3,oneof"`
}

func (*SessionResponse_VadEvent) isSessionResponse_ResponseType() {}

func (*SessionResponse_FinalResult) isSessionResponse_ResponseType() {}

func (*SessionResponse_PartialResult) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionEvent) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionClose) isSessionResponse_ResponseType() {}

func (*SessionResponse_AudioPull) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionGetSettings) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateAmd) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateAsr) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateCpa) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateTts) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateGrammarParse) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateNormalizeText) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionGetSettings) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionRequestResults) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateTranscription) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionPhraseList) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionGrammar) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateNlu) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateDiarization) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCreateLanguageId) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionCancel) isSessionResponse_ResponseType() {}

func (*SessionResponse_InteractionClose) isSessionResponse_ResponseType() {}

func (*SessionResponse_SessionCancel) isSessionResponse_ResponseType() {}

type SessionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment identifier to associate the session with
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Optional unique reference for session (must be UUID)
	// A UUID value will be auto generated if not supplied by client
	SessionId *OptionalString `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// UUID related to the operator (entity or person making request)
	OperatorId string `protobuf:"bytes,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *SessionCreateRequest) Reset() {
	*x = SessionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCreateRequest) ProtoMessage() {}

func (x *SessionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCreateRequest.ProtoReflect.Descriptor instead.
func (*SessionCreateRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{3}
}

func (x *SessionCreateRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SessionCreateRequest) GetSessionId() *OptionalString {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *SessionCreateRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

type SessionInboundAudioFormatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters for the inbound audio resource associated with the session
	AudioFormat *AudioFormat `protobuf:"bytes,1,opt,name=audio_format,json=audioFormat,proto3" json:"audio_format,omitempty"`
}

func (x *SessionInboundAudioFormatRequest) Reset() {
	*x = SessionInboundAudioFormatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInboundAudioFormatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInboundAudioFormatRequest) ProtoMessage() {}

func (x *SessionInboundAudioFormatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInboundAudioFormatRequest.ProtoReflect.Descriptor instead.
func (*SessionInboundAudioFormatRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{4}
}

func (x *SessionInboundAudioFormatRequest) GetAudioFormat() *AudioFormat {
	if x != nil {
		return x.AudioFormat
	}
	return nil
}

type SessionAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deployment identifier associated to the session
	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Valid session identifier to attached to request
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// UUID related to the operator (entity or person making request)
	OperatorId string `protobuf:"bytes,3,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *SessionAttachRequest) Reset() {
	*x = SessionAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionAttachRequest) ProtoMessage() {}

func (x *SessionAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionAttachRequest.ProtoReflect.Descriptor instead.
func (*SessionAttachRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{5}
}

func (x *SessionAttachRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SessionAttachRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionAttachRequest) GetOperatorId() string {
	if x != nil {
		return x.OperatorId
	}
	return ""
}

type SessionCloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionCloseRequest) Reset() {
	*x = SessionCloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCloseRequest) ProtoMessage() {}

func (x *SessionCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCloseRequest.ProtoReflect.Descriptor instead.
func (*SessionCloseRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{6}
}

type SessionCloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of request
	CloseStatus *status.Status `protobuf:"bytes,1,opt,name=close_status,json=closeStatus,proto3" json:"close_status,omitempty"`
}

func (x *SessionCloseResponse) Reset() {
	*x = SessionCloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCloseResponse) ProtoMessage() {}

func (x *SessionCloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCloseResponse.ProtoReflect.Descriptor instead.
func (*SessionCloseResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{7}
}

func (x *SessionCloseResponse) GetCloseStatus() *status.Status {
	if x != nil {
		return x.CloseStatus
	}
	return nil
}

type SessionCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionCancelRequest) Reset() {
	*x = SessionCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCancelRequest) ProtoMessage() {}

func (x *SessionCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCancelRequest.ProtoReflect.Descriptor instead.
func (*SessionCancelRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{8}
}

type SessionCancelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of request
	CloseStatus *status.Status `protobuf:"bytes,1,opt,name=close_status,json=closeStatus,proto3" json:"close_status,omitempty"`
}

func (x *SessionCancelResponse) Reset() {
	*x = SessionCancelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionCancelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCancelResponse) ProtoMessage() {}

func (x *SessionCancelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCancelResponse.ProtoReflect.Descriptor instead.
func (*SessionCancelResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{9}
}

func (x *SessionCancelResponse) GetCloseStatus() *status.Status {
	if x != nil {
		return x.CloseStatus
	}
	return nil
}

type SessionGetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SessionGetSettingsRequest) Reset() {
	*x = SessionGetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionGetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionGetSettingsRequest) ProtoMessage() {}

func (x *SessionGetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionGetSettingsRequest.ProtoReflect.Descriptor instead.
func (*SessionGetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{10}
}

type SessionLoadGrammarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The language selector the specified grammar
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	// Reference label for session grammar
	// Note: label must consist of letters, digits, hyphens, underscores only
	GrammarLabel string `protobuf:"bytes,2,opt,name=grammar_label,json=grammarLabel,proto3" json:"grammar_label,omitempty"`
	// Types that are assignable to SessionGrammarReference:
	//
	//	*SessionLoadGrammarRequest_GrammarUrl
	//	*SessionLoadGrammarRequest_InlineGrammarText
	SessionGrammarReference isSessionLoadGrammarRequest_SessionGrammarReference `protobuf_oneof:"session_grammar_reference"`
	// Optional grammar settings applied to this request
	GrammarSettings *GrammarSettings `protobuf:"bytes,5,opt,name=grammar_settings,json=grammarSettings,proto3" json:"grammar_settings,omitempty"`
}

func (x *SessionLoadGrammarRequest) Reset() {
	*x = SessionLoadGrammarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoadGrammarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoadGrammarRequest) ProtoMessage() {}

func (x *SessionLoadGrammarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoadGrammarRequest.ProtoReflect.Descriptor instead.
func (*SessionLoadGrammarRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{11}
}

func (x *SessionLoadGrammarRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *SessionLoadGrammarRequest) GetGrammarLabel() string {
	if x != nil {
		return x.GrammarLabel
	}
	return ""
}

func (m *SessionLoadGrammarRequest) GetSessionGrammarReference() isSessionLoadGrammarRequest_SessionGrammarReference {
	if m != nil {
		return m.SessionGrammarReference
	}
	return nil
}

func (x *SessionLoadGrammarRequest) GetGrammarUrl() string {
	if x, ok := x.GetSessionGrammarReference().(*SessionLoadGrammarRequest_GrammarUrl); ok {
		return x.GrammarUrl
	}
	return ""
}

func (x *SessionLoadGrammarRequest) GetInlineGrammarText() string {
	if x, ok := x.GetSessionGrammarReference().(*SessionLoadGrammarRequest_InlineGrammarText); ok {
		return x.InlineGrammarText
	}
	return ""
}

func (x *SessionLoadGrammarRequest) GetGrammarSettings() *GrammarSettings {
	if x != nil {
		return x.GrammarSettings
	}
	return nil
}

type isSessionLoadGrammarRequest_SessionGrammarReference interface {
	isSessionLoadGrammarRequest_SessionGrammarReference()
}

type SessionLoadGrammarRequest_GrammarUrl struct {
	// A grammar URL to be loaded
	GrammarUrl string `protobuf:"bytes,3,opt,name=grammar_url,json=grammarUrl,proto3,oneof"`
}

type SessionLoadGrammarRequest_InlineGrammarText struct {
	// A string containing the raw grammar text
	InlineGrammarText string `protobuf:"bytes,4,opt,name=inline_grammar_text,json=inlineGrammarText,proto3,oneof"`
}

func (*SessionLoadGrammarRequest_GrammarUrl) isSessionLoadGrammarRequest_SessionGrammarReference() {}

func (*SessionLoadGrammarRequest_InlineGrammarText) isSessionLoadGrammarRequest_SessionGrammarReference() {
}

type SessionLoadGrammarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the grammar load
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The mode of the loaded grammar
	Mode GrammarMode `protobuf:"varint,2,opt,name=mode,proto3,enum=lumenvox.api.GrammarMode" json:"mode,omitempty"`
	// The label for the loaded grammar
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SessionLoadGrammarResponse) Reset() {
	*x = SessionLoadGrammarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoadGrammarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoadGrammarResponse) ProtoMessage() {}

func (x *SessionLoadGrammarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoadGrammarResponse.ProtoReflect.Descriptor instead.
func (*SessionLoadGrammarResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{12}
}

func (x *SessionLoadGrammarResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SessionLoadGrammarResponse) GetMode() GrammarMode {
	if x != nil {
		return x.Mode
	}
	return GrammarMode_GRAMMAR_MODE_UNSPECIFIED
}

func (x *SessionLoadGrammarResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type SessionLoadPhraseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of strings containing word and phrase "hints" so that the
	// transcriber recognition is more likely to recognize them. This can be
	// used to improve the accuracy for specific words and phrases, for example,
	// if specific commands are typically spoken by the user. This can also be
	// used to add additional words or phrases to the transcriber's vocabulary.
	Phrases []string `protobuf:"bytes,1,rep,name=phrases,proto3" json:"phrases,omitempty"`
	// A label that can be used to reference this list within a transcription
	// request
	PhaseListLabel string `protobuf:"bytes,2,opt,name=phase_list_label,json=phaseListLabel,proto3" json:"phase_list_label,omitempty"`
	// The language selector describing which ASR resource will process request
	// e.g.: "en-US", "de-DE" or dialect independent "en", "de", etc.
	// Note that phrase lists are inherently language-independent, so this
	// field is only used to direct which language-dependent resource will
	// process the phrase load request
	Language string `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *SessionLoadPhraseList) Reset() {
	*x = SessionLoadPhraseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoadPhraseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoadPhraseList) ProtoMessage() {}

func (x *SessionLoadPhraseList) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoadPhraseList.ProtoReflect.Descriptor instead.
func (*SessionLoadPhraseList) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{13}
}

func (x *SessionLoadPhraseList) GetPhrases() []string {
	if x != nil {
		return x.Phrases
	}
	return nil
}

func (x *SessionLoadPhraseList) GetPhaseListLabel() string {
	if x != nil {
		return x.PhaseListLabel
	}
	return ""
}

func (x *SessionLoadPhraseList) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type SessionLoadPhraseListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the phrase list load.
	Status *status.Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The label for the phrase list.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SessionLoadPhraseListResponse) Reset() {
	*x = SessionLoadPhraseListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_session_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLoadPhraseListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLoadPhraseListResponse) ProtoMessage() {}

func (x *SessionLoadPhraseListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_session_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLoadPhraseListResponse.ProtoReflect.Descriptor instead.
func (*SessionLoadPhraseListResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_session_proto_rawDescGZIP(), []int{14}
}

func (x *SessionLoadPhraseListResponse) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SessionLoadPhraseListResponse) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

var File_lumenvox_api_session_proto protoreflect.FileDescriptor

var file_lumenvox_api_session_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x06,
	0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x5b, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x5e, 0x0a, 0x18,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x9f, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0c, 0x64, 0x74, 0x6d, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x74, 0x6d, 0x66, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x74, 0x6d, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xfa, 0x12, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x75,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e,
	0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x6d, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x64, 0x12, 0x62, 0x0a,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x72, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x70, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x70, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x70, 0x61, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x72, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5d, 0x0a,
	0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x71, 0x0a, 0x1b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6c, 0x75,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6c, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6c, 0x75, 0x12, 0x7a, 0x0a, 0x1e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x58, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c,
	0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x99, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x20,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x7b,
	0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x15, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x22, 0x77, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1d, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x93, 0x01,
	0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0c,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d,
	0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75,
	0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f,
	0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05,
	0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02, 0x14, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x14, 0x4c,
	0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_session_proto_rawDescOnce sync.Once
	file_lumenvox_api_session_proto_rawDescData = file_lumenvox_api_session_proto_rawDesc
)

func file_lumenvox_api_session_proto_rawDescGZIP() []byte {
	file_lumenvox_api_session_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_session_proto_rawDescData)
	})
	return file_lumenvox_api_session_proto_rawDescData
}

var file_lumenvox_api_session_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_lumenvox_api_session_proto_goTypes = []interface{}{
	(*SessionRequestMessage)(nil),                  // 0: lumenvox.api.SessionRequestMessage
	(*SessionRequest)(nil),                         // 1: lumenvox.api.SessionRequest
	(*SessionResponse)(nil),                        // 2: lumenvox.api.SessionResponse
	(*SessionCreateRequest)(nil),                   // 3: lumenvox.api.SessionCreateRequest
	(*SessionInboundAudioFormatRequest)(nil),       // 4: lumenvox.api.SessionInboundAudioFormatRequest
	(*SessionAttachRequest)(nil),                   // 5: lumenvox.api.SessionAttachRequest
	(*SessionCloseRequest)(nil),                    // 6: lumenvox.api.SessionCloseRequest
	(*SessionCloseResponse)(nil),                   // 7: lumenvox.api.SessionCloseResponse
	(*SessionCancelRequest)(nil),                   // 8: lumenvox.api.SessionCancelRequest
	(*SessionCancelResponse)(nil),                  // 9: lumenvox.api.SessionCancelResponse
	(*SessionGetSettingsRequest)(nil),              // 10: lumenvox.api.SessionGetSettingsRequest
	(*SessionLoadGrammarRequest)(nil),              // 11: lumenvox.api.SessionLoadGrammarRequest
	(*SessionLoadGrammarResponse)(nil),             // 12: lumenvox.api.SessionLoadGrammarResponse
	(*SessionLoadPhraseList)(nil),                  // 13: lumenvox.api.SessionLoadPhraseList
	(*SessionLoadPhraseListResponse)(nil),          // 14: lumenvox.api.SessionLoadPhraseListResponse
	(*SessionSettings)(nil),                        // 15: lumenvox.api.SessionSettings
	(*OptionalString)(nil),                         // 16: lumenvox.api.OptionalString
	(*AudioRequestMessage)(nil),                    // 17: lumenvox.api.AudioRequestMessage
	(*InteractionRequestMessage)(nil),              // 18: lumenvox.api.InteractionRequestMessage
	(*DtmfPushRequest)(nil),                        // 19: lumenvox.api.DtmfPushRequest
	(*VadEvent)(nil),                               // 20: lumenvox.api.VadEvent
	(*FinalResult)(nil),                            // 21: lumenvox.api.FinalResult
	(*PartialResult)(nil),                          // 22: lumenvox.api.PartialResult
	(*SessionEvent)(nil),                           // 23: lumenvox.api.SessionEvent
	(*AudioPullResponse)(nil),                      // 24: lumenvox.api.AudioPullResponse
	(*InteractionCreateAmdResponse)(nil),           // 25: lumenvox.api.InteractionCreateAmdResponse
	(*InteractionCreateAsrResponse)(nil),           // 26: lumenvox.api.InteractionCreateAsrResponse
	(*InteractionCreateCpaResponse)(nil),           // 27: lumenvox.api.InteractionCreateCpaResponse
	(*InteractionCreateTtsResponse)(nil),           // 28: lumenvox.api.InteractionCreateTtsResponse
	(*InteractionCreateGrammarParseResponse)(nil),  // 29: lumenvox.api.InteractionCreateGrammarParseResponse
	(*InteractionCreateNormalizeTextResponse)(nil), // 30: lumenvox.api.InteractionCreateNormalizeTextResponse
	(*InteractionSettings)(nil),                    // 31: lumenvox.api.InteractionSettings
	(*InteractionRequestResultsResponse)(nil),      // 32: lumenvox.api.InteractionRequestResultsResponse
	(*InteractionCreateTranscriptionResponse)(nil), // 33: lumenvox.api.InteractionCreateTranscriptionResponse
	(*InteractionCreateNluResponse)(nil),           // 34: lumenvox.api.InteractionCreateNluResponse
	(*InteractionCreateDiarizationResponse)(nil),   // 35: lumenvox.api.InteractionCreateDiarizationResponse
	(*InteractionCreateLanguageIdResponse)(nil),    // 36: lumenvox.api.InteractionCreateLanguageIdResponse
	(*InteractionCancelResponse)(nil),              // 37: lumenvox.api.InteractionCancelResponse
	(*InteractionCloseResponse)(nil),               // 38: lumenvox.api.InteractionCloseResponse
	(*AudioFormat)(nil),                            // 39: lumenvox.api.AudioFormat
	(*status.Status)(nil),                          // 40: google.rpc.Status
	(*GrammarSettings)(nil),                        // 41: lumenvox.api.GrammarSettings
	(GrammarMode)(0),                               // 42: lumenvox.api.GrammarMode
}
var file_lumenvox_api_session_proto_depIdxs = []int32{
	3,  // 0: lumenvox.api.SessionRequestMessage.session_create:type_name -> lumenvox.api.SessionCreateRequest
	4,  // 1: lumenvox.api.SessionRequestMessage.session_audio_format:type_name -> lumenvox.api.SessionInboundAudioFormatRequest
	5,  // 2: lumenvox.api.SessionRequestMessage.session_attach:type_name -> lumenvox.api.SessionAttachRequest
	6,  // 3: lumenvox.api.SessionRequestMessage.session_close:type_name -> lumenvox.api.SessionCloseRequest
	15, // 4: lumenvox.api.SessionRequestMessage.session_set_settings:type_name -> lumenvox.api.SessionSettings
	10, // 5: lumenvox.api.SessionRequestMessage.session_get_settings:type_name -> lumenvox.api.SessionGetSettingsRequest
	11, // 6: lumenvox.api.SessionRequestMessage.session_load_grammar:type_name -> lumenvox.api.SessionLoadGrammarRequest
	13, // 7: lumenvox.api.SessionRequestMessage.session_load_phrase_list:type_name -> lumenvox.api.SessionLoadPhraseList
	8,  // 8: lumenvox.api.SessionRequestMessage.session_cancel:type_name -> lumenvox.api.SessionCancelRequest
	16, // 9: lumenvox.api.SessionRequest.correlation_id:type_name -> lumenvox.api.OptionalString
	0,  // 10: lumenvox.api.SessionRequest.session_request:type_name -> lumenvox.api.SessionRequestMessage
	17, // 11: lumenvox.api.SessionRequest.audio_request:type_name -> lumenvox.api.AudioRequestMessage
	18, // 12: lumenvox.api.SessionRequest.interaction_request:type_name -> lumenvox.api.InteractionRequestMessage
	19, // 13: lumenvox.api.SessionRequest.dtmf_request:type_name -> lumenvox.api.DtmfPushRequest
	16, // 14: lumenvox.api.SessionResponse.session_id:type_name -> lumenvox.api.OptionalString
	16, // 15: lumenvox.api.SessionResponse.correlation_id:type_name -> lumenvox.api.OptionalString
	20, // 16: lumenvox.api.SessionResponse.vad_event:type_name -> lumenvox.api.VadEvent
	21, // 17: lumenvox.api.SessionResponse.final_result:type_name -> lumenvox.api.FinalResult
	22, // 18: lumenvox.api.SessionResponse.partial_result:type_name -> lumenvox.api.PartialResult
	23, // 19: lumenvox.api.SessionResponse.session_event:type_name -> lumenvox.api.SessionEvent
	7,  // 20: lumenvox.api.SessionResponse.session_close:type_name -> lumenvox.api.SessionCloseResponse
	24, // 21: lumenvox.api.SessionResponse.audio_pull:type_name -> lumenvox.api.AudioPullResponse
	15, // 22: lumenvox.api.SessionResponse.session_get_settings:type_name -> lumenvox.api.SessionSettings
	25, // 23: lumenvox.api.SessionResponse.interaction_create_amd:type_name -> lumenvox.api.InteractionCreateAmdResponse
	26, // 24: lumenvox.api.SessionResponse.interaction_create_asr:type_name -> lumenvox.api.InteractionCreateAsrResponse
	27, // 25: lumenvox.api.SessionResponse.interaction_create_cpa:type_name -> lumenvox.api.InteractionCreateCpaResponse
	28, // 26: lumenvox.api.SessionResponse.interaction_create_tts:type_name -> lumenvox.api.InteractionCreateTtsResponse
	29, // 27: lumenvox.api.SessionResponse.interaction_create_grammar_parse:type_name -> lumenvox.api.InteractionCreateGrammarParseResponse
	30, // 28: lumenvox.api.SessionResponse.interaction_create_normalize_text:type_name -> lumenvox.api.InteractionCreateNormalizeTextResponse
	31, // 29: lumenvox.api.SessionResponse.interaction_get_settings:type_name -> lumenvox.api.InteractionSettings
	32, // 30: lumenvox.api.SessionResponse.interaction_request_results:type_name -> lumenvox.api.InteractionRequestResultsResponse
	33, // 31: lumenvox.api.SessionResponse.interaction_create_transcription:type_name -> lumenvox.api.InteractionCreateTranscriptionResponse
	14, // 32: lumenvox.api.SessionResponse.session_phrase_list:type_name -> lumenvox.api.SessionLoadPhraseListResponse
	12, // 33: lumenvox.api.SessionResponse.session_grammar:type_name -> lumenvox.api.SessionLoadGrammarResponse
	34, // 34: lumenvox.api.SessionResponse.interaction_create_nlu:type_name -> lumenvox.api.InteractionCreateNluResponse
	35, // 35: lumenvox.api.SessionResponse.interaction_create_diarization:type_name -> lumenvox.api.InteractionCreateDiarizationResponse
	36, // 36: lumenvox.api.SessionResponse.interaction_create_language_id:type_name -> lumenvox.api.InteractionCreateLanguageIdResponse
	37, // 37: lumenvox.api.SessionResponse.interaction_cancel:type_name -> lumenvox.api.InteractionCancelResponse
	38, // 38: lumenvox.api.SessionResponse.interaction_close:type_name -> lumenvox.api.InteractionCloseResponse
	9,  // 39: lumenvox.api.SessionResponse.session_cancel:type_name -> lumenvox.api.SessionCancelResponse
	16, // 40: lumenvox.api.SessionCreateRequest.session_id:type_name -> lumenvox.api.OptionalString
	39, // 41: lumenvox.api.SessionInboundAudioFormatRequest.audio_format:type_name -> lumenvox.api.AudioFormat
	40, // 42: lumenvox.api.SessionCloseResponse.close_status:type_name -> google.rpc.Status
	40, // 43: lumenvox.api.SessionCancelResponse.close_status:type_name -> google.rpc.Status
	41, // 44: lumenvox.api.SessionLoadGrammarRequest.grammar_settings:type_name -> lumenvox.api.GrammarSettings
	40, // 45: lumenvox.api.SessionLoadGrammarResponse.status:type_name -> google.rpc.Status
	42, // 46: lumenvox.api.SessionLoadGrammarResponse.mode:type_name -> lumenvox.api.GrammarMode
	40, // 47: lumenvox.api.SessionLoadPhraseListResponse.status:type_name -> google.rpc.Status
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_lumenvox_api_session_proto_init() }
func file_lumenvox_api_session_proto_init() {
	if File_lumenvox_api_session_proto != nil {
		return
	}
	file_lumenvox_api_audio_formats_proto_init()
	file_lumenvox_api_common_proto_init()
	file_lumenvox_api_interaction_proto_init()
	file_lumenvox_api_optional_values_proto_init()
	file_lumenvox_api_results_proto_init()
	file_lumenvox_api_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInboundAudioFormatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionCancelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionGetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoadGrammarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoadGrammarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoadPhraseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_session_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLoadPhraseListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_session_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SessionRequestMessage_SessionCreate)(nil),
		(*SessionRequestMessage_SessionAudioFormat)(nil),
		(*SessionRequestMessage_SessionAttach)(nil),
		(*SessionRequestMessage_SessionClose)(nil),
		(*SessionRequestMessage_SessionSetSettings)(nil),
		(*SessionRequestMessage_SessionGetSettings)(nil),
		(*SessionRequestMessage_SessionLoadGrammar)(nil),
		(*SessionRequestMessage_SessionLoadPhraseList)(nil),
		(*SessionRequestMessage_SessionCancel)(nil),
	}
	file_lumenvox_api_session_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SessionRequest_SessionRequest)(nil),
		(*SessionRequest_AudioRequest)(nil),
		(*SessionRequest_InteractionRequest)(nil),
		(*SessionRequest_DtmfRequest)(nil),
	}
	file_lumenvox_api_session_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SessionResponse_VadEvent)(nil),
		(*SessionResponse_FinalResult)(nil),
		(*SessionResponse_PartialResult)(nil),
		(*SessionResponse_SessionEvent)(nil),
		(*SessionResponse_SessionClose)(nil),
		(*SessionResponse_AudioPull)(nil),
		(*SessionResponse_SessionGetSettings)(nil),
		(*SessionResponse_InteractionCreateAmd)(nil),
		(*SessionResponse_InteractionCreateAsr)(nil),
		(*SessionResponse_InteractionCreateCpa)(nil),
		(*SessionResponse_InteractionCreateTts)(nil),
		(*SessionResponse_InteractionCreateGrammarParse)(nil),
		(*SessionResponse_InteractionCreateNormalizeText)(nil),
		(*SessionResponse_InteractionGetSettings)(nil),
		(*SessionResponse_InteractionRequestResults)(nil),
		(*SessionResponse_InteractionCreateTranscription)(nil),
		(*SessionResponse_SessionPhraseList)(nil),
		(*SessionResponse_SessionGrammar)(nil),
		(*SessionResponse_InteractionCreateNlu)(nil),
		(*SessionResponse_InteractionCreateDiarization)(nil),
		(*SessionResponse_InteractionCreateLanguageId)(nil),
		(*SessionResponse_InteractionCancel)(nil),
		(*SessionResponse_InteractionClose)(nil),
		(*SessionResponse_SessionCancel)(nil),
	}
	file_lumenvox_api_session_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SessionLoadGrammarRequest_GrammarUrl)(nil),
		(*SessionLoadGrammarRequest_InlineGrammarText)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_session_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_session_proto_depIdxs,
		MessageInfos:      file_lumenvox_api_session_proto_msgTypes,
	}.Build()
	File_lumenvox_api_session_proto = out.File
	file_lumenvox_api_session_proto_rawDesc = nil
	file_lumenvox_api_session_proto_goTypes = nil
	file_lumenvox_api_session_proto_depIdxs = nil
}
