// API Protocol Buffer File
// This is the gRPC definition for common messages

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.27.3
// source: lumenvox/api/common.proto

package api

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of all Interaction types.
type InteractionType int32

const (
	// This is not valid type. Indicating empty gRPC message.
	InteractionType_INTERACTION_TYPE_UNSPECIFIED InteractionType = 0
	// ASR processing interaction
	InteractionType_INTERACTION_TYPE_ASR InteractionType = 2
	// TTS processing interaction
	InteractionType_INTERACTION_TYPE_TTS InteractionType = 3
	// Validate grammar content. Can be url, inline or file reference (label)
	InteractionType_INTERACTION_TYPE_GRAMMAR_PARSE InteractionType = 4
	// Normalization interaction type
	InteractionType_INTERACTION_TYPE_NORMALIZATION InteractionType = 5
	// Call process analysis interaction type
	InteractionType_INTERACTION_TYPE_CPA InteractionType = 6
	// Answering machine detection interaction type
	InteractionType_INTERACTION_TYPE_AMD InteractionType = 7
	// ASR transcription interaction type
	InteractionType_INTERACTION_TYPE_ASR_TRANSCRIPTION InteractionType = 8
	// NLU interaction type
	InteractionType_INTERACTION_TYPE_NLU InteractionType = 9
	// Diarization interaction type
	InteractionType_INTERACTION_TYPE_DIARIZATION InteractionType = 10
	// LanguageId interaction type
	InteractionType_INTERACTION_TYPE_LANGUAGE_ID InteractionType = 11
)

// Enum value maps for InteractionType.
var (
	InteractionType_name = map[int32]string{
		0:  "INTERACTION_TYPE_UNSPECIFIED",
		2:  "INTERACTION_TYPE_ASR",
		3:  "INTERACTION_TYPE_TTS",
		4:  "INTERACTION_TYPE_GRAMMAR_PARSE",
		5:  "INTERACTION_TYPE_NORMALIZATION",
		6:  "INTERACTION_TYPE_CPA",
		7:  "INTERACTION_TYPE_AMD",
		8:  "INTERACTION_TYPE_ASR_TRANSCRIPTION",
		9:  "INTERACTION_TYPE_NLU",
		10: "INTERACTION_TYPE_DIARIZATION",
		11: "INTERACTION_TYPE_LANGUAGE_ID",
	}
	InteractionType_value = map[string]int32{
		"INTERACTION_TYPE_UNSPECIFIED":       0,
		"INTERACTION_TYPE_ASR":               2,
		"INTERACTION_TYPE_TTS":               3,
		"INTERACTION_TYPE_GRAMMAR_PARSE":     4,
		"INTERACTION_TYPE_NORMALIZATION":     5,
		"INTERACTION_TYPE_CPA":               6,
		"INTERACTION_TYPE_AMD":               7,
		"INTERACTION_TYPE_ASR_TRANSCRIPTION": 8,
		"INTERACTION_TYPE_NLU":               9,
		"INTERACTION_TYPE_DIARIZATION":       10,
		"INTERACTION_TYPE_LANGUAGE_ID":       11,
	}
)

func (x InteractionType) Enum() *InteractionType {
	p := new(InteractionType)
	*p = x
	return p
}

func (x InteractionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[0].Descriptor()
}

func (InteractionType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[0]
}

func (x InteractionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionType.Descriptor instead.
func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{0}
}

// List of all interaction sub-types for ASR Interactions
type InteractionSubType int32

const (
	// This is not valid type. Indicating empty gRPC message.
	InteractionSubType_INTERACTION_SUB_TYPE_UNSPECIFIED InteractionSubType = 0
	// Call process analysis interaction type with grammars
	InteractionSubType_INTERACTION_SUB_TYPE_GRAMMAR_BASED_CPA InteractionSubType = 1
	// Answering machine detection interaction type with grammars
	InteractionSubType_INTERACTION_SUB_TYPE_GRAMMAR_BASED_AMD InteractionSubType = 2
	// ASR transcription interaction with multiple grammars
	InteractionSubType_INTERACTION_SUB_TYPE_ENHANCED_TRANSCRIPTION InteractionSubType = 3
	// Deprecated - ASR continuous transcription
	//
	// Deprecated: Marked as deprecated in lumenvox/api/common.proto.
	InteractionSubType_INTERACTION_SUB_TYPE_CONTINUOUS_TRANSCRIPTION InteractionSubType = 4
	// Deprecated - Transcription result with normalized text
	// Normalization can be enabled for different interaction types/subtypes in
	// parallel, e.g. GRAMMAR_BASED_TRANSCRIPTION can have normalization setting
	// as well.
	// If needed for filtering, this flag will be added separately
	//
	// Deprecated: Marked as deprecated in lumenvox/api/common.proto.
	InteractionSubType_INTERACTION_SUB_TYPE_TRANSCRIPTION_WITH_NORMALIZATION InteractionSubType = 5
	// Transcription interaction type with grammars
	InteractionSubType_INTERACTION_SUB_TYPE_GRAMMAR_BASED_TRANSCRIPTION InteractionSubType = 6
)

// Enum value maps for InteractionSubType.
var (
	InteractionSubType_name = map[int32]string{
		0: "INTERACTION_SUB_TYPE_UNSPECIFIED",
		1: "INTERACTION_SUB_TYPE_GRAMMAR_BASED_CPA",
		2: "INTERACTION_SUB_TYPE_GRAMMAR_BASED_AMD",
		3: "INTERACTION_SUB_TYPE_ENHANCED_TRANSCRIPTION",
		4: "INTERACTION_SUB_TYPE_CONTINUOUS_TRANSCRIPTION",
		5: "INTERACTION_SUB_TYPE_TRANSCRIPTION_WITH_NORMALIZATION",
		6: "INTERACTION_SUB_TYPE_GRAMMAR_BASED_TRANSCRIPTION",
	}
	InteractionSubType_value = map[string]int32{
		"INTERACTION_SUB_TYPE_UNSPECIFIED":                      0,
		"INTERACTION_SUB_TYPE_GRAMMAR_BASED_CPA":                1,
		"INTERACTION_SUB_TYPE_GRAMMAR_BASED_AMD":                2,
		"INTERACTION_SUB_TYPE_ENHANCED_TRANSCRIPTION":           3,
		"INTERACTION_SUB_TYPE_CONTINUOUS_TRANSCRIPTION":         4,
		"INTERACTION_SUB_TYPE_TRANSCRIPTION_WITH_NORMALIZATION": 5,
		"INTERACTION_SUB_TYPE_GRAMMAR_BASED_TRANSCRIPTION":      6,
	}
)

func (x InteractionSubType) Enum() *InteractionSubType {
	p := new(InteractionSubType)
	*p = x
	return p
}

func (x InteractionSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[1].Descriptor()
}

func (InteractionSubType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[1]
}

func (x InteractionSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionSubType.Descriptor instead.
func (InteractionSubType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{1}
}

// List of all Interaction statuses.
type InteractionStatus int32

const (
	// This status is not expected or valid to happen. Indicating empty message.
	InteractionStatus_INTERACTION_STATUS_UNSPECIFIED InteractionStatus = 0
	// Interaction is in created only state, no additional processing is done yet.
	InteractionStatus_INTERACTION_STATUS_CREATED InteractionStatus = 1
	// Interaction results are ready. Most results are sent automatically when ready.
	InteractionStatus_INTERACTION_STATUS_RESULTS_READY InteractionStatus = 2
	// Used to indicated successfully closed interaction state
	InteractionStatus_INTERACTION_STATUS_CLOSED InteractionStatus = 3
	// Used to indicated successfully canceled interaction state
	InteractionStatus_INTERACTION_STATUS_CANCELED InteractionStatus = 4
	// Audio processing not started yet. Waiting on grammars to be loaded.
	InteractionStatus_INTERACTION_STATUS_ASR_WAITING_ON_GRAMMARS InteractionStatus = 101
	// Audio processing not started yet. Waiting on BARGE_IN event from VAD
	InteractionStatus_INTERACTION_STATUS_ASR_WAITING_ON_BARGIN InteractionStatus = 102
	// Initial status or post BARGE_IN status of interaction, stream processing not started yet
	InteractionStatus_INTERACTION_STATUS_ASR_STREAM_REQUEST InteractionStatus = 103
	// Batch mode, waiting for STOP request
	InteractionStatus_INTERACTION_STATUS_ASR_STOP_REQUESTED_WAITING InteractionStatus = 104
	// ASR started reading stream
	InteractionStatus_INTERACTION_STATUS_ASR_STREAM_STARTED InteractionStatus = 105
	// Set in case of Finalize request
	InteractionStatus_INTERACTION_STATUS_ASR_STREAM_STOP_REQUESTED InteractionStatus = 106
	// Used for CPA and AMD interactions
	InteractionStatus_INTERACTION_STATUS_ASR_WAITING_FOR_CPA_AMD_RESPONSE InteractionStatus = 107
	// No VAD event or interaction finalize, ASR processing timed out
	InteractionStatus_INTERACTION_STATUS_ASR_TIMEOUT InteractionStatus = 109
	// Audio processing started. Waiting on BARGE_OUT event from VAD
	InteractionStatus_INTERACTION_STATUS_ASR_WAITING_ON_BARGEOUT InteractionStatus = 110
	// TTS processing
	InteractionStatus_INTERACTION_STATUS_TTS_PROCESSING InteractionStatus = 200
	// Grammar(s) loading in progress, interaction not started yet
	InteractionStatus_INTERACTION_STATUS_GRAMMAR_PARSE_WAITING_ON_GRAMMARS InteractionStatus = 400
	// Interaction processing in progress
	InteractionStatus_INTERACTION_STATUS_GRAMMAR_PARSE_REQUESTED_PROCESSING InteractionStatus = 401
	// Normalize Text
	InteractionStatus_INTERACTION_STATUS_NORMALIZE_TEXT_REQUESTED_PROCESSING InteractionStatus = 500
	// Asr Transcription
	InteractionStatus_INTERACTION_STATUS_ASR_TRANSCRIPTION_WAITING_ON_PHRASE_LISTS InteractionStatus = 600
	// NLU processing
	InteractionStatus_INTERACTION_STATUS_NLU_PROCESSING InteractionStatus = 700
	// Diarization processing
	InteractionStatus_INTERACTION_STATUS_DIARIZATION_PROCESSING InteractionStatus = 800
	// LanguageId processing
	InteractionStatus_INTERACTION_STATUS_LANGUAGE_ID_PROCESSING InteractionStatus = 900
)

// Enum value maps for InteractionStatus.
var (
	InteractionStatus_name = map[int32]string{
		0:   "INTERACTION_STATUS_UNSPECIFIED",
		1:   "INTERACTION_STATUS_CREATED",
		2:   "INTERACTION_STATUS_RESULTS_READY",
		3:   "INTERACTION_STATUS_CLOSED",
		4:   "INTERACTION_STATUS_CANCELED",
		101: "INTERACTION_STATUS_ASR_WAITING_ON_GRAMMARS",
		102: "INTERACTION_STATUS_ASR_WAITING_ON_BARGIN",
		103: "INTERACTION_STATUS_ASR_STREAM_REQUEST",
		104: "INTERACTION_STATUS_ASR_STOP_REQUESTED_WAITING",
		105: "INTERACTION_STATUS_ASR_STREAM_STARTED",
		106: "INTERACTION_STATUS_ASR_STREAM_STOP_REQUESTED",
		107: "INTERACTION_STATUS_ASR_WAITING_FOR_CPA_AMD_RESPONSE",
		109: "INTERACTION_STATUS_ASR_TIMEOUT",
		110: "INTERACTION_STATUS_ASR_WAITING_ON_BARGEOUT",
		200: "INTERACTION_STATUS_TTS_PROCESSING",
		400: "INTERACTION_STATUS_GRAMMAR_PARSE_WAITING_ON_GRAMMARS",
		401: "INTERACTION_STATUS_GRAMMAR_PARSE_REQUESTED_PROCESSING",
		500: "INTERACTION_STATUS_NORMALIZE_TEXT_REQUESTED_PROCESSING",
		600: "INTERACTION_STATUS_ASR_TRANSCRIPTION_WAITING_ON_PHRASE_LISTS",
		700: "INTERACTION_STATUS_NLU_PROCESSING",
		800: "INTERACTION_STATUS_DIARIZATION_PROCESSING",
		900: "INTERACTION_STATUS_LANGUAGE_ID_PROCESSING",
	}
	InteractionStatus_value = map[string]int32{
		"INTERACTION_STATUS_UNSPECIFIED":                               0,
		"INTERACTION_STATUS_CREATED":                                   1,
		"INTERACTION_STATUS_RESULTS_READY":                             2,
		"INTERACTION_STATUS_CLOSED":                                    3,
		"INTERACTION_STATUS_CANCELED":                                  4,
		"INTERACTION_STATUS_ASR_WAITING_ON_GRAMMARS":                   101,
		"INTERACTION_STATUS_ASR_WAITING_ON_BARGIN":                     102,
		"INTERACTION_STATUS_ASR_STREAM_REQUEST":                        103,
		"INTERACTION_STATUS_ASR_STOP_REQUESTED_WAITING":                104,
		"INTERACTION_STATUS_ASR_STREAM_STARTED":                        105,
		"INTERACTION_STATUS_ASR_STREAM_STOP_REQUESTED":                 106,
		"INTERACTION_STATUS_ASR_WAITING_FOR_CPA_AMD_RESPONSE":          107,
		"INTERACTION_STATUS_ASR_TIMEOUT":                               109,
		"INTERACTION_STATUS_ASR_WAITING_ON_BARGEOUT":                   110,
		"INTERACTION_STATUS_TTS_PROCESSING":                            200,
		"INTERACTION_STATUS_GRAMMAR_PARSE_WAITING_ON_GRAMMARS":         400,
		"INTERACTION_STATUS_GRAMMAR_PARSE_REQUESTED_PROCESSING":        401,
		"INTERACTION_STATUS_NORMALIZE_TEXT_REQUESTED_PROCESSING":       500,
		"INTERACTION_STATUS_ASR_TRANSCRIPTION_WAITING_ON_PHRASE_LISTS": 600,
		"INTERACTION_STATUS_NLU_PROCESSING":                            700,
		"INTERACTION_STATUS_DIARIZATION_PROCESSING":                    800,
		"INTERACTION_STATUS_LANGUAGE_ID_PROCESSING":                    900,
	}
)

func (x InteractionStatus) Enum() *InteractionStatus {
	p := new(InteractionStatus)
	*p = x
	return p
}

func (x InteractionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[2].Descriptor()
}

func (InteractionStatus) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[2]
}

func (x InteractionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionStatus.Descriptor instead.
func (InteractionStatus) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{2}
}

// List of all grammar modes.
type GrammarMode int32

const (
	// Mode not specified
	GrammarMode_GRAMMAR_MODE_UNSPECIFIED GrammarMode = 0
	// Voice mode
	GrammarMode_GRAMMAR_MODE_VOICE GrammarMode = 1
	// DTMF mode
	GrammarMode_GRAMMAR_MODE_DTMF GrammarMode = 2
	// Voice and DTMF mode
	// Deprecated - should not be used
	GrammarMode_GRAMMAR_MODE_VOICE_AND_DTMF GrammarMode = 3
)

// Enum value maps for GrammarMode.
var (
	GrammarMode_name = map[int32]string{
		0: "GRAMMAR_MODE_UNSPECIFIED",
		1: "GRAMMAR_MODE_VOICE",
		2: "GRAMMAR_MODE_DTMF",
		3: "GRAMMAR_MODE_VOICE_AND_DTMF",
	}
	GrammarMode_value = map[string]int32{
		"GRAMMAR_MODE_UNSPECIFIED":    0,
		"GRAMMAR_MODE_VOICE":          1,
		"GRAMMAR_MODE_DTMF":           2,
		"GRAMMAR_MODE_VOICE_AND_DTMF": 3,
	}
)

func (x GrammarMode) Enum() *GrammarMode {
	p := new(GrammarMode)
	*p = x
	return p
}

func (x GrammarMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrammarMode) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[3].Descriptor()
}

func (GrammarMode) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[3]
}

func (x GrammarMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrammarMode.Descriptor instead.
func (GrammarMode) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{3}
}

// Note that all builtin grammars are language-specific
type Grammar_BuiltinGrammar int32

const (
	// Undefined built-in grammar
	Grammar_BUILTIN_GRAMMAR_UNSPECIFIED Grammar_BuiltinGrammar = 0
	// "yes" => true
	Grammar_BUILTIN_GRAMMAR_BOOLEAN Grammar_BuiltinGrammar = 1
	// "one dollar ninety seven" => USD1.97
	Grammar_BUILTIN_GRAMMAR_CURRENCY Grammar_BuiltinGrammar = 2
	// "march sixteenth nineteen seventy nine" => 19790316
	Grammar_BUILTIN_GRAMMAR_DATE Grammar_BuiltinGrammar = 3
	// "one two three four" => 1234
	Grammar_BUILTIN_GRAMMAR_DIGITS Grammar_BuiltinGrammar = 4
	// "three point one four one five nine two six" => 3.1415926
	Grammar_BUILTIN_GRAMMAR_NUMBER Grammar_BuiltinGrammar = 5
	// "eight five eight seven oh seven oh seven oh seven" => 8587070707
	Grammar_BUILTIN_GRAMMAR_PHONE Grammar_BuiltinGrammar = 6
	// "six o clock" => 0600
	Grammar_BUILTIN_GRAMMAR_TIME Grammar_BuiltinGrammar = 7
)

// Enum value maps for Grammar_BuiltinGrammar.
var (
	Grammar_BuiltinGrammar_name = map[int32]string{
		0: "BUILTIN_GRAMMAR_UNSPECIFIED",
		1: "BUILTIN_GRAMMAR_BOOLEAN",
		2: "BUILTIN_GRAMMAR_CURRENCY",
		3: "BUILTIN_GRAMMAR_DATE",
		4: "BUILTIN_GRAMMAR_DIGITS",
		5: "BUILTIN_GRAMMAR_NUMBER",
		6: "BUILTIN_GRAMMAR_PHONE",
		7: "BUILTIN_GRAMMAR_TIME",
	}
	Grammar_BuiltinGrammar_value = map[string]int32{
		"BUILTIN_GRAMMAR_UNSPECIFIED": 0,
		"BUILTIN_GRAMMAR_BOOLEAN":     1,
		"BUILTIN_GRAMMAR_CURRENCY":    2,
		"BUILTIN_GRAMMAR_DATE":        3,
		"BUILTIN_GRAMMAR_DIGITS":      4,
		"BUILTIN_GRAMMAR_NUMBER":      5,
		"BUILTIN_GRAMMAR_PHONE":       6,
		"BUILTIN_GRAMMAR_TIME":        7,
	}
)

func (x Grammar_BuiltinGrammar) Enum() *Grammar_BuiltinGrammar {
	p := new(Grammar_BuiltinGrammar)
	*p = x
	return p
}

func (x Grammar_BuiltinGrammar) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Grammar_BuiltinGrammar) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[4].Descriptor()
}

func (Grammar_BuiltinGrammar) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[4]
}

func (x Grammar_BuiltinGrammar) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Grammar_BuiltinGrammar.Descriptor instead.
func (Grammar_BuiltinGrammar) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{5, 0}
}

type VadEvent_VadEventType int32

const (
	// Undefined VAD event type
	VadEvent_VAD_EVENT_TYPE_UNSPECIFIED VadEvent_VadEventType = 0
	// VAD begins processing audio
	VadEvent_VAD_EVENT_TYPE_BEGIN_PROCESSING VadEvent_VadEventType = 1
	// Barge-in occurred, audio that will be processed by the ASR starts here.
	// This notification might be useful to stop prompt playback for example
	VadEvent_VAD_EVENT_TYPE_BARGE_IN VadEvent_VadEventType = 2
	// End-of-speech occurred, no further audio will be processed by VAD for
	// the specified interaction. If the setting
	// VadSettings.auto_finalize_on_eos is true, the ASR will immediately
	// finish processing audio at this point
	VadEvent_VAD_EVENT_TYPE_END_OF_SPEECH VadEvent_VadEventType = 3
	// VAD timed out waiting for audio barge-in (start-of-speech). The audio
	// manager will no longer process audio for this interaction.
	VadEvent_VAD_EVENT_TYPE_BARGE_IN_TIMEOUT VadEvent_VadEventType = 4
	// VAD timed out waiting for audio barge-out (end-of-speech). The audio
	// manager will no longer process audio for this interaction.
	VadEvent_VAD_EVENT_TYPE_END_OF_SPEECH_TIMEOUT VadEvent_VadEventType = 5
	// VAD has reached audio_consume_max_ms before barge-in has occurred.
	VadEvent_VAD_EVENT_TYPE_END_OF_AUDIO_BEFORE_BARGEIN VadEvent_VadEventType = 6
	// VAD has reached audio_consume_max_ms before barge-out (end-of-speech)
	// has occurred.
	VadEvent_VAD_EVENT_TYPE_END_OF_AUDIO_AFTER_BARGEIN VadEvent_VadEventType = 7
)

// Enum value maps for VadEvent_VadEventType.
var (
	VadEvent_VadEventType_name = map[int32]string{
		0: "VAD_EVENT_TYPE_UNSPECIFIED",
		1: "VAD_EVENT_TYPE_BEGIN_PROCESSING",
		2: "VAD_EVENT_TYPE_BARGE_IN",
		3: "VAD_EVENT_TYPE_END_OF_SPEECH",
		4: "VAD_EVENT_TYPE_BARGE_IN_TIMEOUT",
		5: "VAD_EVENT_TYPE_END_OF_SPEECH_TIMEOUT",
		6: "VAD_EVENT_TYPE_END_OF_AUDIO_BEFORE_BARGEIN",
		7: "VAD_EVENT_TYPE_END_OF_AUDIO_AFTER_BARGEIN",
	}
	VadEvent_VadEventType_value = map[string]int32{
		"VAD_EVENT_TYPE_UNSPECIFIED":                 0,
		"VAD_EVENT_TYPE_BEGIN_PROCESSING":            1,
		"VAD_EVENT_TYPE_BARGE_IN":                    2,
		"VAD_EVENT_TYPE_END_OF_SPEECH":               3,
		"VAD_EVENT_TYPE_BARGE_IN_TIMEOUT":            4,
		"VAD_EVENT_TYPE_END_OF_SPEECH_TIMEOUT":       5,
		"VAD_EVENT_TYPE_END_OF_AUDIO_BEFORE_BARGEIN": 6,
		"VAD_EVENT_TYPE_END_OF_AUDIO_AFTER_BARGEIN":  7,
	}
)

func (x VadEvent_VadEventType) Enum() *VadEvent_VadEventType {
	p := new(VadEvent_VadEventType)
	*p = x
	return p
}

func (x VadEvent_VadEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VadEvent_VadEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_lumenvox_api_common_proto_enumTypes[5].Descriptor()
}

func (VadEvent_VadEventType) Type() protoreflect.EnumType {
	return &file_lumenvox_api_common_proto_enumTypes[5]
}

func (x VadEvent_VadEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VadEvent_VadEventType.Descriptor instead.
func (VadEvent_VadEventType) EnumDescriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{6, 0}
}

type AudioRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AudioRequest:
	//
	//	*AudioRequestMessage_AudioPush
	//	*AudioRequestMessage_AudioPull
	AudioRequest isAudioRequestMessage_AudioRequest `protobuf_oneof:"audio_request"`
}

func (x *AudioRequestMessage) Reset() {
	*x = AudioRequestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioRequestMessage) ProtoMessage() {}

func (x *AudioRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioRequestMessage.ProtoReflect.Descriptor instead.
func (*AudioRequestMessage) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{0}
}

func (m *AudioRequestMessage) GetAudioRequest() isAudioRequestMessage_AudioRequest {
	if m != nil {
		return m.AudioRequest
	}
	return nil
}

func (x *AudioRequestMessage) GetAudioPush() *AudioPushRequest {
	if x, ok := x.GetAudioRequest().(*AudioRequestMessage_AudioPush); ok {
		return x.AudioPush
	}
	return nil
}

func (x *AudioRequestMessage) GetAudioPull() *AudioPullRequest {
	if x, ok := x.GetAudioRequest().(*AudioRequestMessage_AudioPull); ok {
		return x.AudioPull
	}
	return nil
}

type isAudioRequestMessage_AudioRequest interface {
	isAudioRequestMessage_AudioRequest()
}

type AudioRequestMessage_AudioPush struct {
	// Streamed binary audio data to be added to the session audio resource
	AudioPush *AudioPushRequest `protobuf:"bytes,1,opt,name=audio_push,json=audioPush,proto3,oneof"`
}

type AudioRequestMessage_AudioPull struct {
	// Returns a block of audio data from an audio resource.
	AudioPull *AudioPullRequest `protobuf:"bytes,2,opt,name=audio_pull,json=audioPull,proto3,oneof"`
}

func (*AudioRequestMessage_AudioPush) isAudioRequestMessage_AudioRequest() {}

func (*AudioRequestMessage_AudioPull) isAudioRequestMessage_AudioRequest() {}

type AudioPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary audio data to be added to the audio resource
	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
}

func (x *AudioPushRequest) Reset() {
	*x = AudioPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPushRequest) ProtoMessage() {}

func (x *AudioPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPushRequest.ProtoReflect.Descriptor instead.
func (*AudioPushRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{1}
}

func (x *AudioPushRequest) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

type DtmfPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ASR interaction to associate this dtmf_key with
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// DTMF key press to be added to interaction stream for processing.
	// Valid keys are 0-9, A-F, *, #
	DtmfKey string `protobuf:"bytes,2,opt,name=dtmf_key,json=dtmfKey,proto3" json:"dtmf_key,omitempty"`
}

func (x *DtmfPushRequest) Reset() {
	*x = DtmfPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtmfPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtmfPushRequest) ProtoMessage() {}

func (x *DtmfPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtmfPushRequest.ProtoReflect.Descriptor instead.
func (*DtmfPushRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{2}
}

func (x *DtmfPushRequest) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *DtmfPushRequest) GetDtmfKey() string {
	if x != nil {
		return x.DtmfKey
	}
	return ""
}

type AudioPullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the audio requested (Note that this could be session_id to request
	// the inbound audio resource)
	AudioId string `protobuf:"bytes,1,opt,name=audio_id,json=audioId,proto3" json:"audio_id,omitempty"`
	// For multi-channel audio, this is the channel number being referenced.
	// Range is from 0 to N. Default channel 0 will be used if not specified
	AudioChannel *OptionalInt32 `protobuf:"bytes,2,opt,name=audio_channel,json=audioChannel,proto3" json:"audio_channel,omitempty"`
	// Number of milliseconds from the beginning of the audio to return.
	// Default is from the beginning
	AudioStart *OptionalInt32 `protobuf:"bytes,3,opt,name=audio_start,json=audioStart,proto3" json:"audio_start,omitempty"`
	// Maximum number of milliseconds to return.
	// A zero value returns all available audio (from requested start point).
	// Default is all audio, from start point
	AudioLength *OptionalInt32 `protobuf:"bytes,4,opt,name=audio_length,json=audioLength,proto3" json:"audio_length,omitempty"`
}

func (x *AudioPullRequest) Reset() {
	*x = AudioPullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPullRequest) ProtoMessage() {}

func (x *AudioPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPullRequest.ProtoReflect.Descriptor instead.
func (*AudioPullRequest) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{3}
}

func (x *AudioPullRequest) GetAudioId() string {
	if x != nil {
		return x.AudioId
	}
	return ""
}

func (x *AudioPullRequest) GetAudioChannel() *OptionalInt32 {
	if x != nil {
		return x.AudioChannel
	}
	return nil
}

func (x *AudioPullRequest) GetAudioStart() *OptionalInt32 {
	if x != nil {
		return x.AudioStart
	}
	return nil
}

func (x *AudioPullRequest) GetAudioLength() *OptionalInt32 {
	if x != nil {
		return x.AudioLength
	}
	return nil
}

type AudioPullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Binary audio data that was requested
	AudioData []byte `protobuf:"bytes,1,opt,name=audio_data,json=audioData,proto3" json:"audio_data,omitempty"`
	// For multi-channel audio, this is the channel number being referenced.
	AudioChannel *OptionalInt32 `protobuf:"bytes,2,opt,name=audio_channel,json=audioChannel,proto3" json:"audio_channel,omitempty"`
	// In case of large audio, data will be split and there will be multiple
	// AudioPullResponse messages. final_data_chunk field is set to true for the
	// last message
	FinalDataChunk bool `protobuf:"varint,3,opt,name=final_data_chunk,json=finalDataChunk,proto3" json:"final_data_chunk,omitempty"`
}

func (x *AudioPullResponse) Reset() {
	*x = AudioPullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPullResponse) ProtoMessage() {}

func (x *AudioPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPullResponse.ProtoReflect.Descriptor instead.
func (*AudioPullResponse) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{4}
}

func (x *AudioPullResponse) GetAudioData() []byte {
	if x != nil {
		return x.AudioData
	}
	return nil
}

func (x *AudioPullResponse) GetAudioChannel() *OptionalInt32 {
	if x != nil {
		return x.AudioChannel
	}
	return nil
}

func (x *AudioPullResponse) GetFinalDataChunk() bool {
	if x != nil {
		return x.FinalDataChunk
	}
	return false
}

type Grammar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method of loading the specified grammar
	//
	// Types that are assignable to GrammarLoadMethod:
	//
	//	*Grammar_GrammarUrl
	//	*Grammar_InlineGrammarText
	//	*Grammar_GlobalGrammarLabel
	//	*Grammar_SessionGrammarLabel
	//	*Grammar_BuiltinVoiceGrammar
	//	*Grammar_BuiltinDtmfGrammar
	GrammarLoadMethod isGrammar_GrammarLoadMethod `protobuf_oneof:"grammar_load_method"`
	// Optional label assigned to grammar, used for error reporting
	// Note: label must consist of letters, digits, hyphens, underscores only
	Label *OptionalString `protobuf:"bytes,7,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Grammar) Reset() {
	*x = Grammar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grammar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grammar) ProtoMessage() {}

func (x *Grammar) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grammar.ProtoReflect.Descriptor instead.
func (*Grammar) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{5}
}

func (m *Grammar) GetGrammarLoadMethod() isGrammar_GrammarLoadMethod {
	if m != nil {
		return m.GrammarLoadMethod
	}
	return nil
}

func (x *Grammar) GetGrammarUrl() string {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_GrammarUrl); ok {
		return x.GrammarUrl
	}
	return ""
}

func (x *Grammar) GetInlineGrammarText() string {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_InlineGrammarText); ok {
		return x.InlineGrammarText
	}
	return ""
}

// Deprecated: Marked as deprecated in lumenvox/api/common.proto.
func (x *Grammar) GetGlobalGrammarLabel() string {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_GlobalGrammarLabel); ok {
		return x.GlobalGrammarLabel
	}
	return ""
}

func (x *Grammar) GetSessionGrammarLabel() string {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_SessionGrammarLabel); ok {
		return x.SessionGrammarLabel
	}
	return ""
}

func (x *Grammar) GetBuiltinVoiceGrammar() Grammar_BuiltinGrammar {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_BuiltinVoiceGrammar); ok {
		return x.BuiltinVoiceGrammar
	}
	return Grammar_BUILTIN_GRAMMAR_UNSPECIFIED
}

func (x *Grammar) GetBuiltinDtmfGrammar() Grammar_BuiltinGrammar {
	if x, ok := x.GetGrammarLoadMethod().(*Grammar_BuiltinDtmfGrammar); ok {
		return x.BuiltinDtmfGrammar
	}
	return Grammar_BUILTIN_GRAMMAR_UNSPECIFIED
}

func (x *Grammar) GetLabel() *OptionalString {
	if x != nil {
		return x.Label
	}
	return nil
}

type isGrammar_GrammarLoadMethod interface {
	isGrammar_GrammarLoadMethod()
}

type Grammar_GrammarUrl struct {
	// A grammar URL to be loaded
	GrammarUrl string `protobuf:"bytes,1,opt,name=grammar_url,json=grammarUrl,proto3,oneof"`
}

type Grammar_InlineGrammarText struct {
	// A string containing the raw grammar text
	InlineGrammarText string `protobuf:"bytes,2,opt,name=inline_grammar_text,json=inlineGrammarText,proto3,oneof"`
}

type Grammar_GlobalGrammarLabel struct {
	// Reference to a previously defined "global" grammar
	// Note: label must consist of letters, digits, hyphens, underscores only
	//
	// Deprecated: Marked as deprecated in lumenvox/api/common.proto.
	GlobalGrammarLabel string `protobuf:"bytes,3,opt,name=global_grammar_label,json=globalGrammarLabel,proto3,oneof"`
}

type Grammar_SessionGrammarLabel struct {
	// Reference to a previously defined "session" grammar
	// Note: label must consist of letters, digits, hyphens, underscores only
	SessionGrammarLabel string `protobuf:"bytes,4,opt,name=session_grammar_label,json=sessionGrammarLabel,proto3,oneof"`
}

type Grammar_BuiltinVoiceGrammar struct {
	// Reference to a "builtin" voice grammar
	BuiltinVoiceGrammar Grammar_BuiltinGrammar `protobuf:"varint,5,opt,name=builtin_voice_grammar,json=builtinVoiceGrammar,proto3,enum=lumenvox.api.Grammar_BuiltinGrammar,oneof"`
}

type Grammar_BuiltinDtmfGrammar struct {
	// Reference to a "builtin" DTMF grammar
	BuiltinDtmfGrammar Grammar_BuiltinGrammar `protobuf:"varint,6,opt,name=builtin_dtmf_grammar,json=builtinDtmfGrammar,proto3,enum=lumenvox.api.Grammar_BuiltinGrammar,oneof"`
}

func (*Grammar_GrammarUrl) isGrammar_GrammarLoadMethod() {}

func (*Grammar_InlineGrammarText) isGrammar_GrammarLoadMethod() {}

func (*Grammar_GlobalGrammarLabel) isGrammar_GrammarLoadMethod() {}

func (*Grammar_SessionGrammarLabel) isGrammar_GrammarLoadMethod() {}

func (*Grammar_BuiltinVoiceGrammar) isGrammar_GrammarLoadMethod() {}

func (*Grammar_BuiltinDtmfGrammar) isGrammar_GrammarLoadMethod() {}

// Message used to signal events over the course of Voice Activity Detection
// processing.
//
// The audio_offset will signify at what point within the session audio
// resource the event occurred.
type VadEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The interaction object being referenced
	InteractionId string `protobuf:"bytes,1,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// The type of event this message represents
	VadEventType VadEvent_VadEventType `protobuf:"varint,2,opt,name=vad_event_type,json=vadEventType,proto3,enum=lumenvox.api.VadEvent_VadEventType" json:"vad_event_type,omitempty"`
	// The offset in milliseconds from the beginning of the audio resource that
	// this event occurred
	AudioOffset *OptionalInt32 `protobuf:"bytes,3,opt,name=audio_offset,json=audioOffset,proto3" json:"audio_offset,omitempty"`
}

func (x *VadEvent) Reset() {
	*x = VadEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VadEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VadEvent) ProtoMessage() {}

func (x *VadEvent) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VadEvent.ProtoReflect.Descriptor instead.
func (*VadEvent) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{6}
}

func (x *VadEvent) GetInteractionId() string {
	if x != nil {
		return x.InteractionId
	}
	return ""
}

func (x *VadEvent) GetVadEventType() VadEvent_VadEventType {
	if x != nil {
		return x.VadEventType
	}
	return VadEvent_VAD_EVENT_TYPE_UNSPECIFIED
}

func (x *VadEvent) GetAudioOffset() *OptionalInt32 {
	if x != nil {
		return x.AudioOffset
	}
	return nil
}

type PhraseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of a previously defined global phrase list
	PhraseListLabel string `protobuf:"bytes,1,opt,name=phrase_list_label,json=phraseListLabel,proto3" json:"phrase_list_label,omitempty"`
}

func (x *PhraseList) Reset() {
	*x = PhraseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhraseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhraseList) ProtoMessage() {}

func (x *PhraseList) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhraseList.ProtoReflect.Descriptor instead.
func (*PhraseList) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{7}
}

func (x *PhraseList) GetPhraseListLabel() string {
	if x != nil {
		return x.PhraseListLabel
	}
	return ""
}

type SessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional interaction object being referenced
	InteractionId *OptionalString `protobuf:"bytes,2,opt,name=interaction_id,json=interactionId,proto3" json:"interaction_id,omitempty"`
	// String containing event information
	StatusMessage *status.Status `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *SessionEvent) Reset() {
	*x = SessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEvent) ProtoMessage() {}

func (x *SessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEvent.ProtoReflect.Descriptor instead.
func (*SessionEvent) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{8}
}

func (x *SessionEvent) GetInteractionId() *OptionalString {
	if x != nil {
		return x.InteractionId
	}
	return nil
}

func (x *SessionEvent) GetStatusMessage() *status.Status {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

// Event can be either a VadEvent or a SessionEvent
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*Event_VadEvent
	//	*Event_SessionEvent
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{9}
}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *Event) GetVadEvent() *VadEvent {
	if x, ok := x.GetEvent().(*Event_VadEvent); ok {
		return x.VadEvent
	}
	return nil
}

func (x *Event) GetSessionEvent() *SessionEvent {
	if x, ok := x.GetEvent().(*Event_SessionEvent); ok {
		return x.SessionEvent
	}
	return nil
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_VadEvent struct {
	// Event returned form Vad (AudioManager)
	VadEvent *VadEvent `protobuf:"bytes,1,opt,name=vad_event,json=vadEvent,proto3,oneof"`
}

type Event_SessionEvent struct {
	// Session Events used to report errors to the API user
	SessionEvent *SessionEvent `protobuf:"bytes,2,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

func (*Event_VadEvent) isEvent_Event() {}

func (*Event_SessionEvent) isEvent_Event() {}

// a single event with timestamp to be logged to the database
// the LogEvent will be returned via reporting api
type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Log Event Timestamp (UTC)
	TimeStamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	// can be either a VadEvent or a SessionEvent
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lumenvox_api_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_lumenvox_api_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_lumenvox_api_common_proto_rawDescGZIP(), []int{10}
}

func (x *LogEvent) GetTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

func (x *LogEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

var File_lumenvox_api_common_proto protoreflect.FileDescriptor

var file_lumenvox_api_common_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x6d,
	0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x6c,
	0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x31, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x0f, 0x44, 0x74, 0x6d, 0x66, 0x50, 0x75, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x74, 0x6d, 0x66, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x74, 0x6d, 0x66, 0x4b, 0x65, 0x79, 0x22, 0xed, 0x01, 0x0a, 0x10, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0c,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0a,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x40, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xc3, 0x05, 0x0a, 0x07,
	0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x14,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x15, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65,
	0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x48,
	0x00, 0x52, 0x13, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x47,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x58, 0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x5f, 0x64, 0x74, 0x6d, 0x66, 0x5f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x48, 0x00, 0x52, 0x12, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x69, 0x6e, 0x44, 0x74, 0x6d, 0x66, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72,
	0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x49, 0x4c, 0x54,
	0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c,
	0x54, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4c,
	0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e,
	0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52,
	0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x53, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49,
	0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e,
	0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d,
	0x4d, 0x41, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x42, 0x15, 0x0a, 0x13, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0xff, 0x03, 0x0a, 0x08, 0x56, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x76, 0x61, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x76, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xc0, 0x02, 0x0a, 0x0c, 0x56, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x43, 0x48, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x4e,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x41,
	0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x05, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x42, 0x41, 0x52, 0x47, 0x45,
	0x49, 0x4e, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x56, 0x41, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x41, 0x52, 0x47, 0x45, 0x49,
	0x4e, 0x10, 0x07, 0x22, 0x38, 0x0a, 0x0a, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x76, 0x61, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75,
	0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x61, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x41, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x70, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2a, 0xe9, 0x02,
	0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x54, 0x53, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4d,
	0x4d, 0x41, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x41, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4d,
	0x44, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4c, 0x55, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x47,
	0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x2a, 0xef, 0x02, 0x0a, 0x12, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x43, 0x50, 0x41,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d,
	0x41, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x4d, 0x44, 0x10, 0x02, 0x12, 0x2f,
	0x0a, 0x2b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x35, 0x0a, 0x2d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f,
	0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x3d, 0x0a, 0x35, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,
	0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0x8a, 0x08, 0x0a, 0x11,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e,
	0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x53, 0x10, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e,
	0x5f, 0x42, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x66, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x53, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x67, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x68, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53,
	0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x69, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x6a, 0x12, 0x37, 0x0a, 0x33, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x57,
	0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x50, 0x41, 0x5f, 0x41,
	0x4d, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x6b, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x6d, 0x12, 0x2e, 0x0a, 0x2a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x52, 0x47, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x6e, 0x12, 0x26, 0x0a, 0x21, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x54, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52,
	0x53, 0x10, 0x90, 0x03, 0x12, 0x3a, 0x0a, 0x35, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x4d, 0x4d,
	0x41, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x91, 0x03,
	0x12, 0x3b, 0x0a, 0x36, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xf4, 0x03, 0x12, 0x41, 0x0a,
	0x3c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x53, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e,
	0x5f, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x10, 0xd8, 0x04,
	0x12, 0x26, 0x0a, 0x21, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4c, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xbc, 0x05, 0x12, 0x2e, 0x0a, 0x29, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x49, 0x41, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xa0, 0x06, 0x12, 0x2e, 0x0a, 0x29, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c,
	0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x84, 0x07, 0x2a, 0x7b, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x4d, 0x4d,
	0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x54,
	0x4d, 0x46, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44,
	0x54, 0x4d, 0x46, 0x10, 0x03, 0x42, 0x90, 0x01, 0x0a, 0x0c, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76,
	0x6f, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x00, 0x5a, 0x3d, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x5f, 0x67, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x76, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x76, 0x6f, 0x78,
	0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x05, 0x43, 0x4c, 0x56, 0x4f, 0x50, 0xaa, 0x02, 0x13, 0x4c,
	0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0xca, 0x02, 0x13, 0x4c, 0x75, 0x6d, 0x65, 0x6e, 0x56, 0x6f, 0x78, 0x5c, 0x41, 0x70,
	0x69, 0x5c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lumenvox_api_common_proto_rawDescOnce sync.Once
	file_lumenvox_api_common_proto_rawDescData = file_lumenvox_api_common_proto_rawDesc
)

func file_lumenvox_api_common_proto_rawDescGZIP() []byte {
	file_lumenvox_api_common_proto_rawDescOnce.Do(func() {
		file_lumenvox_api_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_lumenvox_api_common_proto_rawDescData)
	})
	return file_lumenvox_api_common_proto_rawDescData
}

var file_lumenvox_api_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_lumenvox_api_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_lumenvox_api_common_proto_goTypes = []interface{}{
	(InteractionType)(0),          // 0: lumenvox.api.InteractionType
	(InteractionSubType)(0),       // 1: lumenvox.api.InteractionSubType
	(InteractionStatus)(0),        // 2: lumenvox.api.InteractionStatus
	(GrammarMode)(0),              // 3: lumenvox.api.GrammarMode
	(Grammar_BuiltinGrammar)(0),   // 4: lumenvox.api.Grammar.BuiltinGrammar
	(VadEvent_VadEventType)(0),    // 5: lumenvox.api.VadEvent.VadEventType
	(*AudioRequestMessage)(nil),   // 6: lumenvox.api.AudioRequestMessage
	(*AudioPushRequest)(nil),      // 7: lumenvox.api.AudioPushRequest
	(*DtmfPushRequest)(nil),       // 8: lumenvox.api.DtmfPushRequest
	(*AudioPullRequest)(nil),      // 9: lumenvox.api.AudioPullRequest
	(*AudioPullResponse)(nil),     // 10: lumenvox.api.AudioPullResponse
	(*Grammar)(nil),               // 11: lumenvox.api.Grammar
	(*VadEvent)(nil),              // 12: lumenvox.api.VadEvent
	(*PhraseList)(nil),            // 13: lumenvox.api.PhraseList
	(*SessionEvent)(nil),          // 14: lumenvox.api.SessionEvent
	(*Event)(nil),                 // 15: lumenvox.api.Event
	(*LogEvent)(nil),              // 16: lumenvox.api.LogEvent
	(*OptionalInt32)(nil),         // 17: lumenvox.api.OptionalInt32
	(*OptionalString)(nil),        // 18: lumenvox.api.OptionalString
	(*status.Status)(nil),         // 19: google.rpc.Status
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_lumenvox_api_common_proto_depIdxs = []int32{
	7,  // 0: lumenvox.api.AudioRequestMessage.audio_push:type_name -> lumenvox.api.AudioPushRequest
	9,  // 1: lumenvox.api.AudioRequestMessage.audio_pull:type_name -> lumenvox.api.AudioPullRequest
	17, // 2: lumenvox.api.AudioPullRequest.audio_channel:type_name -> lumenvox.api.OptionalInt32
	17, // 3: lumenvox.api.AudioPullRequest.audio_start:type_name -> lumenvox.api.OptionalInt32
	17, // 4: lumenvox.api.AudioPullRequest.audio_length:type_name -> lumenvox.api.OptionalInt32
	17, // 5: lumenvox.api.AudioPullResponse.audio_channel:type_name -> lumenvox.api.OptionalInt32
	4,  // 6: lumenvox.api.Grammar.builtin_voice_grammar:type_name -> lumenvox.api.Grammar.BuiltinGrammar
	4,  // 7: lumenvox.api.Grammar.builtin_dtmf_grammar:type_name -> lumenvox.api.Grammar.BuiltinGrammar
	18, // 8: lumenvox.api.Grammar.label:type_name -> lumenvox.api.OptionalString
	5,  // 9: lumenvox.api.VadEvent.vad_event_type:type_name -> lumenvox.api.VadEvent.VadEventType
	17, // 10: lumenvox.api.VadEvent.audio_offset:type_name -> lumenvox.api.OptionalInt32
	18, // 11: lumenvox.api.SessionEvent.interaction_id:type_name -> lumenvox.api.OptionalString
	19, // 12: lumenvox.api.SessionEvent.status_message:type_name -> google.rpc.Status
	12, // 13: lumenvox.api.Event.vad_event:type_name -> lumenvox.api.VadEvent
	14, // 14: lumenvox.api.Event.session_event:type_name -> lumenvox.api.SessionEvent
	20, // 15: lumenvox.api.LogEvent.time_stamp:type_name -> google.protobuf.Timestamp
	15, // 16: lumenvox.api.LogEvent.event:type_name -> lumenvox.api.Event
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_lumenvox_api_common_proto_init() }
func file_lumenvox_api_common_proto_init() {
	if File_lumenvox_api_common_proto != nil {
		return
	}
	file_lumenvox_api_optional_values_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_lumenvox_api_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioRequestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtmfPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioPullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grammar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VadEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhraseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lumenvox_api_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lumenvox_api_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AudioRequestMessage_AudioPush)(nil),
		(*AudioRequestMessage_AudioPull)(nil),
	}
	file_lumenvox_api_common_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Grammar_GrammarUrl)(nil),
		(*Grammar_InlineGrammarText)(nil),
		(*Grammar_GlobalGrammarLabel)(nil),
		(*Grammar_SessionGrammarLabel)(nil),
		(*Grammar_BuiltinVoiceGrammar)(nil),
		(*Grammar_BuiltinDtmfGrammar)(nil),
	}
	file_lumenvox_api_common_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Event_VadEvent)(nil),
		(*Event_SessionEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lumenvox_api_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lumenvox_api_common_proto_goTypes,
		DependencyIndexes: file_lumenvox_api_common_proto_depIdxs,
		EnumInfos:         file_lumenvox_api_common_proto_enumTypes,
		MessageInfos:      file_lumenvox_api_common_proto_msgTypes,
	}.Build()
	File_lumenvox_api_common_proto = out.File
	file_lumenvox_api_common_proto_rawDesc = nil
	file_lumenvox_api_common_proto_goTypes = nil
	file_lumenvox_api_common_proto_depIdxs = nil
}
