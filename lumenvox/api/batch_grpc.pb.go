// Batch API Protocol Buffer File
// This is the gRPC definition for the LumenVox Batch API

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: lumenvox/api/batch.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Batch_Batch_FullMethodName = "/lumenvox.api.Batch/Batch"
)

// BatchClient is the client API for Batch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # Batch Service
//
// The LumenVox Batch API can be used to access various batch operations,
// such as offline transcription, etc.
type BatchClient interface {
	// Batch
	//
	// Creates a new Batch and establishes a bidirectional stream, able to
	// process all messages on this single bidirectional connection
	Batch(ctx context.Context, opts ...grpc.CallOption) (Batch_BatchClient, error)
}

type batchClient struct {
	cc grpc.ClientConnInterface
}

func NewBatchClient(cc grpc.ClientConnInterface) BatchClient {
	return &batchClient{cc}
}

func (c *batchClient) Batch(ctx context.Context, opts ...grpc.CallOption) (Batch_BatchClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Batch_ServiceDesc.Streams[0], Batch_Batch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &batchBatchClient{ClientStream: stream}
	return x, nil
}

type Batch_BatchClient interface {
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
	grpc.ClientStream
}

type batchBatchClient struct {
	grpc.ClientStream
}

func (x *batchBatchClient) Send(m *BatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *batchBatchClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BatchServer is the server API for Batch service.
// All implementations must embed UnimplementedBatchServer
// for forward compatibility
//
// # Batch Service
//
// The LumenVox Batch API can be used to access various batch operations,
// such as offline transcription, etc.
type BatchServer interface {
	// Batch
	//
	// Creates a new Batch and establishes a bidirectional stream, able to
	// process all messages on this single bidirectional connection
	Batch(Batch_BatchServer) error
	mustEmbedUnimplementedBatchServer()
}

// UnimplementedBatchServer must be embedded to have forward compatible implementations.
type UnimplementedBatchServer struct {
}

func (UnimplementedBatchServer) Batch(Batch_BatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedBatchServer) mustEmbedUnimplementedBatchServer() {}

// UnsafeBatchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BatchServer will
// result in compilation errors.
type UnsafeBatchServer interface {
	mustEmbedUnimplementedBatchServer()
}

func RegisterBatchServer(s grpc.ServiceRegistrar, srv BatchServer) {
	s.RegisterService(&Batch_ServiceDesc, srv)
}

func _Batch_Batch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BatchServer).Batch(&batchBatchServer{ServerStream: stream})
}

type Batch_BatchServer interface {
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	grpc.ServerStream
}

type batchBatchServer struct {
	grpc.ServerStream
}

func (x *batchBatchServer) Send(m *BatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *batchBatchServer) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Batch_ServiceDesc is the grpc.ServiceDesc for Batch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Batch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lumenvox.api.Batch",
	HandlerType: (*BatchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Batch",
			Handler:       _Batch_Batch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "lumenvox/api/batch.proto",
}
